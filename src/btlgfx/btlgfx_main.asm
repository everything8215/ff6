
; +----------------------------------------------------------------------------+
; |                                                                            |
; |                            FINAL FANTASY VI                                |
; |                                                                            |
; +----------------------------------------------------------------------------+
; | file: btlgfx/btlgfx_main.asm                                               |
; |                                                                            |
; | description: battle graphics program                                       |
; |                                                                            |
; | created: 8/2/2022                                                          |
; +----------------------------------------------------------------------------+

.p816

.include "const.inc"
.include "hardware.inc"
.include "macros.inc"
.include "code_ext.inc"

; ------------------------------------------------------------------------------

.include "btlgfx/attack_anim_frames.inc"
.include "btlgfx/attack_anim_script.inc"
.include "btlgfx/battle_event_script.inc"
.include "btlgfx/blitz_code.inc"

.include "gfx/battle_bg.inc"
.include "gfx/monster_gfx.inc"
.include "gfx/map_sprite_gfx.inc"

inc_lang "text/attack_msg_%s.inc"
inc_lang "text/attack_name_%s.inc"
inc_lang "text/battle_cmd_name_%s.inc"
inc_lang "text/battle_dlg_%s.inc"
inc_lang "text/bushido_name_%s.inc"
inc_lang "text/dance_name_%s.inc"
inc_lang "text/genju_attack_name_%s.inc"
inc_lang "text/genju_name_%s.inc"
inc_lang "text/item_name_%s.inc"
inc_lang "text/item_type_name_%s.inc"
inc_lang "text/magic_name_%s.inc"
inc_lang "text/monster_dlg_%s.inc"
inc_lang "text/monster_name_%s.inc"
inc_lang "text/monster_special_name_%s.inc"

.include "char_ai.asm"
.include "monster_overlap.asm"

; ------------------------------------------------------------------------------

.import AttackGfx2bpp, AttackGfx3bpp, AttackGfxMode7
.import AttackTiles2bpp, AttackTiles3bpp, AttackTilesMode7
.import AttackPal, BattleCharPal, BattleFontPal
.import BattleBGProp, CharProp, MonsterStencil
.import SlotGfx, StatusGfx, WindowGfx
.import FontWidth, BattleMonsters
.import LargeFontGfx, SmallFontGfx, RNGTbl

; ------------------------------------------------------------------------------

.segment "btlgfx_code"
.a8
.i16

; ------------------------------------------------------------------------------

; [ battle graphics ]

ExecBtlGfx_ext:
@0000:  pha
        clr_a
        pla
        asl
        tax
        jmp     (.loword(BtlGfxTbl),x)

; ------------------------------------------------------------------------------

; battle graphics command jump table
BtlGfxTbl:
@0008:  .addr   BtlGfx_00
        .addr   BtlGfx_01
        .addr   BtlGfx_02
        .addr   BtlGfx_03
        .addr   BtlGfx_04
        .addr   BtlGfx_05
        .addr   BtlGfx_06
        .addr   BtlGfx_07
        .addr   BtlGfx_08
        .addr   BtlGfx_09
        .addr   BtlGfx_0a
        .addr   BtlGfx_0b
        .addr   BtlGfx_0c
        .addr   BtlGfx_0d

; ------------------------------------------------------------------------------

; [ battle graphics command $0d: get position in menu queue ]

; $10 = character number

BtlGfx_0d:
@0024:  lda     $10
        and     #$03
        tax
        lda     $4001,x
        rtl

; ------------------------------------------------------------------------------

; [ battle graphics command $0c: scroll bg for final battle ]

BtlGfx_0c:
last_init:
@002d:  lda     $ecb8
        cmp     #$35
        bne     @004b
        inc     $e9ed       ; disable sound effects
        lda     #$81
        sta     $1300
        lda     #$80
        sta     $1301
        stz     $1302
        jsl     ExecSound_ext
        stz     $e9ed       ; enable sound effects
@004b:  lda     #$80
        sta     $6285
        inc     $e9ef       ; stop battle time
        inc     $ec0f       ; disable pause
        inc     $629a
        jsr     _c10105       ; force close all battle menus
        jsl     _c2b60d
        jsr     _c1926b
        clr_a
        jsr     _c1925e
        jsr     _c191dc
        clr_ax
@006c:  stz     $6178,x
        inx
        cpx     #$00be
        bne     @006c
        rtl

; ------------------------------------------------------------------------------

; [ init graphics for next part of final battle ]

_c10076:
last_init2:
@0076:  jsr     _c10fe0
        jsr     _c10fb6
        stz     $e9ef       ; start battle time
        jsr     _c10df3
        inc     $e9ef       ; stop battle time
        jsr     _c10e67
        jsr     InitCharMenuOrder
        jsr     InitMenuText
        jsr     InitCharGfxFinalBattle
        jsr     LoadStatusPal
        jsr     _c1468f
        jsr     InitMenuText
        jsr     _c14759
        inc     $7bbb       ; enable battle menu update
        jsr     _c10f8f       ; check if characters can change equipment
        jsr     UpdateDrawOrder
        jsl     _c2b652
        rts

; ------------------------------------------------------------------------------

; [ battle graphics command $0a: update inventory with obtained items ]

BtlGfx_0a:
@00ab:  jsr     _c14445       ; update inventory with obtained items
        rtl

; ------------------------------------------------------------------------------

; [ battle graphics command $09: fade out & terminate battle ]

BtlGfx_09:
@00af:  lda     $2f4b
        bmi     @00bb
        lda     $11e4
        and     #$08
        beq     @00c0       ; branch if not continuing current music
@00bb:  lda     $6284
        beq     @00d7
@00c0:  inc     $e9ed       ; disable sound effects
        lda     #$81
        sta     $1300
        lda     #$10
        sta     $1301
        stz     $1302
        jsl     ExecSound_ext
        stz     $e9ed       ; enable sound effects
@00d7:  lda     $e9f9
        beq     @00e6
@00dc:  lda     #$01
        jsr     WaitA       ; wait 1 frame
        dec     $e9f9
        bne     @00dc
@00e6:  jsl     _c2b60d
        clr_a
        pha
        plb
        stz     hNMITIMEN
        stz     hMDMAEN
        stz     hHDMAEN
        lda     #$80
        sta     hINIDISP
        lda     #$6b
        sta     $1500
        sta     $1504
        sei
        rtl

; ------------------------------------------------------------------------------

; [ force close all battle menus ]

_c10105:
win_all_close_wait:
@0105:  ldx     #$ffff      ; close all battle menus
        stx     $4001
        stx     $4003
        jsr     WaitFrame
        lda     $7bca       ; branch if menu is still open
        bne     @0105
        rts

; ------------------------------------------------------------------------------

; [ battle graphics command $08: victory animation ]

BtlGfx_08:
@0117:  inc     $ec0f       ; disable pause
        inc     $629a
        jsr     _c10105       ; force close all battle menus
        jsl     UpdateMonsterNames
        lda     $2f49
        and     #$02
        bne     @016a       ; return if fanfare is disabled
        clr_ax
@012d:  lda     f:_c1016b,x   ; copy to battle script command queue
        sta     $2d6e,x
        inx
        cpx     #5
        bne     @012d
        jsr     WaitFrame
        jsr     WaitFrame
        lda     $11e4
        and     #$08
        bne     @0163       ; branch if continuing music from map
        inc     $e9ed       ; disable sound effects
        inc     $6284
        lda     #$10
        sta     $1300
        lda     #$2f        ; song $2f (fanfare)
        sta     $1301
        lda     #$ff
        sta     $1302
        jsl     ExecSound_ext
        stz     $e9ed       ; enable sound effects
@0163:  inc     $628d
        jsl     BtlGfx_04
@016a:  rtl

; ------------------------------------------------------------------------------

; battle script command $0f/01: execute battle event 1 (victory)
_c1016b:
@016b:  .byte   $0f,$01,$00,$00,$ff

; ------------------------------------------------------------------------------

; [ battle graphics command $07: nothing ]

BtlGfx_07:
@0170:  rtl

; ------------------------------------------------------------------------------

; [ battle graphics command $0b:  ]

BtlGfx_0b:
@0171:  lda     $7bca
        beq     @0186
        lda     $10
        cmp     $62ca
        bne     @0186
        jsr     _c14759
        jsr     _c147ac
        inc     $7bbb       ; enable menu window update
@0186:  rtl

; ------------------------------------------------------------------------------

; [ ??? ]

_c10187:
nor_tfr_long:
@0187:  jsr     DrawMonsterNames
        jsr     _c14759
        inc     $7bbb       ; enable menu window update
        jsr     WaitFrame
        jsr     CopyMonsterNameBuffer
        rtl

; ------------------------------------------------------------------------------

; [ battle graphics command $06: update monster names ]

BtlGfx_06:
UpdateMonsterNames:
@0197:  clr_ax
@0199:  lda     $200d,x     ; compare monster name data to buffer
        cmp     $ebff,x
        bne     @01a8
        inx
        cpx     #$0010
        bne     @0199
        rtl
@01a8:  lda     $7bca       ; branch if menu is open
        bne     @01bc
        jsr     DrawMonsterNames
        jsr     _c14759
        inc     $7bbb       ; enable battle menu update
        jsr     WaitFrame
        jsr     CopyMonsterNameBuffer
@01bc:  rtl

; ------------------------------------------------------------------------------

; [ copy monster name data from buffer ]

CopyMonsterNameBuffer:
@01bd:  clr_ax
@01bf:  lda     $200d,x
        sta     $ebff,x
        inx
        cpx     #$0010
        bne     @01bf
        rts

; ------------------------------------------------------------------------------

; [ battle graphics command $05: add item obtained in battle ]

BtlGfx_05:
@01cc:  lda     $64da       ; next available slot for item obtained in battle
        and     #$0f
        sta     $10
        asl2
        clc
        adc     $10
        tax
        clr_ay
@01db:  lda     $2e72,y     ; copy item data to items obtained in battle (5 bytes)
        sta     $602d,x
        inx
        iny
        cpy     #$0005
        bne     @01db
        inc     $64da       ; increment number of items obtained in battle
        rtl

; ------------------------------------------------------------------------------

; [ battle graphics command $00: init battle graphics ]

BtlGfx_00:
@01ec:  jsl     _c2d3d5     ; init hardware registers
        jsr     InitBattleGfx
        jsl     BtlGfx_01
        jsr     UpdateDrawOrder
        rtl

; ------------------------------------------------------------------------------

; [ battle graphics command $01: wait one frame ]

; called from main battle loop, and 4 times after each attack animation

BtlGfx_01:
@01fb:  phx
        phy
        jsr     WaitVblank
        jsr     _c10df3       ; update hp/mp/status buffers (for graphics)
        jsr     UpdateMenuWindow
        jsr     _c12f79       ; update character status change animations
        jsr     _c102ca       ; update battle menu
        jsr     UpdateCharText
        jsl     UpdateCondemnNum
        jsr     MonsterDeathAnim
        jsl     UpdateFacingDir
        lda     $e9ef
        bne     @0223       ; branch if battle time is stopped
        jsl     UpdateBattleTime_ext
@0223:  ply
        plx
        rtl

; ------------------------------------------------------------------------------

; [ wait for vblank (long access) ]

WaitFrame_far:
@0226:  jsr     WaitFrame
        rtl

; ------------------------------------------------------------------------------

; [ wait one frame ]

; called from graphics bank, used during animations

WaitFrame:
@022a:  phx
        phy
        jsr     WaitVblank
        jsr     UpdateMenuWindow
        jsr     _c102ca       ; update battle menu
        jsr     UpdateCharText
        jsl     UpdateCondemnNum
        jsl     UpdateFacingDir
        lda     $e9ef
        bne     @0249       ; branch if battle time is stopped
        jsl     UpdateBattleTime_ext
@0249:  ply
        plx
        rts

; ------------------------------------------------------------------------------

; [ battle graphics command $03: close battle menu ]

; $10: character slot

BtlGfx_03:
@024c:  lda     $10
        and     #$03
        tax
        lda     #$ff
        sta     $4001,x
        rtl

; ------------------------------------------------------------------------------

; [ battle graphics command $02: open battle menu ]

; $10: m-----cc
;        m: set if character is controlling a monster
;        c: character number

BtlGfx_02:
@0257:  lda     $628b       ; return if ???
        bne     @0285
        lda     $10
        asl
        rol
        and     #$01
        sta     $12
        lda     $10
        and     #$03
        tax
        lda     $12
        sta     $62cc,x     ; character is controlling a monster
        lda     $4001,x
        cmp     #$ff
        bne     @0285       ; return if character is already in the menu queue
        txa
        sta     $4000
        jsr     _c10286       ; update battle menu queue
        lda     $4000
        tax
        lda     #$03
        sta     $4001,x     ; put character in the back of the menu queue
@0285:  rtl

; ------------------------------------------------------------------------------

; [ update battle menu queue ]

; moves characters up to the frontmost empty slot in the queue

_c10286:
key_no_sift:
@0286:  clr_ax
        stz     $10
        stz     $12
@028c:  jsr     _c102b2       ; update menu order slot (set to next available slot)
        bcc     @0293       ; branch if slot empty
        inc     $12
@0293:  inc     $10         ; next slot
        lda     $10
        cmp     #$05
        bne     @028c
        lda     $12         ; first empty slot
        sta     $10
@029f:  lda     $10
        cmp     #$05
        beq     @02b1
        lda     #$ff
        sta     $12
        jsr     _c102b2       ; update menu order slot (set to $ff)
        inc     $10
        jmp     @029f
@02b1:  rts

; ------------------------------------------------------------------------------

; [ update menu order slot ]

; $10 = position in menu order to find
; $12 = new menu order to set
; carry clear = slot was empty, carry set = slot was found

_c102b2:
one_key_buf_chg:
@02b2:  clr_ax
@02b4:  lda     $4001,x     ; character position in menu queue
        cmp     $10
        beq     @02c3
        inx
        cpx     #$0004
        bne     @02b4
        clc
        rts
@02c3:  lda     $12
        sta     $4001,x
        sec
        rts

; ------------------------------------------------------------------------------

; [ update battle menu ]

; called every frame after vblank

_c102ca:
auto_window_open:
@02ca:  jsr     _c10286       ; update battle menu queue
        clr_ax
@02cf:  lda     $4001,x     ; character position in menu queue
        beq     @02dc       ; branch if at top of queue
        inx                 ; next character
        cpx     #$0004
        bne     @02cf
        bra     @02f9       ; return if no character was at the top of the queue
@02dc:  lda     $e9f1       ; return if ???
        ora     $7bf0
        ora     $628b
        ora     $7bca
        ora     $7bbb
        ora     $7bcc
        bne     @02f9
        stz     $7bcb       ;
        stx     $62ca       ; set active character
        jsr     _c144a2
@02f9:  rts

; ------------------------------------------------------------------------------

; [ update hdma #3 and #5 ]

_c102fa:
@02fa:  lda     $7b95       ; branch if hdma #3 doesn't need to be updated
        beq     @0328
        cmp     #$01
        beq     @0308       ; branch if slot
        ldx     #$000f
        bra     @030b
@0308:  ldx     #$0023
@030b:  stz     $7b95       ; disable hdma #3 update
        phb
        lda     #$00
        pha
        plb
        tay
@0314:  lda     f:_c2d368,x
        sta     $4330,y     ; set hdma #3 registers
        iny
        inx
        cpy     #$0005
        bne     @0314
        lda     #$7e
        sta     $4337
        plb
@0328:  lda     $7b96       ; branch if hdma #5 doesn't need to be updated
        beq     @0346
        stz     $7b96       ; disable hdma #5 update
        clr_ax
@0332:  lda     f:_c2d368+5*10,x
        sta     f:$004350,x   ; set hdma #5 registers
        inx
        cpx     #$0005
        bne     @0332
        lda     #$7e
        sta     f:$004357
@0346:  rts

; ------------------------------------------------------------------------------

; [ update hdma #7 ]

_c10347:
@0347:  longa
        lda     f:_c2d368+5*9     ; set hdma #7 registers
        sta     f:$004370
        lda     f:_c2d368+5*9+2
        sta     f:$004372
        shorta0
        lda     f:_c2d368+5*9+4
        sta     f:$004374
        lda     #$7e
        sta     f:$004377
        lda     $7bef       ; enable hdma channel #7
        ora     #$80
        sta     $7bef
        rts

; ------------------------------------------------------------------------------

; [ update hdma #6 ]

_c10373:
@0373:  lda     $7b97       ; branch if hdma #6 doesn't need to be updated
        beq     @03a1
        cmp     #$01
        beq     @0381       ; branch if slot
        ldx     #$001e
        bra     @0384
@0381:  ldx     #$0028
@0384:  stz     $7b97       ; disable hdma #6 update
        phb
        lda     #$00
        pha
        plb
        tay
@038d:  lda     f:_c2d368,x
        sta     $4360,y     ; set hdma #6 registers
        iny
        inx
        cpy     #$0005
        bne     @038d
        lda     #$7e
        sta     $4367
        plb
@03a1:  rts

; ------------------------------------------------------------------------------

; [ init hdma ]

InitHDMA:
@03a2:  phb
        lda     #$00
        pha
        plb
        clr_axy
@03aa:  lda     #$05
        sta     $10
@03ae:  lda     f:_c2d368,x
        sta     $4300,y
        inx
        iny
        dec     $10
        bne     @03ae
        lda     #$7e
        sta     $4302,y
        tya
        clc
        adc     #$0b
        tay
        cpx     #$0023
        bne     @03aa
        plb
        lda     #$03        ;
        sta     $800c
        lda     #$04
        sta     $800d
        lda     #$05
        sta     $800e
        jsr     _c103fb
        lda     #$7f        ; enable hdma channels #0 through #6
        sta     $7bef
; fallthrough

; ------------------------------------------------------------------------------

; [ set battle bg hdma scroll type ]

_c103e2:
@03e2:  lda     $ecb8
        cmp     #$0f
        beq     @03f5
        cmp     #$2c
        beq     @03f5
        cmp     #$2e
        bne     @03fa
        lda     #$0b
        bra     @03f7
@03f5:  lda     #$0a
@03f7:  sta     $800d
@03fa:  rts

; ------------------------------------------------------------------------------

; [ update hdma #0, #1, and #2 ]

_c103fb:
hdma_line_data_set:
@03fb:  lda     $800c
        bmi     @0419
        ora     #$80
        sta     $800c
        and     #$7f
        asl
        tax
        lda     f:_c2d150,x
        sta     f:$004302
        lda     f:_c2d150+1,x
        sta     f:$004303
@0419:  lda     $800d
        bmi     @0437
        ora     #$80
        sta     $800d
        and     #$7f
        asl
        tax
        lda     f:_c2d150,x
        sta     f:$004312
        lda     f:_c2d150+1,x
        sta     f:$004313
@0437:  lda     $800e
        bmi     @0459
        ora     #$80
        sta     $800e
        clc
        adc     $7b8a
        and     #$7f
        asl
        tax
        lda     f:_c2d150,x
        sta     f:$004322
        lda     f:_c2d150+1,x
        sta     f:$004323
@0459:  lda     $7bef
        sta     f:hHDMAEN
        rts

; ------------------------------------------------------------------------------

_c10461:
@0461:  .word   $9213,$9013,$9213,$9413

; ------------------------------------------------------------------------------

; [ load "short" menu window tile data ]

_c10469:
@0469:  lda     $64b8       ; return if window mode is not short
        beq     @04c9
        lda     $64b9       ;
        bne     @0478
        lda     #$08
        sta     $64b9
@0478:  lda     $98         ; frame counter
        and     #$07
        asl
        tax
        longa
        lda     f:_c2d2a4,x
        sta     f:hVMADDL
        phx
        lda     $64b8
        and     #$00ff
        asl
        tax
        lda     f:_c10461,x
        plx
        clc
        adc     f:_c2d2b4,x
        sta     f:$004372
        lda     #$0040
        sta     f:$004375
        shorta0
        lda     #$7e
        sta     f:$004374
        lda     #$01
        sta     f:$004370
        lda     #$18
        sta     f:$004371
        lda     #$80
        sta     f:hMDMAEN
        dec     $64b9
        bne     @04c9
        stz     $64b8
@04c9:  rts

; ------------------------------------------------------------------------------

; [ copy menu window tile data to vram ]

_c104ca:
@04ca:  lda     $7bbb       ; return if menu window update is disabled
        beq     @050b
        inc     $629b       ;
        lda     $62aa       ; branch if copying a special number of strips
        bne     @04dc
        lda     #$08        ; copy 8 strips (default)
        sta     $62aa
@04dc:  lda     $98         ; frame counter
        and     #$07
        asl
        tax
        longa
        lda     $7bbe       ; pointer to menu tile data in vram (bg2)
        clc
        adc     f:_c2d294,x   ; add strip offset
        tay
        lda     $7bc0       ; pointer to menu tile data buffer in ram (bg2)
        clc
        adc     f:_c2d2b4,x   ; add strip offset
        tax
        lda     #$0040      ; size = 32 tiles (8x8)
        sta     $36
        shorta0
        lda     #$7e
        jsr     TfrVRAM
        dec     $62aa       ; next strip
        bne     @050b
        stz     $7bbb       ; disable menu window update
@050b:  rts

; ------------------------------------------------------------------------------

; [  ]

_c1050c:
nmi_player_mp_set:
@050c:  clr_ax
        lda     $62ca
@0511:  cmp     $64d6,x
        beq     @051e
        inx
        cpx     #$0004
        bne     @0511
        clr_ax
@051e:  lda     f:_c2d364,x
        tax
        clr_ay
@0525:  lda     $5ca5,x
        cmp     #$15
        beq     @052f
        clc
        adc     #$54
@052f:  sta     $5d15,y
        iny2
        inx2
        cpy     #$000e
        bne     @0525
        stz     $40
        stz     $41
        lda     $6178
@0542:  sec
        sbc     #$64
        bcc     @054b
        inc     $40
        bra     @0542
@054b:  clc
        adc     #$64
@054e:  sec
        sbc     #$0a
        bcc     @0557
        inc     $41
        bra     @054e
@0557:  clc
        adc     #$12
        sta     $5d27
        lda     #$02
        sta     $5d28
        sta     $5d26
        sta     $5d24
        lda     $41
        clc
        adc     #$08
        sta     $5d25
        lda     $40
        clc
        adc     #$08
        sta     $5d23
        cmp     #$08
        bne     @0584
        lda     #$ff
        sta     $5d23
        stz     $5d24
@0584:  lda     $41
        bne     @0590
        lda     #$ff
        sta     $5d25
        stz     $5d26
@0590:  rts

; ------------------------------------------------------------------------------

; pointers to bg1 tile data in vram (4 quadrants of bg1, ???, ???, 2 quadrants of bg3)
_c10591:
@0591:  .word   $0c00,$0c10,$0e00,$0e10,$2800,$2000,$5400,$5410

; ------------------------------------------------------------------------------

; [ copy animation bg tile data to vram ]

_c105a1:
@05a1:  lda     $7b15       ; branch if bg1 animation tile data doesn't need to be updated
        beq     @05e3
        stz     $7b15       ; validate bg1 animation tile data
        lda     $60a7       ; branch if bg1 animation is hidden
        bne     @05ca
        lda     $62c8       ; tile data quadrant
        asl
        tax
        longa
        lda     f:_c10591,x   ; +$36 = pointer to tile data in vram
        sta     $36
        shorta0
        stz     $62c8       ; clear quadrant (top-left)
        lda     $7b1c       ; pointer to animation tile data buffer
        ldx     $7b1a
        jsr     _c11a51       ; copy animation bg tile data to vram
@05ca:  longa
        lda     $7b16       ; x position
        sec
        sbc     $7b1d       ; x offset
        sta     $64b4       ; bg1 horizontal scroll position
        lda     $7b18       ; y position
        sec
        sbc     $7b1f       ; y offset
        sta     $64b6       ; bg1 vertical scroll position
        shorta0
@05e3:  lda     $7b21       ; branch if bg3 animation tile data doesn't need to be updated
        beq     @063f
        stz     $7b21       ; validate bg3 animation tile data
        lda     $60a8       ; branch if bg3 animation is hidden
        bne     @061d
        lda     $62c9       ; tile data quadrant
        beq     @060c       ; branch if top-left
        cmp     #$01
        beq     @0607       ; branch if top-right
        cmp     #$02
        beq     @0602       ; branch if bottom-left
        ldy     #$5610      ; bottom-right
        bra     @060f
@0602:  ldy     #$5600      ; bottom-left
        bra     @060f
@0607:  ldy     #$5410      ; top-right
        bra     @060f
@060c:  ldy     #$5400      ; top-left
@060f:  stz     $62c9       ; clear quadrant
        lda     $7b28       ; pointer to tile data buffer
        ldx     $7b26
        sty     $36         ; vram destination
        jsr     _c11a51       ; copy animation bg tile data to vram
@061d:  lda     $800e       ; bg3 scroll hdma index
        and     #$7f
        cmp     #$05        ; return if not 5
        bne     @063f
        longa
        lda     $7b22       ; x offset
        sec
        sbc     $7b29       ; subtract x position
        sta     $4af5       ; bg3 horizontal scroll position
        lda     $7b24       ; y offset
        sec
        sbc     $7b2b       ; subtract y position
        sta     $4af7       ; bg3 vertical scroll position
        shorta0
@063f:  rts

; ------------------------------------------------------------------------------

; [ copy damage numeral graphics to vram ]

_c10640:
@0640:  lda     $6316       ; return if damage numeral graphics update is disabled
        beq     @0658
        stz     $6316       ; disable damage numeral graphics update
        ldx     #$0080
        stx     $36         ; size = $0080 (4 8x8 tiles)
        ldx     #$60b3
        lda     #$7e
        ldy     $6317       ; source = $7e60b3 (graphics buffer)
        jmp     TfrVRAM
@0658:  rts

; ------------------------------------------------------------------------------

; [  ]

_c10659:
cur_poi_set:
@0659:  shorti
        stz     $7b6b
        clr_ax
        longa
@0662:  lda     $812f,x
        and     #$00ff
        asl3
        lsr
        clc
        adc     $80c3,x
        sta     $800f,x
        lda     $8130,x
        and     #$00ff
        asl3
        sta     $36
        lsr
        clc
        adc     $80cf,x
        sta     $801b,x
        lda     $36
        clc
        adc     $80cf,x
        sec
        sbc     #$0008
        sta     $8027,x
        clc
        adc     $8057,x
        sta     $804b,x
        lda     $80c3,x
        sec
        sbc     #$0008
        clc
        adc     $807b,x
        sta     $8063,x
        lda     $8130,x
        and     #$00ff
        asl3
        lsr
        clc
        adc     $80cf,x
        sta     $806f,x
        inx2
        cpx     #$0c
        bne     @0662
        clr_axy
@06c2:  lda     $61b7,x
        clc
        adc     $61c5,x
        clc
        adc     $61d4,x
        sta     $36
        sec
        sbc     #$0010
        clc
        adc     $809f,y
        sta     $8087,y
        lda     $36
        clc
        adc     #$0008
        sta     $8033,y
        lda     $61b9,x
        clc
        adc     $61c7,x
        clc
        adc     #$0008
        sta     $8093,y
        sta     $803b,y
        adc     #$0008
        sta     $8043,y
        txa
        clc
        adc     #$0020
        tax
        iny2
        cpy     #$08
        bne     @06c2
        shorta0
        longi
        lda     $2f47
        eor     #$ff
        sta     $6193
        lda     $201d
        and     $61ac
        and     $2f47
        beq     @078e
        jsr     _c11a0f
        asl
        tax
        lda     $201f
        longa
        cmp     #$0001
        bne     @0736
        lda     $8087,x
        sec
        sbc     #$0020
        bra     @073d
@0736:  lda     $8087,x
        clc
        adc     #$0020
@073d:  sta     $806d
        lda     $8093,x
        sta     $8079
        lda     $8033,x
        sta     $8019
        lda     $803b,x
        sta     $8025
        lda     $8043,x
        sta     $8031
        lda     $8033,x
        sec
        sbc     #$000c
        sta     $80cd
        lda     $803b,x
        sec
        sbc     #$0008
        sta     $80d9
        lda     #$0032
        sta     $8139
        lda     $201f
        and     #$0001
        eor     #$0001
        sta     $8085
        shorta0
        lda     #$20
        sta     $6195
        ora     $7b79
        sta     $7b79
        bra     @0791
@078e:  stz     $6195
@0791:  lda     #$ff
        and     $201e
        and     $61ab
        and     $2f46
        ora     $6195
        sta     a:$0092
        rts

; ------------------------------------------------------------------------------

; [ clear sprite data ]

; does not clear cursor sprites

ClearSpriteData:
@07a3:  shorti
        clr_ax
@07a7:  sta     $0501,x
        inx
        cpx     #$1b
        bne     @07a7
        lda     #$80
        sta     $051c
        longa
        clr_ax
        lda     #$e0e0
@07bb:  sta     $0320,x
        sta     $0354,x
        sta     $0388,x
        sta     $03bc,x
        sta     $03f0,x
        sta     $0424,x
        sta     $0458,x
        sta     $048c,x
        inx4
        cpx     #$34
        bne     @07bb
        sta     $04c0
        sta     $04c4
        sta     $04c8
        shorta0
        longi
        rts

; ------------------------------------------------------------------------------

; [  ]

_c107ea:
line_copy:
@07ea:  lda     $6283       ; wavy battle bg (desert)
        tax
        stx     $44
        shorti
        longa
        lda     $6197
        beq     @081e
        stz     $6197
        clr_ax
@07fe:  lda     $9a21,x
        sta     $9f21,x
        lda     $9ab9,x
        sta     $9fb9,x
        lda     $9b51,x
        sta     $a051,x
        lda     $9be9,x
        sta     $a0e9,x
        inx4
        cpx     #$98
        bne     @07fe
@081e:  stz     $34
        shorta0
        tax
        lda     $800c       ; bg1 scroll hdma index
        and     #$7f
        cmp     #$06
        bne     @0831
        inc     $34
        bra     @0839
@0831:  cmp     #$08
        bne     @0839
        lda     #$80
        sta     $35
@0839:  longa
        lda     $64b0
        sta     $36
        lda     $64b2
        sta     $38
        lda     $800c
        and     #$007f
        beq     @0878
        lda     $62a9
        and     #$00ff
        beq     @0867
        lda     $64b0
        sta     $3a
        sta     $43f5
        lda     $64b2
        sta     $3c
        sta     $43f7
        bra     @0878
@0867:  lda     $64b4
        sta     $3a
        sta     $43f5
        lda     $64b6
        dec
        sta     $3c
        sta     $43f7
@0878:  lda     $62c1
        and     #$00ff
        beq     @0884
        stz     $36
        stz     $38
@0884:  lda     $34
        bpl     @08d2
        lda     $63b0,x
        clc
        adc     $3a
        sta     $43f5,x
        lda     $63b2,x
        clc
        adc     $3c
        sta     $43f7,x
        lda     $63f0,x
        clc
        adc     $3a
        sta     $4435,x
        lda     $63f2,x
        clc
        adc     $3c
        sta     $4437,x
        lda     $6430,x
        clc
        adc     $3a
        sta     $4475,x
        lda     $6432,x
        clc
        adc     $3c
        sta     $4477,x
        lda     $6470,x
        clc
        adc     $3a
        sta     $44b5,x
        lda     $6472,x
        clc
        adc     $3c
        sta     $44b7,x
        bra     @08f8
@08d2:  beq     @08f8
        lda     $63b0,x
        clc
        adc     $3a
        sta     $43f5,x
        lda     $63b2,x
        clc
        adc     $3c
        sta     $43f7,x
        lda     $63f0,x
        clc
        adc     $3a
        sta     $4435,x
        lda     $63f2,x
        clc
        adc     $3c
        sta     $4437,x
@08f8:  lda     $44
        bne     @0920
        lda     $6330,x
        clc
        adc     $36
        sta     $4775,x
        lda     $6332,x
        clc
        adc     $38
        sta     $4777,x
        lda     $6370,x
        clc
        adc     $36
        sta     $47b5,x
        lda     $6372,x
        clc
        adc     $38
        sta     $47b7,x
@0920:  inx4
        cpx     #$40
        jne     @0884
        shorta0
        tay
        lda     $0e
        lsr
        and     #$3e
        tax
        lda     $44
        beq     @0993
        lda     $ecb8
        cmp     #$2e
        beq     @095d
        cmp     #$37
        bne     @0976
        longa
@0946:  lda     $e7ff,x
        sta     $4777,y
        inx2
        txa
        and     #$003f
        tax
        iny4
        cpy     #$80
        bne     @0946
        bra     @0990
@095d:  longa
@095f:  lda     $e83f,x
        sta     $4777,y
        inx2
        txa
        and     #$003f
        tax
        iny4
        cpy     #$80
        bne     @095f
        bra     @0990
@0976:  longa
@0978:  lda     $e7ff,x
        sta     $4775,y
        sta     $4777,y
        inx2
        txa
        and     #$003f
        tax
        iny4
        cpy     #$80
        bne     @0978
@0990:  shorta0
@0993:  longi
        rts

; ------------------------------------------------------------------------------

; [ check pause ]

CheckPause:
@0996:  lda     $62ab
        beq     @09b6       ; branch if battle is not paused
        lda     $e9ed
        bne     @09da       ; branch if sound effects are disabled
        lda     $09
        cmp     #$10
        bne     @09da       ; branch if start button is pressed
        stz     $62ab       ; unpause battle
        clr_a                 ; 0 = unpause music
        sta     f:hAPUIO1
        lda     #$f5        ; spc command $f5 (pause/unpause music)
        sta     f:hAPUIO0
        bra     @09da
@09b6:  lda     $628a
        bne     @09dc       ; branch if in flashback mode
        lda     $e9ed
        bne     @09dc       ; branch if sound effects are disabled
        lda     $ec0f
        bne     @09dc       ; branch if victory animation or background scrolling
        lda     $09
        cmp     #$10
        bne     @09dc       ; branch if start button is pressed
        lda     #$01        ; 1 = pause music
        sta     $62ab       ; pause battle
        sta     f:hAPUIO1
        lda     #$f5        ; spc command $f5 (pause/unpause music)
        sta     f:hAPUIO0
@09da:  sec
        rts
@09dc:  clc
        rts

; ------------------------------------------------------------------------------

; [  ]

_c109de:
@09de:  asl
        tax
        longa
        lda     f:_c2d2c4,x
        sta     $4372
        lda     f:_c2d2d4,x
        sta     hVMADDL
        ldy     #$0080
        sty     $4375
        lda     #$0080
        sta     hMDMAEN
        lda     f:_c2d2cc,x
        sta     $4372
        lda     f:_c2d2dc,x
        sta     hVMADDL
        sty     $4375
        lda     #$0080
        shorta
        sta     hMDMAEN
        rts

; ------------------------------------------------------------------------------

; [ update ppu ]

_c10a16:
@0a16:  clr_a
        pha
        plb
        sta     hHDMAEN       ; disable hdma
        sta     $4374       ;
        sta     $4377
        tay
        lda     hSTAT78       ; latch counters
        lda     #$80
        sta     hINIDISP
        sty     hOAMADDL
        ldx     #$0400
        stx     $4370       ; copy sprite data to ppu
        ldx     #$0300
        stx     $4372
        ldx     #$0220
        stx     $4375
        lda     #$80
        sta     hMDMAEN
        clr_a
        sta     hCGADD       ; copy bg palettes to ppu (non battle-bg)
        ldx     #$2202
        stx     $4370
        ldx     #$7e00
        stx     $4372
        lda     #$7e
        sta     $4374
        ldx     #$00a0
        stx     $4375
        lda     #$80
        sta     hMDMAEN
        ldx     #$ec11      ; copy battle bg palettes to ppu
        stx     $4372
        lda     #$7e
        sta     $4374
        ldx     #$0060
        stx     $4375
        lda     #$80
        sta     hMDMAEN
        ldx     #$7f00      ; copy sprite palettes to ppu
        stx     $4372
        lda     #$7e
        sta     $4374
        ldx     #$0100
        stx     $4375
        lda     #$80
        sta     hMDMAEN
        lda     #$01        ;
        sta     $4370
        lda     #$18
        sta     $4371
        lda     $7e62bd
        bne     @0aec
        lda     $98
        and     #$1f
        asl
        tax
        longa
        lda     #$0080
        sta     $4375
        lda     f:_c2d324,x
        sta     hVMADDL
        lda     f:_c2d2e4,x
        sta     $4372
        shorta0
        lda     #$7f
        sta     $4374
        lda     #$80
        sta     hMDMAEN
        lda     $98
        and     #$03
        sta     $36
        jsr     _c109de
        lda     $7e64bb
        bne     @0aec
        lda     $7e7bad
        bmi     @0aec
        cmp     $36
        beq     @0ae6
        jsr     _c109de
@0ae6:  lda     #$ff
        sta     $7e7bad
@0aec:  ldx     #$0040
        stx     $4375
        ldx     #$5fed
        stx     $4372
        ldx     #$4020
        stx     hVMADDL
        lda     #$7e
        sta     $4374
        lda     #$80
        sta     hMDMAEN

; transfer magitek armor graphics to vram
        lda     $7e64bb
        beq     @0b72
        lda     #$d8                    ; magitek armor graphics bank
        sta     $4374
        longa
        ldy     #$0080
        ldx     #$0080
        lda     $7e64bc
        sta     $4372
        lda     $7e64c4
        sta     hVMADDL
        sty     $4375
        stx     hMDMAEN
        lda     $7e64be
        sta     $4372
        lda     $7e64c6
        sta     hVMADDL
        sty     $4375
        stx     hMDMAEN
        lda     $7e64c0
        sta     $4372
        lda     $7e64c8
        sta     hVMADDL
        sty     $4375
        stx     hMDMAEN
        lda     $7e64c2
        sta     $4372
        lda     $7e64ca
        sta     hVMADDL
        sty     $4375
        stx     hMDMAEN
        shorta0
        sta     $7e64bb
@0b72:  rts

; ------------------------------------------------------------------------------

; [ update running/fade in/timers ]

_c10b73:
escape_set:
@0b73:  stz     $2f45       ; disable characters running animation
        jsl     _c2b8a4
        lda     $2f4b       ; can't run with L+R
        and     #$01
        ora     $629a       ;
        ora     $e9ef       ; battle time stopped
        bne     @0b92       ;
        lda     $0a         ; L+R buttons pressed
        and     #$30
        cmp     #$30
        bne     @0b92
        inc     $2f45       ; enable characters running animation
@0b92:  ldx     $0e         ; increment frame counter
        inx
        stx     $0e
        jsl     _c2b925     ; update timer tile data
        stz     $47         ; clear waiting for vblank flag
        lda     $62ab
        bne     @0ba6       ; branch if battle is paused
        jsl     DecTimersMenuBattle_ext
@0ba6:  rts

; ------------------------------------------------------------------------------

; [ battle nmi ]

BattleNMI:
@0ba7:  php
        longai
        pha
        phx
        phy
        phb
        phd
        ldx     #$0000
        phx
        pld
        shorta0
        lda     f:hRDNMI
        lda     $46         ; return if nmi is in progress
        jne     @0d42
        inc     $46         ; nmi in progress
        jsr     _c10a16       ; update ppu
        lda     #$7e
        pha
        plb
        jsr     _c10469       ; load "short" menu window tile data
        jsr     _c104ca       ; copy menu window tile data to vram
        jsr     _c15d99       ; copy menu text tile data to vram
        jsr     _c105a1       ; copy animation bg tile data to vram
        jsr     _c10640       ; copy damage numeral graphics to vram
        jsr     PartialTfrVRAM
        jsl     _c2a88f
        lda     $ecef       ; branch if timer 0 is disabled
        and     #$40
        beq     @0c17
        longa
        lda     #$78e4      ; vram $78e4 (timer tile data)
        sta     f:hVMADDL
        lda     $6290       ; copy timer tile data to vram
        sta     f:hVMDATAL
        lda     $6292
        sta     f:hVMDATAL
        lda     $6294
        sta     f:hVMDATAL
        lda     $6296
        sta     f:hVMDATAL
        lda     $6298
        sta     f:hVMDATAL
        shorta0
@0c17:  jsr     _c102fa       ; update hdma #3 and #5
        jsr     _c10373
        jsr     _c10347       ; update hdma #7
        jsr     _c103fb
        lda     $e9c4
        sta     f:hM7A
        lda     $e9c5
        sta     f:hM7A
        lda     $e9c6
        sta     f:hM7B
        lda     $e9c7
        sta     f:hM7B
        lda     $e9c8
        sta     f:hM7C
        lda     $e9c9
        sta     f:hM7C
        lda     $e9ca
        sta     f:hM7D
        lda     $e9cb
        sta     f:hM7D
        lda     $e9cc
        sta     f:hM7X
        lda     $e9cd
        sta     f:hM7X
        lda     $e9ce
        sta     f:hM7Y
        lda     $e9cf
        sta     f:hM7Y
        longa
        lda     #$f708
        sta     f:hWH0
        lda     #$00ff
        sta     f:hWH2
        shorta0
        lda     $62ab
        beq     @0c95       ; branch if battle is not paused
        lda     $e9f9       ; screen brightness / 2
        lsr
        bra     @0c98
@0c95:  lda     $e9f9       ; screen brightness
@0c98:  bne     @0c9c       ; branch if 0 brightness
        ora     #$80        ; screen off
@0c9c:  sta     f:hINIDISP
        jsr     _c107ea       ;
        jsr     CheckPause
        bcs     @0d03       ; branch if battle is paused
        lda     $7bca
        beq     @0cbc       ; branch if menu is closed
        ldx     $62ca       ; active character
        lda     $4001,x     ; character menu order
        cmp     #$ff
        bne     @0cbc       ; branch if menu is open
        lda     #$01
        sta     $7bcb       ; close menu
@0cbc:  jsr     ClearSpriteData
        lda     #$08        ; next available sprite = 8
        sta     $71
        jsr     _c1b3ce       ; update roulette cursor
        jsr     UpdateSprites
        jsr     _c10659       ; update character/monster positions
        jsr     DrawCursorSprites
        jsr     UpdateCharGfx
        jsr     _c1050c
        lda     $62bf       ; branch if character color palettes are up to date
        bne     @0cdd
        jsr     UpdateCharPal
@0cdd:  jsr     _c15b14       ; update menu windows
        jsr     _c15a5c       ; update menu text
        lda     $7b85       ; branch if menu doesn't open instantly
        beq     @0cf4
        jsr     _c15b14       ; update menu windows
        jsr     _c15a5c       ; update menu text
        jsr     _c15b14       ; update menu windows
        jsr     _c15a5c       ; update menu text
@0cf4:  jsr     UpdateMenuState
        jsr     UpdateSfx
        jsr     _c10b73       ; update running/fade in/timers
        phb
        jsl     IncGameTime_ext
        plb
@0d03:  clr_a
        longa
        lda     a:$000e       ; frame counter
        and     #$000f
        tax
        lda     $6285       ; branch if screen shaking is disabled
        and     #$00ff
        beq     @0d34
        cmp     #$0080
        beq     @0d27       ; branch if horizontal shaking only (final battle scrolling)
        lda     f:ScreenShakeTbl+1,x
        and     #$00ff
        ora     #$ff00
        sta     $64b2
@0d27:  lda     f:ScreenShakeTbl,x
        and     #$00ff
        ora     #$ff00
        sta     $64b0
@0d34:  jsl     UpdateBattleBG
        shorta0
        jsr     UpdateCtrl
        inc     $98         ; increment frame counter
        stz     $46         ; nmi complete
@0d42:  longai
        pld
        plb
        ply
        plx
        pla
        plp
; fallthrough

; ------------------------------------------------------------------------------

; [ battle irq (no effect) ]

BattleIRQ:
@0d4a:  rti                 ; battle irq jumps here

; ------------------------------------------------------------------------------

; screen shaking data (horizontal then vertical)
ScreenShakeTbl:
@0d4b:  .byte   $ff,$fd,$fe,$fd,$fc,$fe,$ff,$fd,$fc,$fe,$fd,$ff,$fd,$fe,$ff,$fe,$ff

; ------------------------------------------------------------------------------

; [ init sine wave tables ]

InitSineBuf:
        .a8
@0d5c:  ldx     #$e7bf
        stz     $24
@0d61:  clr_a
        jsr     _c10d7d
        lda     $24
        clc
        adc     #$02
        sta     $24
        longa
        txa
        clc
        adc     #$0040
        tax
        shorta0
        cpx     #$e9bf
        bne     @0d61
        rts

; ------------------------------------------------------------------------------

; [ calculate sine wave table ]

;  +X: destination address (+$7e0000)
; $24: wave amplitude

_c10d7d:
sin_tmp_buf_set:
@0d7d:  lda     #$10
        sta     $1a
        lda     #$40
        sta     $1c
        stz     $1d
        stz     $22
        bra     _0d91

_c10d8b:
sin_tmp_buf_set64:
@0d8b:  pha
        lda     #$01
        sta     $22
        pla

sin_tmp_buf_set_main:
_0d91:  phx
        sta     $16
        stx     $10
        lda     #$7e
        sta     $12
        stz     $1b
        phb
        lda     #$00
        pha
        plb
        clr_ay
        lda     $16
        longa
        asl
        sta     $16
        lda     $22
        and     #$0001
        beq     @0dd3

;
@0db1:  shorti
        jsr     _c16c02
        longi
        dec2
        sta     [$10],y
        lda     $16
        clc
        adc     $1a
        sta     $16
        iny4
        cpy     $1c
        bne     @0db1
        clr_a
        longi
        shorta
        plb
        plx
        rts

;
@0dd3:  shorti
        jsr     _c16c02
        longi
        dec2
        sta     [$10],y
        lda     $16
        clc
        adc     $1a
        sta     $16
        iny2
        cpy     $1c
        bne     @0dd3
        clr_a
        longi
        shorta
        plb
        plx
        rts

; ------------------------------------------------------------------------------

; [ update hp/mp/status buffers (for graphics) ]

_c10df3:
copy_player_work:
@0df3:  clr_ax
        dex
        stx     $10
        stx     $12
        lda     $628d       ; branch if victory fanfare is happening
        bne     @0e0c
        lda     $e9ef       ; branch if battle time is not stopped
        beq     @0e0c
        inx
        stx     $12         ; mask all statuses except imp, clear, and magitek
        ldx     #$0038
        stx     $10
@0e0c:  longa
        clr_axy
@0e11:  lda     $2e78,x     ; update hp/mp/status buffers
        sta     $2eb5,y
        lda     $2e80,x
        sta     $2eb7,y
        lda     $2e88,x
        sta     $2eb9,y
        lda     $2e90,x
        sta     $2ebb,y
        lda     $2e98,x
        and     $10
        sta     $2ebd,y
        lda     $2ea0,x
        and     $12
        sta     $2ebf,y
        inx2                ; next character
        tya
        clc
        adc     #$0020
        tay
        cpx     #$0008
        bne     @0e11
        shorta0
        stz     $10
        clr_ax
@0e4d:  lda     $2ea1,x     ; update characters with hidden status (sneezed, etc.)
        and     #$20
        eor     #$20
        lsr
        ora     $10
        lsr
        sta     $10
        inx2
        cpx     #$0008
        bne     @0e4d
        lda     $10
        sta     $61ad
        rts

; ------------------------------------------------------------------------------

; [  ]

_c10e67:
status_playcopy:
@0e67:  longa
        clr_ax
@0e6b:  lda     $2ebd,x
        sta     $2ec1,x
        lda     $2ebf,x
        sta     $2ec3,x
        txa
        clc
        adc     #$0020
        tax
        cpx     #$0080
        bne     @0e6b
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ load battle data ]

_c10e86:
mon_data_get:
@0e86:  ldx     #$000f      ; battle data is 15 bytes each
        stx     $22
        ldx     $11e0       ; battle number
        stx     $24
        longa
        jsr     Mult816       ; ++$26 = $22 * +$24 (pointer to battle data)
        shorta
        ldx     $26
        lda     f:BattleMonsters+14,x   ; $28 = top bit of monster numbers
        sta     $28
        longa
        lda     f:BattleMonsters,x   ; $10 = bg1 monsters (not set for any monsters)
        xba
        lsr6
        and     #$003f
        sta     $10
        shorta0
        lda     f:BattleMonsters,x   ; vram map index
        lsr4
        sta     $2000
        lda     f:BattleMonsters+1,x   ; monsters present
        and     #$3f
        sta     $61aa
        clr_ay
@0eca:  lsr     $28
        rol
        and     #$01
        sta     $2a
        lda     f:BattleMonsters+8,x   ; x position
        and     #$f0
        lsr
        sta     $80c3,y
        clr_a
        sta     $80c4,y
        lda     f:BattleMonsters+8,x   ; y position
        and     #$0f
        asl3
        sta     $80cf,y
        clr_a
        sta     $80d0,y
        lsr     $10
        rol
        and     #$01
        sta     $80f4,y     ; bg1 monster (never used)
        iny2
        inx
        cpy     #$000c
        bne     @0eca
        rts

; ------------------------------------------------------------------------------

; [ clear bg1 vertical scroll hdma data (battlefield region) ]

_c10f00:
bg1_line_init:
@0f00:  longa
        clr_ax
        lda     #$ffff
@0f07:  sta     $43f7,x
        inx4
        cpx     #$025c
        bne     @0f07
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ init menu list scrolling ??? ]

_c10f17:
line_init:
@0f17:  jsl     _c2b6f7
        jsr     _c146a5
        rts

; ------------------------------------------------------------------------------

; [ init character menu order ]

; $10: current menu slot (empty char slots are pushed to the bottom)
; $12: characters included in menu order (enemy characters are not included)
;

InitCharMenuOrder:
set_mess_main_poi:
@0f1f:  ldx     #$ffff                  ; start with no characters shown
        stx     $64d6
        stx     $64d8
        inx
        tay
        stz     $10
        stz     $12
        lda     $2f47                   ; don't include enemy characters
        eor     #$ff
        sta     $14
        lda     $6192                   ; include characters in the party
        and     $14
        sta     $14
@0f3c:  lda     $2eae,x                 ; character graphics index
        cmp     #$ff
        beq     @0f55                   ; branch if no character
        lda     $12
        ora     #$10                    ; activate character
        sta     $12
        lda     $14
        and     #$01
        beq     @0f55
        lda     $10
        sta     $64d6,y
        iny
@0f55:  lsr     $14                     ; next character
        lsr     $12
        inc     $10
        txa
        clc
        adc     #$20
        tax
        cmp     #$80
        bne     @0f3c
        lda     $12
        sta     $201d
        stz     $61ac
        stz     $61ad
        lda     $2f4a                   ; character ai index
        sta     $22
        lda     #$18
        sta     $24
        jsr     Mult8
        ldx     $26
        lda     f:CharAI,x              ; character ai data
        and     #CHAR_AI_FLAG_HIDE_NAMES
        beq     @0f8e                   ; branch if character names are not hidden
        ldx     #$ffff
        stx     $64d6                   ; hide all character names
        stx     $64d8
@0f8e:  rts

; ------------------------------------------------------------------------------

; [ check if characters can change equipment ]

_c10f8f:
chr_equip_init:
@0f8f:  clr_ay
@0f91:  tya
        asl5
        tax
        lda     $2ec6,x     ; actor number
        sta     $22
        lda     #$16
        sta     $24
        jsr     Mult8
        ldx     $26
        lda     f:CharProp+21,x   ; character can't change equipment during battle
        and     #CHAR_PROP_FIXED_EQUIP
        sta     $6286,y
        iny                 ; next character
        cpy     #$0004
        bne     @0f91
        rts

; ------------------------------------------------------------------------------

; [  ]

_c10fb6:
player_work_init:
@0fb6:  ldx     #$0007
@0fb9:  stz     $2eae,x
        stz     $2ece,x
        stz     $2eee,x
        stz     $2f0e,x
        inx
        cpx     #$0016
        bne     @0fb9
        lda     $2e98
        ora     $2e9a
        ora     $2e9c
        ora     $2e9e
        and     #$08
        lsr3
        sta     $64ba
        rts

; ------------------------------------------------------------------------------

; [ init character graphics ]

_c10fe0:
user_init_option:
@0fe0:  clr_ax
@0fe2:  stz     $61b6,x     ; clear character graphics data
        inx
        cpx     #$0080
        bne     @0fe2
        stz     $e9ec       ; disable animation sound effect
        stz     $e9ed       ; disable sound effects
        lda     $1dd1       ; battle end event flags
        sta     $ecef
        lda     $1d4e       ; wallpaper
        and     #$07
        sta     $2f34
        stz     $e9f1       ;
        lda     #$ff
        sta     $2f46       ; make all characters targettable
        sta     $6191       ;
        sta     $ec0f       ; disable pause
        jsl     _c2bd43     ; init character ai data
        jsr     _c10e86
        lda     $61aa
        sta     $201e
        sta     $2f2f
        sta     $61ab
        clr_ax
        dex
        stx     $61b2
        stx     $61b4
        rts

; ------------------------------------------------------------------------------

; [ init battle graphics data ]

InitBattleGfx:
user_init:
@102a:  jsl     DecTimersMenuBattle_ext
        clr_ax
        lda     #$e0
@1032:  sta     $0300,x     ; clear sprite data
        inx
        cpx     #$0200
        bne     @1032
        clr_ax
@103d:  stz     $0500,x     ; clear high sprite data
        inx
        cpx     #$0020
        bne     @103d
        ldy     #$4000
        ldx     #$2000
        jsr     ClearVRAM       ; clear vram $4000-$6000
        ldy     #$2c00
        ldx     #$0400
        jsr     ClearVRAM       ; clear vram $2c00-$3000
        longa
        clr_ax
@105c:  sta     $7fa000,x   ; clear character graphics buffer
        sta     $7fa100,x
        sta     $7fa200,x
        sta     $7fa300,x
        inx2
        cpx     #$0100
        bne     @105c
        shorta
        ldx     $11e2       ; battle background
        stx     $ecb8
        lda     #$ff        ; disable nmi
        sta     $46
        stz     $e9ef       ; start battle time
        jsr     _c10fe0
        lda     $2f44       ; invisible monsters
        eor     #$ff
        sta     $e9e6       ; visible monsters
        jsr     _c10fb6
        jsr     _c10df3
        jsr     _c10e67
        jsr     InitCharMenuOrder
        lda     #$ff
        sta     $60ab
        sta     $55
        lda     #$51
        sta     $57
        inc
        sta     $59
        clr_ax
@10a9:  lda     #$c8
        sta     $04cc,x
        lda     #$97
        sta     $04cd,x
        clr_a
        sta     $04ce,x
        sta     $04cf,x
        inx4
        cpx     #$0024
        bne     @10a9
        lda     #$80
        sta     $051c
        lda     #$aa
        sta     $051d
        sta     $051e
        stz     $051f
        ldx     #$6800      ; clear menu bg1 tile data
        ldy     #$0800
        jsr     InitMenuTiles
        ldx     #$7000      ; clear menu bg2 tile data
        ldy     #$0800
        jsr     InitMenuTiles
        ldx     #$0c00      ; clear battlefield bg1 tile data
        ldy     #$0400
        jsr     InitBGTiles
        ldx     #$5400      ; clear battlefield bg3 tile data
        ldy     #$0400
        jsr     InitBG3Tiles
        ldx     #$7800      ; clear menu bg3 tile data
        ldy     #$0800
        jsr     InitBG3Tiles
        jsr     _c16d0c       ;
        clr_ax
@1105:  lda     f:CondemnNumGfxPtrs,x
        sta     $e9d2,x
        inx
        cpx     #8
        bne     @1105
        jsr     LoadBattleBG
        jsr     InitMonsterGfx
        jsr     LoadMonsterPal
        jsr     _c13e72       ; init monster sprite data
        jsr     InitMonsterPos
        jsr     TfrMonsterGfx
        jsr     LoadMenuGfx
        jsr     InitMenuWindows
        jsr     _c10f17
        jsr     InitHDMA
        jsr     _c16b47
        jsr     _c1496b
        jsr     _c1468f
        jsr     InitMenuText
        jsr     _c14759
        inc     $7bbb
        jsr     InitCharGfx
        jsr     LoadStatusPal
        jsr     _c1b517       ; init cursor sprites
        ldx     #.loword(StatusGfx)
        stx     $f3
        lda     #^StatusGfx
        sta     $f5
        ldx     #$a400
        stx     $f6
        lda     #$7f
        sta     $f8
        jsl     Decompress_ext
        ldx     #$0400
        stx     $36
        ldx     #$b800
        lda     #$7f
        ldy     #$2e00
        jsr     TfrVRAM
        ldx     #$0080
        stx     $36
        ldx     #$5fad
        lda     #$7e
        ldy     #$4000
        jsr     TfrVRAM
        clr_ax
@1183:  lda     $7a1f,x
        sta     $7a47,x
        inx
        cpx     #$0028
        bne     @1183
        lda     #$09
        sta     $896f
        lda     #$09
        sta     $8973
        lda     #$02
        sta     $8977
        stz     $8970
        stz     $8974
        stz     $8978
        lda     #$0c
        sta     $8971
        lda     #$61
        sta     $8972
        lda     #$54
        sta     $897b
        sta     $897c
        lda     #$69
        sta     $8975
        lda     #$6c
        sta     $8979
        lda     #$71
        sta     $8976
        sta     $897a
        lda     #$79
        sta     $897f
        sta     $8980
        sta     $8984
        lda     #$40
        sta     $8983
        lda     #$10
        sta     $897d
        sta     $607d
        lda     #$55
        sta     $897e
        lda     #$17
        sta     $898d
        sta     $8991
        stz     $8989
        stz     $898a
        stz     $898e
        stz     $8992
        lda     #$22
        sta     $8981
        sta     $8985
        lda     #$55
        sta     $8982
        sta     $8986
        clr_ax
        longa
        lda     #$ff97
@1213:  sta     $ea32,x
        inx2
        cpx     #$01c0
        bne     @1213
        shorta0
        lda     #$80
        sta     $e9f9
        clr_ax
@1227:  lda     #$08
        sta     $9a1f,x
        stz     $9a21,x
        lda     #$f7
        sta     $9a20,x
        sta     $9a22,x
        inx4
        cpx     #$025c
        bne     @1227
@1240:  stz     $9a1f,x
        stz     $9a21,x
        lda     #$f7
        sta     $9a20,x
        sta     $9a22,x
        inx4
        cpx     #$0400
        bne     @1240
        longa
        phb
        lda     #$025f
        ldx     #$9a1f
        ldy     #$9f1f
        mvn     #$7e,#$7e
        plb
        shorta0
        clr_ax
        lda     #$e0
@126e:  sta     $8996,x
        inx4
        cpx     #$025c
        bne     @126e
        clr_ax
        lda     #$e0
        sta     $10
        stz     $1a
@1282:  lda     #$02
        sta     $8bf0,x
        lda     #$82
        sta     $8bf1,x
        lda     $10
        sta     $8bf2,x
        inc     $1a
        lda     $1a
        cmp     #$03
        bne     @12a3
        stz     $1a
        lda     $10
        cmp     #$ff
        beq     @12a3
        inc     $10
@12a3:  inx4
        cpx     #$0120
        bne     @1282
        clr_axy
@12af:  lda     $8bf6,x
        sta     $eb63,y
        lda     #$82
        sta     $eb62,y
        inx4
        iny2
        cpy     #$0090
        bne     @12af
        ldx     #$ffff
        stx     $4001
        stx     $4003
        clr_ax
        dec
@12d1:  sta     $602d,x
        inx
        cpx     #$0040      ; should be #$0050 *** bug ***
        bne     @12d1
        clr_ax
        dec
        sta     $7bad
@12e0:  sta     $2bae,x
        inx
        cpx     #$0020
        bne     @12e0
        clr_ax
        stx     $2f30
        stx     $2f32
        jsr     InitSineBuf
        jsr     ClearBG1TileBuf
        ldx     #$04c0
        stx     $36
        ldx     #$a97f
        lda     #$7e
        ldy     #$0c00
        jsr     TfrVRAM
        lda     #$4c
        sta     $e9f7
        stz     $e9f8
        lda     #$01
        sta     $e9f6
        ldx     #$21ff
        stx     $6290
        stx     $6292
        stx     $6294
        stx     $6296
        stx     $6298
        jsr     _c10f8f       ; check if characters can change equipment
        jsr     UpdateDrawOrder
        jsr     _c10659
        jsl     _c2b652
        ldx     $11e0
        cpx     #$01d7
        bne     @1346
        inc     $6282
        stz     $e9e6
        stz     $201e
        bra     @136a
@1346:  cpx     #$01e5
        bne     @136a       ; branch if not battle $01e5 (terra vs. soldiers)
        ldx     #$0000
        stx     $18
        ldx     #$0200
        stx     $1a
        jsl     _c2b442
        inc     $628a       ; enable flashback mode
        clr_ax
@135e:  lda     $7f80,x     ; copy unaltered character palettes
        sta     $81ad,x
        inx
        cpx     #$0080
        bne     @135e
@136a:  lda     #$01
        sta     $7b0d       ; 1 thread to update
        sta     $7b0e       ; 1 monster thread
        sta     $7b0f       ; 1 character thread
        stz     $7b67
        stz     $7b6b
        lda     #$17
        sta     f:hTM
        sta     f:hTMW
        stz     $46         ; enable nmi
        inc     $6197
        jsl     _c19124
        longa
        jsl     UpdateBattleBG
        shorta0
        lda     $201e
        pha
        stz     $201e
@139e:  lda     f:hRDNMI
        bpl     @139e
@13a4:  lda     f:hRDNMI
        bpl     @13a4
        lda     #$81
        sta     f:hNMITIMEN
        cli
        inc     $628c
        inc     $e9ef       ; stop battle time
        clr_ax
@13b9:  lda     f:EntryGfxScript,x      ; copy char/monster entry script
        sta     $2d6e,x
        inx
        cpx     #$0009
        bne     @13b9
        pla
        sta     $2d71       ; monsters shown (flags)
        lda     $61ab
        pha
        stz     $61ab
        lda     $2f48       ; monster entrance type
        and     #$0f
        sta     $2d6f
        tax
        lda     f:CharEntryFirstTbl,x
        beq     @13fc       ; branch if monsters enter before characters
        ldx     $2d6e       ; swap battle script commands
        phx
        ldx     $2d70
        phx
        ldx     $2d72
        stx     $2d6e
        ldx     $2d74
        stx     $2d70
        plx
        stx     $2d74
        plx
        stx     $2d72
@13fc:  jsl     BtlGfx_04
        pla
        sta     $61ab
@1404:  jsr     WaitFrame
        lda     $e9f6
        bne     @1404
        clr_ax
        stx     $10
        jsr     SetColorMathHDMA
        inc     $7b96
        stz     $e9ef       ; start battle time
        stz     $628c
        stz     $ec0f       ; enable pause
        rts

; ------------------------------------------------------------------------------

; set if characters enter before monsters (1 byte per monster entrance type)
CharEntryFirstTbl:
@1420:  .byte   0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0

; battle script commands (monster entrance and character entrance)
EntryGfxScript:
@1431:  .byte   $13,$00,$00,$00         ; monster entry
        .byte   $0f,$00,$00,$00         ; battle event 0
        .byte   $ff

; battle type jump table for monster positions
CalcMonsterPosTbl:
@143a:  .addr   CalcMonsterPos_00
        .addr   CalcMonsterPos_01
        .addr   CalcMonsterPos_02
        .addr   CalcMonsterPos_03

; ------------------------------------------------------------------------------

; [ ??? ]

_c11442:
key_group_clr:
@1442:  clr_ax
        dec
@1445:  sta     $7a86,x     ;
        inx
        cpx     #24
        bne     @1445
        clr_ax
@1450:  stz     $807b,x     ;
        inx
        cpx     #12
        bne     @1450
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1145a:
set_mon_gr0:
@145a:  clr_ax
@145c:  txa
        sta     $7a86,x
        inx
        cpx     #6
        bne     @145c
        rts

; ------------------------------------------------------------------------------

; [  ]

_c11467:
@1467:  clr_ax
@1469:  txa
        sta     $7a92,x
        inx
        cpx     #$0006
        bne     @1469
        rts

; ------------------------------------------------------------------------------

; [  ]

_c11474:
set_play_gr1:
@1474:  clr_ax
@1476:  txa
        sta     $7a8c,x
        inx
        cpx     #$0004
        bne     @1476
        rts

; ------------------------------------------------------------------------------

; 0: normal

CalcMonsterPos_00:
@1481:  jsr     _c1145a
        jsr     _c11474
        clr_ax
@1489:  lda     $812f,x     ; monster width
        asl3
        sta     $807b,x
        inx2
        cpx     #$000c
        bne     @1489
        rts

; ------------------------------------------------------------------------------

; 1: back

CalcMonsterPos_01:
@149a:  jsr     _c11467
        jsr     _c11474
        clr_ax
        lda     #$20
@14a4:  sta     $809f,x
        inx2
        cpx     #$0008
        bne     @14a4
        clr_ax
@14b0:  lda     $812f,x     ; monster width
        asl3
        sta     $10
        lda     $80c3,x     ; negate x position
        eor     #$ff
        inc
        sec
        sbc     $10         ; subtract width
        sta     $80c3,x
        lda     $80f3,x     ; face left
        eor     $617e,x
        eor     #$01
        sta     $80f3,x
        inx2
        cpx     #$000c
        bne     @14b0
        rts

; ------------------------------------------------------------------------------

; 2: pincer

CalcMonsterPos_02:
@14d7:  jsr     _c11474
        clr_ax
        stz     $10
        stz     $12
        stz     $16
@14e2:  lda     $812f,x     ; monster width
        asl3
        sta     $14
        lda     $80c3,x     ; x position
        clc
        adc     $14
        cmp     #$68
        bcc     @151a       ; branch if on left side of screen
        lda     $80c3,x
        sec
        sbc     #$40
        clc
        adc     $14
        eor     #$ff
        inc
        sta     $80c3,x
        lda     $80f3,x
        eor     $617e,x
        eor     #$01
        sta     $80f3,x
        lda     $12
        tay
        lda     $16
        sta     $7a92,y                 ; monsters on the right
        inc     $12
        bra     @1529
@151a:  lda     $14
        sta     $807b,x
        lda     $10
        tay
        lda     $16
        sta     $7a86,y                 ; monsters on the left
        inc     $10
@1529:  inc     $16
        inx2
        cpx     #12
        bne     @14e2
        rts

; ------------------------------------------------------------------------------

; 3: side

CalcMonsterPos_03:
@1533:  jsr     _c11467
        clr_a
        sta     $7a98
        inc
        sta     $7a99
        inc
        sta     $7a8c
        inc
        sta     $7a8d
        lda     #$20
        sta     $80a3
        sta     $80a5
        clr_ax
@1550:  lda     $812f,x     ; monster width
        asl3
        sta     $12
        lsr
        sta     $10
        lda     $80c3,x     ; x position
        clc
        adc     #$30
        sta     $80c3,x
        clc
        adc     $10
        bmi     @1576       ; branch if center x-coordinate of monster is greater than $7f
        lda     $80f3,x     ; flip monster horizontally
        eor     $617e,x
        eor     #$01
        sta     $80f3,x
        bra     @157b
@1576:  lda     $12
        sta     $807b,x
@157b:  inx2
        cpx     #$000c
        bne     @1550
        rts

; ------------------------------------------------------------------------------

; y-offsets for monster vertical alignment
;   0: ceiling (unused)
;   1: ground
;   2: buried
;   3: floating
;   4: flying

MonsterAlignOffset:
@1583:  .byte   $60,$00,$f8,$08,$d8

; ------------------------------------------------------------------------------

; [ init monster positions ]

InitMonsterPos:
@1588:  jsr     _c11442
        stz     $7b79
        stz     $7b7a
        stz     $7b7b
        stz     $7b7c
        clr_ax
@1599:  stz     $80f3,x
        inx
        cpx     #$000c
        bne     @1599
        lda     $201f       ; battle type
        asl
        tax
        jsr     CalcMonsterPos
        jsr     _c11607
        lda     $7b79
        sta     $2eac
        lda     $7b7b
        sta     $2ead
        ldx     $11e0
        cpx     #$023f      ; battle $023f (colosseum)
        bne     @1603
        lda     $812f       ; width
        asl3
        sta     $10
        lda     $8130       ; height
        asl3
        sta     $12
        lda     #$80
        sec
        sbc     $12
        tax
        stx     $80cf       ; top y position
        lda     $2001       ; monster index
        tax
        lda     f:MonsterAlign,x   ; monster vertical alignment
        bne     @15e9
        stz     $80cf       ; align with top of screen (ceiling)
        bra     @15f6
@15e9:  dec
        tax
        lda     $80cf
        clc
        adc     f:MonsterAlignOffset+1,x
        sta     $80cf       ; top y position
@15f6:  lda     #$80
        sec
        sbc     $10
        lsr
        clc
        adc     #$18
        tax
        stx     $80c3       ; left x position
@1603:  rts

; ------------------------------------------------------------------------------

; [ init monster positions for each battle type ]

CalcMonsterPos:
@1604:  jmp     (.loword(CalcMonsterPosTbl),x)   ; jump based on battle type

; ------------------------------------------------------------------------------

; [ init groups of targets on both sides of the screen ??? ]

_c11607:
set_group_init:
@1607:  clr_ax
        dec
@160a:  sta     $7a9e,x
        inx
        cpx     #$0030
        bne     @160a
        clr_ax
        sta     $10
        lda     #$03
        sta     $12
@161b:  lda     $10
        sta     $7ab6,x
        sta     $7ac2,x
        lda     $12
        sta     $7abc,x
        sta     $7ac8,x
        inc     $10
        dec     $12
        inx
        cpx     #$0004
        bne     @161b
        clr_axy
        longa
@163a:  lda     $80c3,x
        sta     $7ad0,y
        inx2
        iny4
        cpx     #$000c
        bne     @163a
        shorta0
        jsr     _c11752
        clr_axy
@1654:  lda     $7ad2,x
        sta     $7a9e,y
        iny
        inx4
        cpy     #$0006
        bne     @1654
        clr_axy
        longa
@1669:  lda     $812f,x
        and     #$00ff
        asl3
        clc
        adc     $80c3,x
        sta     $7ad0,y
        inx2
        iny4
        cpx     #$000c
        bne     @1669
        shorta0
        jsr     _c11752
        clr_ax
        ldy     #$0005
@168f:  lda     $7ad2,x
        sta     $7aa4,y
        dey
        inx4
        cpx     #$0018
        bne     @168f
        clr_axy
        longa
@16a4:  lda     $80cf,x
        sta     $7ad0,y
        inx2
        iny4
        cpx     #$000c
        bne     @16a4
        shorta0
        jsr     _c11752
        clr_axy
@16be:  lda     $7ad2,x
        sta     $7aaa,y
        iny
        inx4
        cpy     #$0006
        bne     @16be
        clr_axy
        longa
@16d3:  lda     $8130,x
        and     #$00ff
        asl3
        clc
        adc     $80cf,x
        sta     $7ad0,y
        inx2
        iny4
        cpx     #$000c
        bne     @16d3
        shorta0
        jsr     _c11752
        clr_ax
        ldy     #$0005
@16f9:  lda     $7ad2,x
        sta     $7ab0,y
        dey
        inx4
        cpx     #$0018
        bne     @16f9
        clr_ay
@170b:  lda     $7a86,y
        bmi     @171b
        tax
        lda     f:MonsterMaskTbl,x
        ora     $7b79
        sta     $7b79
@171b:  lda     $7a8c,y
        bmi     @172b
        tax
        lda     f:MonsterMaskTbl,x
        ora     $7b7a
        sta     $7b7a
@172b:  lda     $7a92,y
        bmi     @173b
        tax
        lda     f:MonsterMaskTbl,x
        ora     $7b7b
        sta     $7b7b
@173b:  lda     $7a98,y
        bmi     @174b
        tax
        lda     f:MonsterMaskTbl,x
        ora     $7b7c
        sta     $7b7c
@174b:  iny
        cpy     #$0006
        bne     @170b
        rts

; ------------------------------------------------------------------------------

; [  ]

_c11752:
@1752:  longa
        clr_ax
        stz     $10
@1758:  lda     $10
        sta     $7ad2,x
        inc     $10
        inx4
        cpx     #$0018
        bne     @1758
@1768:  clr_ax
        stz     $14
@176c:  lda     $7ad0,x
        cmp     $7ad4,x
        beq     @1794
        bcc     @1794
        inc     $14
        lda     $7ad4,x
        pha
        lda     $7ad0,x
        sta     $7ad4,x
        pla
        sta     $7ad0,x
        lda     $7ad6,x
        pha
        lda     $7ad2,x
        sta     $7ad6,x
        pla
        sta     $7ad2,x
@1794:  inx4
        cpx     #$0014
        bne     @176c
        lda     $14
        bne     @1768
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ clear bg data in vram ]

; +X: destination (vram)
; +Y: size (words)

InitBG3Tiles:
@17a5:  phb
        lda     #$00
        pha
        plb
        stx     hVMADDL
        longa
        lda     #$01ee      ; tile $01ee
@17b2:  sta     hVMDATAL
        dey
        bne     @17b2
        shorta0
        plb
        rts

; ------------------------------------------------------------------------------

; [ play error sound effect ]

ErrorSfx:
sound_beep_set:
@17bd:  lda     #$22
        sta     f:hAPUIO0
        stz     $95
        rts

; ------------------------------------------------------------------------------

; [ play cursor sound effect (move/cancel) ]

MoveSfx:
sound_key_set:
@17c6:  lda     #$21
        sta     f:hAPUIO0
        stz     $94
        rts

; ------------------------------------------------------------------------------

; [ play cursor sound effect (select) ]

ConfirmSfx:
sound_key_a_set:
@17cf:  lda     #$20
        sta     f:hAPUIO0
        stz     $96
        rts

; ------------------------------------------------------------------------------

; [ play character active sound effect ]

PlayerSfx:
sound_window_set:
@17d8:  lda     $62ca       ; active character
        and     #$03
        tax
        lda     $6198,x     ; player controlling this character
        clc
        adc     #$28        ; sound effect $28 for player 1, $29 for player 2
        sta     f:hAPUIO0
        stz     $93
        rts

; ------------------------------------------------------------------------------

; [ play animation sound effect (long access) ]

PlayAnimSfx_far:
@17eb:  jsr     PlayAnimSfx
        rtl

; ------------------------------------------------------------------------------

; [ play animation sound effect ]

;   A: sound effect number
; $10: pan value

PlayAnimSfx:
@17ef:  sta     $e9e9       ; sound effect number
        lda     $10
        sta     $e9ea       ; pan value
        lda     #$18
        sta     $e9e8       ; spc command $18
        inc     $e9ec       ; enable animation sound effect
        rts

; ------------------------------------------------------------------------------

; [ update sound effects ]

UpdateSfx:
nmi_effect_set:
@1800:  lda     $e9ed       ; return if all sound effects are disabled
        bne     @185a
        lda     $e9ec       ; branch if animation sound effect is not enabled
        beq     @1823
        lda     $e9ea       ; play animation sound sound effect
        sta     f:hAPUIO2
        lda     $e9e9
        sta     f:hAPUIO1
        lda     $e9e8
        sta     f:hAPUIO0
        stz     $e9ec       ; disable animation sound effect
        rts
@1823:  lda     $6281       ; do spc command $2c (ching sound effect ???)
        beq     @1832
        lda     #$2c
        sta     f:hAPUIO0
        stz     $6281
        rts
@1832:  lda     $93         ; character active sound effect
        jne     PlayerSfx
        lda     $94         ; cursor sound effect (move/cancel)
        jne     MoveSfx
        lda     $95         ; error sound effect
        jne     ErrorSfx
        lda     $96         ; cursor sound effect (select)
        jne     ConfirmSfx
        lda     $97         ; go to next part of song (dancing mad)
        beq     @185a
        lda     #$89
        sta     f:hAPUIO0
        stz     $97
@185a:  rts

; ------------------------------------------------------------------------------

; [ update random number ]

Rand:
@185b:  phx
        lda     $72
        tax
        inc     $72
        lda     f:RNGTbl,x
        plx
        rts

; ------------------------------------------------------------------------------

; [ ++$30 = +$2e * $2c ]

; same as Mult816, but meant to be used during NMI

Mult816NoHW:
@1867:  stz     $30
        stz     $32
        stz     $34
        ldx     #8
@1870:  lsr     $2c
        bcc     @1881
        lda     $30
        clc
        adc     $2e
        sta     $30
        lda     $32
        adc     $34
        sta     $32
@1881:  asl     $2e
        rol     $34
        dex
        bne     @1870
        rts

; ------------------------------------------------------------------------------

; [ +++$30 = +$2e * +$2c ]

; unused, same effect as Mult16 but without using hardware registers

Mult16NoHW:
@1889:  longa
        stz     $30
        stz     $32
        stz     $34
        ldx     #16
@1894:  lsr     $2c
        bcc     @18a5
        lda     $30
        clc
        adc     $2e
        sta     $30
        lda     $32
        adc     $34
        sta     $32
@18a5:  asl     $2e
        rol     $34
        dex
        bne     @1894
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ +$30 = $2e * $2c ]

; same effect as Mult8, but without using hardware registers

Mult8NoHW:
@18b0:  ldx     $00
        stx     $30
        ldx     #8
@18b7:  ror     $2e
        bcc     @18c2
        lda     $2c
        clc
        adc     $31
        sta     $31
@18c2:  ror     $31
        ror     $30
        dex
        bne     @18b7
        rts

; ------------------------------------------------------------------------------

; [ +$4216 = A * B ]

MultAB:
@18ca:  sta     f:hWRMPYA
        xba
        sta     f:hWRMPYB
        clr_a
        rts

; ------------------------------------------------------------------------------

; [ +$26 = $22 * $24 (long access) ]

Mult8_far:
@18d5:  jsr     Mult8
        rtl

; ------------------------------------------------------------------------------

; [ +$26 = $22 * $24 ]

Mult8:
@18d9:  lda     $22
        sta     f:hWRMPYA
        lda     $24
        sta     f:hWRMPYB
        longa
        longa
        nop
        lda     f:hRDMPYL
        sta     $26         ; +$26 = $22 * $24
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ ++$26 = $22 * +$24 ]

Mult816:
@18f4:  stz     $26
        stz     $28
        stz     $2a
        ldx     #8
@18fd:  lsr     $22
        bcc     @190e
        lda     $26
        clc
        adc     $24
        sta     $26
        lda     $28
        adc     $2a
        sta     $28
@190e:  asl     $24
        rol     $2a
        dex
        bne     @18fd
        rts

; ------------------------------------------------------------------------------

; [ clear bg tile data in vram ]

; +X: destination (vram)
; +Y: size (words)

InitMenuTiles:
@1916:  phx
        ldx     #$00ee      ; tile $00ee
        stx     $10
        plx
        bra     _192f

InitBGTiles:
@191f:  phx
        ldx     #$02ee      ; tile $02ee
        stx     $10
        plx
        bra     _192f

; unused
_c11928:
@1928:  phx
        ldx     #$01ee      ; tile $01ee
        stx     $10
        plx

_192f:  phb
        lda     #$00
        pha
        plb
        stx     hVMADDL
        longa
        lda     $10
@193b:  sta     hVMDATAL
        dey
        bne     @193b
        shorta0
        plb
        rts

; ------------------------------------------------------------------------------

; [ clear vram ]

; +Y: address
; +X: size (words)

ClearVRAM:
@1946:  phb
        lda     #$00
        pha
        plb
        sty     hVMADDL
        stx     $4375
        ldx     #.loword(@Zero)
        stx     $4372
        lda     #$09        ; fixed address, 2 bytes lh
        sta     $4370
        lda     #<hVMDATAL
        sta     $4371       ; dma destination = $2118
        lda     #^@Zero
        sta     $4374
        lda     #$80
        sta     hMDMAEN
        plb
        rts

; zero word for clearing vram
@Zero:
@196d:  .word   0

; ------------------------------------------------------------------------------

; [ large data dma to vram (partial) ]

PartialTfrVRAM:
@196f:  lda     $8000       ; branch if large data transfer is disabled
        beq     @1988
        ldx     $8006       ; set size
        stx     $36
        ldx     $8001
        ldy     $8004
        lda     $8003
        jsr     TfrVRAM
        stz     $8000
@1988:  rts

; ------------------------------------------------------------------------------

; [ init large data dma to vram (long access) ]

WaitTfrVRAM_far:
@1989:  jsr     WaitTfrVRAM
        rtl

; ------------------------------------------------------------------------------

; [ init large data dma to vram (> 1kb) ]

;    A: source bank
;   +X: source address
;   +Y: destination address (vram)
; +$10: total size (data gets transferred in chunks, 1kb per frame)

WaitTfrVRAM:
@198d:  phx
        phy
        pha
        ldx     $10
        phx
@1993:  lda     $8000       ; branch if large data dma is not in use
        beq     @199d
        jsr     WaitFrame
        bra     @1993       ; loop
@199d:  plx
        stx     $8008       ; set dma size
        pla
        sta     $8003       ; set source bank
        ply
        sty     $8004       ; set destination address
        plx
        stx     $8001       ; set source address
        stz     $800a       ; last chunk
@19b0:  longa
        lda     $8008       ; branch if size is <= $0400 (1kb)
        cmp     #$0400
        beq     @19c4
        bcc     @19c4
        lda     #$0400      ; partial size $0400
        sta     $8006
        bra     @19ca
@19c4:  sta     $8006       ; transfer full size
        inc     $800a       ; not last chunk
@19ca:  shorta0
        inc     $8000       ; enable dma
@19d0:  jsr     WaitFrame
        lda     $8000       ; loop if dma is still enabled
        bne     @19d0
        longa
        lda     $8001       ; add $0400 to source address
        clc
        adc     #$0400
        sta     $8001
        lda     $8004       ; add $0200 to destination address
        clc
        adc     #$0200
        sta     $8004
        lda     $8008       ; subtract $0400 from size
        sec
        sbc     #$0400
        sta     $8008
        shorta0
        lda     $800a       ; loop if not last chunk
        beq     @19b0
        rts

; ------------------------------------------------------------------------------

; bit masks
BitOrTbl:
@1a01:  .byte   $01,$02,$04,$08,$10,$20,$40,$80

; ------------------------------------------------------------------------------

; [ get bit mask ]

; A = 1 << A (out)

GetBitMask:
@1a09:  tax
        lda     f:BitOrTbl,x
        rts

; ------------------------------------------------------------------------------

; [ get bit number ]

; returns the number of the first bit set in a (0 if no bits are set)

_c11a0f:
bit_num_chg:
@1a0f:  ldx     $00
@1a11:  lsr
        bcs     @1a1c
        inx
        cpx     #8
        bne     @1a11
        clr_a
        rts
@1a1c:  txa
        and     #$07
        rts

; ------------------------------------------------------------------------------

; [ wait for vblank (unused) ]

@1a20:  jsr     WaitVblank
        rts

; ------------------------------------------------------------------------------

; [ wait for vblank ]

WaitVblank:
@1a24:  inc     $47         ; increment vblank flag
@1a26:  lda     $47
        bne     @1a26       ; brach if not clear
        rts

; ------------------------------------------------------------------------------

; [ copy data to vram (during NMI, for small data) ]

;   +Y: destination address (vram)
;   +X: source address
;    A: source bank
; +$36: size

TfrVRAM:
@1a2b:  phb
        pha
        lda     #$00
        pha
        plb
        pla
        sty     hVMADDL
        stx     $4372
        sta     $4374
        lda     #$01
        sta     $4370
        lda     #$18
        sta     $4371
        ldx     $36
        stx     $4375
        lda     #$80
        sta     hMDMAEN
        plb
        rts

; ------------------------------------------------------------------------------

; [ copy animation bg tile data to vram ]

;   +X: source address
;    A: source bank
; +$36: vram destination address

_c11a51:
@1a51:  phb
        pha
        lda     #$00
        pha
        plb
        pla
        stx     $4372
        sta     $4374
        lda     #$01
        sta     $4370
        lda     #$18
        sta     $4371
        longa
        shorti
        ldy     #$20        ; 32 bytes per dma
        ldx     #$80
        lda     #$0010      ; dma 16 times
        sta     $38
        lda     $36
@1a77:  sta     hVMADDL
        sty     $4375
        stx     hMDMAEN
        clc
        adc     #$0020
        dec     $38
        bne     @1a77
        shorta0
        longi
        plb
        rts

; ------------------------------------------------------------------------------

; [ clear leading zeroes (4 digit number) ]

TrimZeroes4:
@1a8f:  ldx     $00
@1a91:  lda     $69,x
        sec
        sbc     $68
        bne     @1aa2
        lda     #$ff
        sta     $69,x
        inx
        cpx     #$0003
        bne     @1a91
@1aa2:  rts

; ------------------------------------------------------------------------------

; hex->dec conversion constants
HexToDecTbl:
@1aa3:  .dword  10000000,1000000,100000,10000,1000,100,10

; ------------------------------------------------------------------------------

; [ convert variable to decimal ]

HexToDec8:
@1abf:  clr_ax
@1ac1:  sta     $69,x
        inx
        cpx     #8
        bne     @1ac1
        ldx     #0
@1acc:  phx
        txa
        asl2
        tax
        lda     f:HexToDecTbl,x
        sta     $14
        lda     f:HexToDecTbl+1,x
        sta     $15
        lda     f:HexToDecTbl+2,x
        sta     $16
        jsr     _c11afc       ;
        plx
        lda     $18
        clc
        adc     $68
        sta     $69,x
        inx
        cpx     #7
        bne     @1acc
        lda     $10
        clc
        adc     $68
        sta     $70
        rts

; ------------------------------------------------------------------------------

; [  ]

_c11afc:
one_sub:
@1afc:  stz     $18
@1afe:  lda     $10
        sec
        sbc     $14
        sta     $10
        lda     $11
        sbc     $15
        sta     $11
        lda     $12
        sbc     $16
        sta     $12
        inc     $18
        bcs     @1afe
        dec     $18
        lda     $10
        clc
        adc     $14
        sta     $10
        lda     $11
        adc     $15
        sta     $11
        lda     $12
        adc     $16
        sta     $12
        rts

; ------------------------------------------------------------------------------

; [ convert hex to decimal ]

;  +X: hex value to convert
; $68: fixed value to add to each digit

HexToDec:
@1b2b:  longa
        stz     $22
        stz     $24
        stz     $26
        stz     $28
        txa
@1b36:  sec
        sbc     #1000
        bcc     @1b41
        inc     $22         ; +$22 = thousands digit
        jmp     @1b36
@1b41:  clc
        adc     #1000
@1b45:  sec
        sbc     #100
        bcc     @1b50
        inc     $24         ; +$24 = hundreds digit
        jmp     @1b45
@1b50:  clc
        adc     #100
@1b54:  sec
        sbc     #10
        bcc     @1b5f
        inc     $26         ; +$26 = tens digit
        jmp     @1b54
@1b5f:  clc
        adc     #10
        sta     $28         ; +$28 = ones digit
        shorta0
        lda     $22
        clc
        adc     $68
        sta     $69
        lda     $24
        clc
        adc     $68
        sta     $6a
        lda     $26
        clc
        adc     $68
        sta     $6b
        lda     $28
        clc
        adc     $68
        sta     $6c
        rts

; ------------------------------------------------------------------------------

; [ update controller ]

UpdateCtrl:
@1b85:  phb
        clr_a
        pha
        plb
        lda     $7e62ca     ; active character
        and     #$03
        sta     f:$000201
        jsl     UpdateCtrlBattle_ext
        plb
        ldx     $04         ; swap buttons pressed and buttons in repeat mode
        phx
        ldx     $0a
        stx     $04
        plx
        stx     $0a
        stx     $6268
        longa
        lda     $6266       ; buttons pressed last frame
        eor     #$ffff      ; invert
        and     $6268       ; new buttons
        and     #$f0f0      ; mask direction buttons
        sta     $6268
        txa
        and     #$0f0f
        ora     $6268
        sta     $6268
        stx     $6266
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ update circle ]

UpdateCircle_near:
@1bc7:  jsl     UpdateCircle_far
        rts

; ------------------------------------------------------------------------------

; [ update triangle ]

UpdateTriangle_near:
@1bcc:  jsl     UpdateTriangle_far
        rts

; ------------------------------------------------------------------------------

; [ change battle bg (final battle) ]

_c11bd1:
last_land_chg:
@1bd1:  stz     $e9df
        stz     $e9de
        inc     $e9de
        bra     _1be2

; ------------------------------------------------------------------------------

; [ change battle bg (dance) ]

_c11bdc:
wait_land_chg:
@1bdc:  stz     $e9df

_c11bdf:
wait_land_chg2:
@1bdf:  stz     $e9de

wait_land_chg_main:
_1be2:  stz     $e9dc
        inc     $e9dc
        stz     $e9dd
        cmp     #$ff
        jeq     @1c77
        sta     $22
        lda     #$06
        sta     $24
        jsr     Mult8
        ldx     $26
        ldy     #$1000
        jsr     TfrBattleBGGfx
        inx
        ldy     #$1800
        jsr     TfrBattleBGGfx
        inx
        inc     $e9dd
        ldy     #$4800
        jsr     TfrBattleBGGfx
        inx
        ldy     #$6000
        jsr     TfrBattleBGTiles
        inx
        lda     $e9df
        bne     @1c2c
        lda     $e9de
        bne     @1c2c
        ldy     #$6400
        jsr     TfrBattleBGTiles
@1c2c:  inx
        lda     f:BattleBGProp,x
        and     #$80
        sta     $6283       ; wavy battle bg (desert)
        lda     f:BattleBGProp,x   ; battle bg palette index
        and     #$7f
        longa
        asl5
        sta     $22
        asl
        clc
        adc     $22
        tax
        shorta0
        tay
        lda     $e9de
        beq     @1c66
@1c53:  lda     f:BattleBGPal,x
        sta     $7e60,y
        sta     $7c60,y
        inx
        iny
        cpy     #$0040
        bne     @1c53
        bra     @1c77
@1c66:  lda     f:BattleBGPal,x
        sta     $7ea0,y
        sta     $7ca0,y
        inx
        iny
        cpy     #$0060
        bne     @1c66
@1c77:  jsr     _c103e2
        rts

; ------------------------------------------------------------------------------

; [ copy battle bg tile data to vram ]

; +X: pointer to battle bg data
; +Y: destination address (vram)

TfrBattleBGTiles:
@1c7b:  phx
        phy
        lda     f:BattleBGProp,x   ; battle bg ($ff = none)
        cmp     #$ff
        beq     @1cf2
        asl
        tax
        lda     f:BattleBGTilesPtrs,x   ; pointer to battle bg tile data
        sta     $f3
        lda     f:BattleBGTilesPtrs+1,x
        sta     $f4
        lda     #^BattleBGTiles
        sta     $f5
        jsr     _c11e2f
        phy
        jsl     Decompress_ext
        ply
        lda     $e9de
        beq     @1cd1
        phb
        lda     #$7f
        pha
        plb
        clr_ax
@1cac:  lda     $c401,x
        inc2
        sec
        sbc     #$08
        sta     $c401,x
        inx2
        cpx     #$0800
        bne     @1cac
        plb
        ldx     #$04c0
        stx     $10
        lda     #$7f
        ldx     #$c400
        ldy     #$65a0
        jsr     WaitTfrVRAM
        bra     @1cf2
@1cd1:  lda     $e9dc
        bne     @1ce5
        ldx     #$0800
        stx     $36
        lda     #$7f
        ldx     #$c400
        jsr     TfrVRAM
        bra     @1cf2
@1ce5:  ldx     #$0800
        stx     $10
        lda     #$7f
        ldx     #$c400
        jsr     WaitTfrVRAM
@1cf2:  ply
        plx
        rts

; ------------------------------------------------------------------------------

; [ copy battle bg graphics to vram ]

; +X: pointer to battle bg data
; +Y: destination address (vram)

TfrBattleBGGfx:
@1cf5:  phx
        phy
        lda     f:BattleBGProp,x   ; battle bg
        cmp     #$ff
        jeq     @1dac
        phx
        and     #$7f
        sta     $f3
        asl
        clc
        adc     $f3
        tax
        lda     f:BattleBGGfxPtrs,x   ; pointer to battle bg graphics
        sta     $f3
        lda     f:BattleBGGfxPtrs+1,x
        sta     $f4
        lda     f:BattleBGGfxPtrs+2,x
        sta     $f5
        cmp     #^BattleBGGfx
        bcc     @1d24       ; branch if using map graphics (uncompressed)
        bra     @1d4c       ; branch if using battle bg graphics (compressed)
@1d24:  phy
        phb
        lda     #$7f
        pha
        plb
        longa
        clr_ay
@1d2e:  lda     [$f3],y
        sta     $c400,y
        iny2
        cpy     #$2000
        bne     @1d2e
        shorta0
        plb
        lda     #$7f
        sta     $e9f4
        ldx     #$c400
        stx     $e9f2
        ply
        bra     @1d60
@1d4c:  lda     #$7f
        sta     $e9f4
        ldx     #$c400
        stx     $e9f2
        jsr     _c11e2f
        phy
        jsl     Decompress_ext
        ply
@1d60:  plx
        lda     f:BattleBGProp,x
        bmi     @1d6c
        ldx     #$1000
        bra     @1d6f
@1d6c:  ldx     #$2000
@1d6f:  lda     $e9dd
        beq     @1d7f
        longa
        txa
        sec
        sbc     #$0020
        tax
        shorta0
@1d7f:  lda     $e9dc
        bne     @1d91
        stx     $36
        ldx     $e9f2
        lda     $e9f4
        jsr     TfrVRAM
        bra     @1dac
@1d91:  stx     $10
        lda     $e9de
        beq     @1da3
        longa
        tya
        clc
        adc     #$2000
        tay
        shorta0
@1da3:  ldx     $e9f2
        lda     $e9f4
        jsr     WaitTfrVRAM
@1dac:  ply
        plx
        rts

; ------------------------------------------------------------------------------

; [ load battle background ]

LoadBattleBG:
@1daf:  stz     $e9dc
        stz     $e9dd
        stz     $e9de
        lda     $ecb8       ; battle bg index
        sta     $22
        lda     #6
        sta     $24
        jsr     Mult8
        ldx     $26
        ldy     #$1000
        jsr     TfrBattleBGGfx
        inx
        ldy     #$1800
        jsr     TfrBattleBGGfx
        inx
        ldy     #$4800
        jsr     TfrBattleBGGfx
        inx
        ldy     #$6000
        jsr     TfrBattleBGTiles
        inx
        ldy     #$6400
        jsr     TfrBattleBGTiles
        inx
        lda     f:BattleBGProp,x   ; wavy background (desert)
        and     #$80
        sta     $6283
        lda     f:BattleBGProp,x   ; battle bg palette
        and     #$7f
        longa
        asl5
        sta     $22         ; multiply by 32, then by 3
        asl
        clc
        adc     $22
        tax
        shorta0
        tay
@1e0a:  lda     f:BattleBGPal,x   ; copy palette (48 colors)
        sta     $7ea0,y
        inx
        iny
        cpy     #$0060
        bne     @1e0a
        longa
        lda     #$57f0      ; clear last 16 bytes of battlefield bg3 tile data
        sta     f:hVMADDL
        ldx     #$0010
        clr_a
@1e25:  sta     f:hVMDATAL
        dex
        bne     @1e25
        shorta
        rts

; ------------------------------------------------------------------------------

; [  ]

_c11e2f:
set_tmp_buffer2_poi:
@1e2f:  lda     #$00        ; $7fc400 (bg1 animation tile data buffer)
        sta     $f6
        lda     #$c4
        sta     $f7
        lda     #$7f
        sta     $f8
        rts

; ------------------------------------------------------------------------------

; [ check bg1 monsters ]

; $24: bg1 monsters (out)

CheckBG1Monsters:
@1e3c:  clr_ax
        stz     $24
@1e40:  lda     $80f4,x     ; bg1 monster (from battle data)
        lsr
        ora     $24
        ror
        sta     $24
        inx2                ; next monster
        cpx     #$000c
        bne     @1e40
        lsr2
        sta     $24
        rts

; ------------------------------------------------------------------------------

; [ clear bg1 tile data in vram (long access) ]

ClearBG1Tiles_far:
@1e55:  jsr     ClearBG1Tiles
        rtl

; ------------------------------------------------------------------------------

; [ clear bg1 tile data in vram ]

ClearBG1Tiles:
@1e59:  jsr     ClearBG1TileBuf
        jmp     TfrBG1Tiles

; ------------------------------------------------------------------------------

; [ copy monsters to bg1 (long access) ]

MonstersToBG1_far:
@1e5f:  jsr     MonstersToBG1
        rtl

; ------------------------------------------------------------------------------

; [ copy monsters to bg1 ]

; A: monsters affected

MonstersToBG1:
@1e63:  pha
        jsr     _c10f00       ; clear bg1 vertical scroll hdma data (battlefield region)
        jsr     ClearBG1TileBuf
        pla

.if LANG_EN_REV1
; **** added in rev 1 ****
        bra     _1e6b

; ------------------------------------------------------------------------------

; [ copy bg1 monsters to bg1 ]

_c11e6d:
back_mon_set:
@1e6d:  jsr     _c10f00       ; clear bg1 vertical scroll hdma data (battlefield region)
        jsr     ClearBG1TileBuf
        jsr     CheckBG1Monsters
        lda     $24
        and     $6191
; ************************
.endif

target_mon_set2:
_1e6b:  and     $201e
        and     $61ab
        and     $e9e6
        sta     $24
        jmp     _c11e95       ; copy monster palettes & tile data to bg1

; ------------------------------------------------------------------------------

; [ copy bg1 monsters to bg1 ]

; has no effect

_c11e79:
.if !LANG_EN_REV1
; *** removed in rev 1 ***
@1e79:  jsr     _c10f00       ; clear bg1 vertical scroll hdma data (battlefield region)
        jsr     ClearBG1TileBuf
        jsr     CheckBG1Monsters
        lda     $24
        and     $201e       ; monsters shown
        and     $61ab       ; monsters shown
        and     $e9e6       ; monsters that are visible (no clear status)
        and     $6191       ;
        sta     $24
        jmp     _c11e95       ; copy monster palettes & tile data to bg1
; ************************
.endif

; ------------------------------------------------------------------------------

; [ copy monster palettes and tile data to bg1 ]

; $24: monsters affected

_c11e95:
mon_scr_set_main:
@1e95:  lda     $24
        sta     $22
        clr_ax
        stz     $10
@1e9d:  lsr     $22
        bcc     @1eca       ; branch if monster is not affected
        phx
        lda     $10
        sta     $80ff,x     ; monster palette copied to animation palette
        asl5
        tay
        lda     $80db,x     ; monster palette
        lsr
        asl5
        tax
        lda     #$20
        sta     $12
@1ebb:  lda     $7f00,x     ; copy monster palette to animation palette
        sta     $7e60,y
        inx
        iny
        dec     $12         ; next color
        bne     @1ebb
        inc     $10         ; next palette
        plx
@1eca:  inx2                ; next monster
        cpx     #$000c
        bne     @1e9d
        clr_ax
@1ed3:  lsr     $24
        bcc     @1f1a       ; branch if monster is not affected
        lda     $80c3,x     ; $14 = monster x position (in 8x8 tiles)
        lsr3
        sta     $14
        lda     $80cf,x     ; $16 = monster y position (in 8x8 tiles)
        lsr3
        sta     $16
        lda     $812f,x     ; $10 = monster width
        sta     $10
        lda     $8130,x     ; $12 = monster height
        sta     $12
        lda     $80ff,x     ; $22 = monster palette
        clc
        adc     #$03
        asl2
        sta     $22
        lda     $8100,x     ;
        ora     $22
        ora     #$03
        sta     $19         ; $19 = tile data
        lda     f:MonsterSpriteDataPtrs,x
        sta     $26
        lda     f:MonsterSpriteDataPtrs+1,x
        sta     $27
        ldy     #$0002
        lda     ($26),y     ; $18 = tile number
        sta     $18
        jsr     DrawBG1Monster
@1f1a:  inx2                ; next monster
        cpx     #$000c
        bne     @1ed3
        rts

; ------------------------------------------------------------------------------

; [ copy bg1 tile data to vram (long access) ]

TfrBG1Tiles_far:
@1f22:  jsr     TfrBG1Tiles
        rtl

; ------------------------------------------------------------------------------

; [ copy bg1 tile data to vram ]

TfrBG1Tiles:
@1f26:  ldx     #$04c0      ; size = $04c0
        stx     $10
        ldx     #$a97f      ; source = $7ea97f (bg tile data buffer)
        lda     #$7e
        ldy     #$0c00      ; destination = $0c00 (vram)
        jmp     WaitTfrVRAM

; ------------------------------------------------------------------------------

; [ calculate pointer to monster tile data buffer ]

; +$1a: pointer to bg1 tile data buffer (out)

GetBG1MonsterTilePtr:
@1f36:  phx
        lda     $10
        sta     $1e
        lda     $14
        clc
        adc     $10
        cmp     #$20
        bcc     @1f4b
        lda     #$20
        sec
        sbc     $14
        sta     $1e
@1f4b:  lda     $16
        clc
        adc     $12
        cmp     #$13
        bcc     @1f5b
        lda     #$13
        sec
        sbc     $16
        sta     $12
@1f5b:  stz     $11
        stz     $13
        stz     $15
        stz     $17
        stz     $1f
        stz     $21
        longa
        lda     $16
        asl6
        asl     $14
        clc
        adc     $14
        adc     #$a97f
        sta     $1a
        asl     $10
        asl     $1e
        shorta
        plx
        rts

; ------------------------------------------------------------------------------

; [ copy monster tile data to bg1 ]

DrawBG1Monster:
@1f83:  phx
        jsr     GetBG1MonsterTilePtr
        lda     $80f3,x
        eor     $617e,x
        and     #$01
        bne     @1fb9       ; branch if horizontally flipped

; not flipped
        longa
@1f93:  clr_ay
        lda     $18
@1f97:  sta     ($1a),y
        inc                 ; next tile
        iny2
        cpy     $1e
        bne     @1f97
        lda     $18         ; next row of tiles
        clc
        adc     #$0010
        sta     $18
        lda     $1a
        clc
        adc     #$0040
        sta     $1a
        dec     $12
        bne     @1f93
        shorta0
        plx
        rts

; horizontally flipped
@1fb9:  longa
        lda     $10         ; start at width - 1
        lsr
        dec
        clc
        adc     $18
        ora     #$4000      ; horizontal flip
        sta     $18
@1fc7:  clr_ay
        lda     $18
@1fcb:  sta     ($1a),y
        dec                 ; next tile (go left to right)
        iny2
        cpy     $1e
        bne     @1fcb
        lda     $18         ; next row of tiles
        clc
        adc     #$0010
        sta     $18
        lda     $1a
        clc
        adc     #$0040
        sta     $1a
        dec     $12
        bne     @1fc7
        shorta0
        plx
        rts

; ------------------------------------------------------------------------------

; [ clear bg tile data buffer ($01ee) ]

ClearBG3TileBuf:
@1fed:  longa
        clr_ax
        lda     #$01ee
        bra     _1ffd

; ------------------------------------------------------------------------------

; [ clear bg tile data buffer ($02ee) ]

ClearBG1TileBuf:
@1ff6:  longa
        clr_ax
        lda     #$02ee

mon_screen_clr_main:
_1ffd:  sta     $a97f,x
        sta     $aa17,x
        sta     $aaaf,x
        sta     $ab47,x
        sta     $abdf,x
        sta     $ac77,x
        sta     $ad0f,x
        sta     $ada7,x
        inx2
        cpx     #$0098
        bne     _1ffd
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ clear monster graphics buffer ]

ClearMonsterGfxBuf:
@2020:  clr_ax
@2022:  sta     $ae3f,x     ; clear monster graphics buffer
        sta     $be3f,x
        inx
        cpx     #$1000
        bne     @2022
        rts

; ------------------------------------------------------------------------------

; [ set monster to use imp size ]

SetImpMonsterSize:
@202f:  lda     $81a7
        asl
        tay
        longa
        lda     $812f,y
        sta     $22
        and     #$00ff
        asl
        tax
        lda     f:_c2bb70,x
        sta     $26
        lda     $23
        and     #$00ff
        asl
        tax
        lda     f:_c2bb92,x
        clc
        adc     $26
        sta     $26
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ init monster graphics loader ]

; A: monster slot

LoadMonsterGfxProp:
@205a:  sta     $81a7       ; monster slot
        asl
        tax
        phx
        longa
        stz     $26
        lda     $2001,x     ; monster number
        asl2
        clc
        adc     $2001,x     ; multiply by 5 to get pointer to monster graphics data
        tax
        lda     f:MonsterGfxProp+2,x   ; +$16 = monster palette number
        xba                 ; bytes are stored backwards for some reason ...
        and     #$03ff
        sta     $16
        shorta0
        lda     $81a7       ; monster slot
        tay
        lda     $62c2,y     ; imp graphics
        beq     @208a       ; branch if not imp
        jsr     SetImpMonsterSize
        ldx     #$0816      ; use monster $019e graphics data (imp)
@208a:  longa
        lda     f:MonsterGfxProp,x   ; monster graphics index
        and     #$7fff
        sta     $81a8       ; set graphics pointer
        shorta0
        lda     f:MonsterGfxProp+1,x   ; 3bpp flag
        and     #$80
        sta     $81ac
        lda     f:MonsterGfxProp+2,x   ; large map flag
        lsr
        ora     $81ac
        sta     $81ac
        lsr5
        and     #$01
        sta     $81ab
        lda     f:MonsterGfxProp+4,x   ; graphic map number
        sta     $81aa
        lda     $81a7       ; monster slot
        asl2
        tax
        stx     $10         ; $10 = monster slot * 4
        lda     #$c2
        sta     $14
        lda     $2000       ; vram map
        asl
        tax
        longa
        lda     f:MonsterVRAMMapPtrs,x
        clc
        adc     $10         ; add monster slot * 4
        sta     $12
        lda     [$12]       ; monster graphics buffer pointer
        clc
        adc     #$ae3f
        adc     $26
        sta     $61         ; set pointer
        inc     $12
        inc     $12
        lda     [$12]       ; graphics box size
        sta     $8256
        lda     $81a8       ; graphics pointer * 8
        asl3
        sta     $64
        stz     $8254       ;
        plx
        lda     $16         ; palette number
        sta     $8117,x
        shorta0
        lda     $81a9       ; high bits of graphics pointer
        lsr5
        sta     $66         ; set graphics pointer
; fallthrough

; ------------------------------------------------------------------------------

; [ add monster graphics offset ]

AddMonsterGfxOffset:
@210b:  lda     $64
        clc
        adc     #<MonsterGfx
        sta     $64
        lda     $65
        adc     #>MonsterGfx
        sta     $65
        lda     $66
        adc     #^MonsterGfx
        sta     $66
        rts

; ------------------------------------------------------------------------------

; [ load monster graphics map ]

LoadMonsterStencil:
@211f:  jsr     InitStencil
        lda     $8258       ; monster slot
        tax
        lda     $62c2,x     ; return if monster is an imp
        bne     @215e
        lda     $8258       ; monster slot
        asl
        tax
        lda     $8251       ; monster width
        sta     $812f,x
        lda     $8253       ; monster height
        sta     $8130,x
        phx
        longa
        lda     $2001,x     ; monster index
        cmp     #$0106
        bne     @214f       ; branch if not ghost train
        pha
        lda     #$0e10
        sta     $812f,x     ; width = $10, height = $0e
        pla
@214f:  tax
        lda     f:MonsterOverlap,x   ; y shift for sprite priority
        plx
        and     #$00ff
        sta     $8057,x
        shorta0
@215e:  rts

; ------------------------------------------------------------------------------

; [ init monster graphics map ]

InitStencil:

@MonsterStencilBank := (^MonsterStencil)<<16

@215f:  clr_ax
@2161:  sta     $822d,x     ; clear monster graphics map
        inx
        cpx     #$0020
        bne     @2161
        lda     $81ac       ; large map flag
        and     #$40
        bne     @2195       ; branch if large map

; small map (8x8)
        longa
        lda     $81aa       ; map number
        asl3
        clc
        adc     f:MonsterStencil     ; pointer to small maps
        tax
        shorta0
        ldy     $00
@2184:  lda     f:@MonsterStencilBank,x
        sta     $822d,y
        iny2
        inx
        cpy     #$0010
        bne     @2184
        bra     @21b8

; large map (16x16)
@2195:  longa
        lda     $81aa       ; map number
        asl5
        clc
        adc     f:MonsterStencil+2     ; pointer to large maps
        tax
        shorta0
        ldy     $00
@21aa:  lda     f:@MonsterStencilBank,x
        sta     $822d,y
        iny
        inx
        cpy     #$0020
        bne     @21aa
@21b8:  ldx     $00
        longa
        stz     $10
@21be:  lda     $822d,x     ; one row of map bits
        beq     @21ce       ; branch if no bits are set
        ora     $10
        sta     $10
        inx2
        cpx     #$0020
        bne     @21be
@21ce:  ldy     $00
        lda     $10
        xba
        sta     $10
@21d5:  asl     $10
        bcc     @21db
        sty     $12
@21db:  iny
        cpy     #$0010
        bne     @21d5
        shorta0
        txa
        lsr
        cmp     $8257
        bcc     @21ee
        lda     $8257
@21ee:  sta     $8253       ; monster width
        lda     $12
        inc
        cmp     $8256
        bcc     @21fc
        lda     $8256
@21fc:  sta     $8251       ; monster height
        sta     $8252
        stz     $824d
        stz     $824e
        rts

; ------------------------------------------------------------------------------

; [ check next bit of monster stencil ]

CheckMonsterStencilBit:
@2209:  lda     $824d
        bne     @2229
        lda     #$10
        sta     $824d
        lda     $824e
        tax
        lda     $822d,x
        sta     $8250
        lda     $822e,x
        sta     $824f
        inc     $824e
        inc     $824e
@2229:  dec     $824d
        asl     $824f
        rol     $8250
        rts

; ------------------------------------------------------------------------------

; [ load one tile of monster graphics ]

LoadMonsterGfxTile:
@2233:  phy
        longa
        tya
        clc
        adc     $61
        sta     $10
        shorta0
        lda     $81ac
        bpl     @227b
        longa
        lda     $8254
        tay
        clc
        adc     #$0018
        sta     $8254
        lda     #$0008
        sta     $12
@2256:  lda     [$64],y
        sta     ($10)
        inc     $10
        inc     $10
        iny2
        dec     $12
        bne     @2256
        lda     #$0008
        sta     $12
@2269:  lda     [$64],y
        and     #$00ff
        sta     ($10)
        inc     $10
        inc     $10
        iny
        dec     $12
        bne     @2269
        bra     @229b
@227b:  longa
        lda     $8254
        tay
        clc
        adc     #$0020
        sta     $8254
        lda     #$0010
        sta     $12
@228d:  lda     [$64],y
        sta     ($10)
        inc     $10
        inc     $10
        iny2
        dec     $12
        bne     @228d
@229b:  pla
        clc
        adc     #$0020
        tay
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ load monster graphics ]

LoadMonsterGfx:
@22a5:  ldy     $00
@22a7:  jsr     CheckMonsterStencilBit
        bcc     @22b1
        jsr     LoadMonsterGfxTile
        bra     @22bc
@22b1:  longa
        tya
        clc
        adc     #$0020
        tay
        shorta0
@22bc:  dec     $8252
        bne     @22a7
        stz     $824d
        lda     $8251
        sta     $8252
        longa
        lda     $61
        clc
        adc     #$0200
        sta     $61
        shorta0
        dec     $8253
        bne     @22a5
        rts

; ------------------------------------------------------------------------------

; [ load monster palettes ]

LoadMonsterPal:
@22dd:  longa
        stz     $10
        ldx     $00
@22e3:  lda     $8117,x     ; monster palette
        cmp     #$ffff
        beq     @2302       ; branch if no palette
        ldy     $00
@22ed:  cmp     $8123,y     ; compare to already loaded palettes
        beq     @2302       ; branch if palette is already loaded
        iny2
        cpy     #$000c
        bne     @22ed
        ldy     $10
        sta     $8123,y     ; add palette
        iny2
        sty     $10
@2302:  inx2                ; next monster
        cpx     #$000c
        bne     @22e3
        ldx     $00
@230b:  lda     $8117,x     ; monster palette
        ldy     $00
@2310:  cmp     $8123,y     ; find which palette it is (should be 0, 1, or 2)
        beq     @231e
        iny2
        cpy     #$0006
        bne     @2310
        ldy     $00         ; use palette 0 if not found
@231e:  tya
        lsr
        asl
        sta     $80db,x     ; set sprite data
        lda     #$0031
        sta     $80dc,x
        lda     #$0020
        sta     $8100,x     ;
        inx2
        cpx     #$000c
        bne     @230b
        lda     #$7f00
        sta     $10         ; +$10 = pointer to palette buffer
        ldy     $00
@233e:  lda     $8123,y     ; palette index
        asl4
        tax
        phy
        ldy     $00
@2349:  lda     f:MonsterPal,x
        sta     ($10),y
        inx2
        iny2
        cpy     #$0020
        bne     @2349
        lda     $10         ; next palette
        clc
        adc     #$0020
        sta     $10
        ply
        iny2
        cpy     #$0006      ; only 3 palettes will get loaded
        bne     @233e
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1236c:
one_monster_chr_set_mode7:
@236c:  ldy     #$c500

_c1236f:
one_monster_chr_set_mode72:
@236f:  sty     $14
        lda     #$7f
        sta     $16
        stz     $18
        clr_ax
        stx     $1a
@237b:  ldy     $00
        stz     $1c
@237f:  jsr     CheckMonsterStencilBit
        bcc     @2399
        jsr     LoadMonsterGfxTile
        phy
        ldy     $1a
        lda     $18
        sta     [$14],y
        iny2
        sty     $1a
        inc     $18
        inc     $1c
        ply
        bra     @23a5
@2399:  phy
        ldy     $1a
        lda     #$3f
        sta     [$14],y
        iny2
        sty     $1a
        ply
@23a5:  dec     $8252
        bne     @237f
        stz     $824d
        lda     $8251
        sta     $8252
        lda     $1c
        longa
        asl5
        sta     $1c
        lda     $14
        clc
        adc     #$0100
        sta     $14
        lda     $61
        clc
        adc     $1c
        sta     $61
        stz     $1a
        shorta0
        dec     $8253
        bne     @237b
        rts

; ------------------------------------------------------------------------------

; [  ]

_c123d8:
get_mode7_poi:
@23d8:  stx     $10
        jsr     ClearMonsterGfxBuf
        jsr     LoadEsperGfxProp
        jmp     LoadSummonStencil

; ------------------------------------------------------------------------------

; [  ]

_c123e3:
tfr_mode7:
@23e3:  lda     #$3f
        sta     $14
        lda     #$7e
        ldx     #$ae3f
        jsl     _c2c027
        ldx     #$2000
        stx     $10
        ldx     #$c400
        ldy     #$0000
        lda     #$7f
        jmp     WaitTfrVRAM

; ------------------------------------------------------------------------------

; [  ]

_c12400:
summon_mode7_chr_set_long:
@2400:  jsr     _c123d8
        jsr     _c1236c
        jsr     _c123e3
        rtl

; ------------------------------------------------------------------------------

; [  ]

_c1240a:
jiha_bg_chr_set_long:
@240a:  jsr     _c123d8
        ldy     #$ca00
        jsr     _c1236f
        phb
        lda     #$7f
        pha
        plb
        clr_ax
@241a:  lda     $ca10,x
        sta     $ce00,x
        lda     #$3f
        sta     $ca10,x
        lda     $cb10,x
        sta     $cf00,x
        lda     #$3f
        sta     $cb10,x
        lda     $cc10,x
        sta     $d000,x
        lda     #$3f
        sta     $cc10,x
        lda     $cd10,x
        sta     $d100,x
        lda     #$3f
        sta     $cd10,x
        inx2
        cpx     #$0010
        bne     @241a
        plb
        jsr     _c123e3
        rtl

; ------------------------------------------------------------------------------

; [ load esper graphics (bg1, long access) ]

LoadSummonGfxBG1_far:
@2452:  jsr     LoadSummonGfxBG1
        rtl

; ------------------------------------------------------------------------------

; [ load esper graphics (bg1) ]

; +X: graphics index

.if LANG_EN_REV1

LoadSummonGfxSprite:
@244d:  jsr     LoadSummonGfx
        ldy     #$2400
        ldx     #$1400
        bra     _245c

LoadSummonGfxBG1:
@2455:  jsr     LoadSummonGfx
        ldy     #$0000

.else

LoadSummonGfxBG1:
@2456:  jsr     LoadSummonGfx

.endif

        ldx     #$1800      ; size = $1800 (6 rows of 16x16 tiles)
_245c:  stx     $10
        ldx     #$ae3f      ; source = $7eae3f

.if !LANG_EN_REV1
; *** removed in rev 1 ***
        ldy     #$0000      ; destination = $0000-$0BFF (vram)
; ************************
.endif

        lda     #$7e
        jmp     WaitTfrVRAM

; ------------------------------------------------------------------------------

; [ load crusader graphics (bg1) ]

; small part only

_c22469:
jiha_obj_chr_set_long:
@2469:  ldx     #$018f
        jsr     LoadSummonGfx
        ldx     #$0800      ; size = $0800
        stx     $10
        ldx     #$ae3f      ; source = $7eae3f
        ldy     #$2000      ; destination = $2000 (vram)
        lda     #$7e
        jsr     WaitTfrVRAM
        rtl

; ------------------------------------------------------------------------------

; [ load esper graphics (sprite, long access) ]

LoadSummonGfxSprite_far:
@2480:  jsr     LoadSummonGfxSprite
        rtl

; ------------------------------------------------------------------------------

; [ load esper graphics (sprite) ]

; +X: graphics index

.if !LANG_EN_REV1

LoadSummonGfxSprite:
@2484:  jsr     LoadSummonGfx
        ldx     #$1400      ; size = $1400 (5 rows of 16x16 tiles)
        stx     $10
        ldx     #$ae3f      ; source = $7eae3f
        ldy     #$2400      ; destination = $2400-$2DFF (vram)
        lda     #$7e
        jmp     WaitTfrVRAM

.endif

; ------------------------------------------------------------------------------

; [ copy esper graphics to buffer ]

; also used for sketched monster graphics
; +X: graphics index

LoadSummonGfx:

.if LANG_EN_REV1
; **** added in rev 1 ****
        phx
; ************************
.endif

@2497:  stx     $10
        jsr     ClearMonsterGfxBuf
        jsr     LoadEsperGfxProp
        jsr     LoadSummonStencil

.if !LANG_EN_REV1
; *** removed in rev 1 ***
        jmp     LoadMonsterGfx

.else
; **** added in rev 1 ****
        jsr     LoadMonsterGfx
        plx
        rts
; ************************
.endif

; ------------------------------------------------------------------------------

; [  ]

; unused

summon_obj_chr_set2_long:
@24a5:  jsr     _c124a9
        rtl

; ------------------------------------------------------------------------------

; unused

_c124a9:
summon_obj_chr_set2:
@24a9:  jsr     LoadSummonGfx
        clr_a
@24ad:  tax
        pha
        longa
        lda     #$0180
        sta     $10
        lda     f:_c2d471+2,x
        tay
        lda     f:_c2d471,x
        tax
        shorta0
        lda     #$7e
        jsr     WaitTfrVRAM
        pla
        clc
        adc     #$04
        cmp     #$28
        bne     @24ad
        rts

; ------------------------------------------------------------------------------

; [ load sketched monster graphics ]

LoadSketchMonsterGfx:
@24d1:  jsr     LoadSummonGfx

.if LANG_EN_REV1
; **** added in rev 1 ****
        cpx     #$ffff
        bne     @24d4
        jsr     ClearMonsterGfxBuf
; ************************
.endif

@24d4:  ldx     #$2000
        stx     $10
        ldx     #$ae3f
        ldy     #$0000
        lda     #$7e
        jsr     WaitTfrVRAM
        rtl

; ------------------------------------------------------------------------------

; [ load esper graphics map ]

LoadSummonStencil:
@24e5:  jsr     InitStencil
        lda     $8251       ; graphics width
        sta     $616b
        lda     $8253       ; graphics height
        sta     $616c
        rts

; ------------------------------------------------------------------------------

; [ load esper graphics properties ]

LoadEsperGfxProp:
@24f5:  longa
        lda     $10

.if LANG_EN_REV1
; **** added in rev 1 ****
        cmp     #$ffff
        bne     @24f9
        clr_a
; ************************
.endif

@24f9:  asl2
        clc
        adc     $10
        tax
        lda     f:MonsterGfxProp+2,x   ; pointer to esper palette
        xba
        and     #$03ff
        asl4
        sta     $6169       ; pointer to esper palette
        lda     f:MonsterGfxProp,x
        and     #$7fff
        sta     $81a8
        shorta0
        lda     f:MonsterGfxProp+1,x
        and     #$80
        sta     $81ac
        lda     f:MonsterGfxProp+2,x
        lsr
        ora     $81ac
        sta     $81ac
        lsr5
        and     #$01
        sta     $81ab
        lda     f:MonsterGfxProp+4,x
        sta     $81aa
        lda     #$c2
        sta     $14
        lda     #$06
        asl
        tax
        longa
        lda     f:MonsterVRAMMapPtrs,x
        sta     $12
        lda     [$12]
        clc
        adc     #$ae3f
        sta     $61
        inc     $12
        inc     $12
        lda     [$12]
        sta     $8256
        lda     $81a8
        asl3
        sta     $64
        stz     $8254
        shorta0
        lda     $81a9
        lsr5
        sta     $66
        jmp     AddMonsterGfxOffset

; ------------------------------------------------------------------------------

; [ load monster graphics ]

InitMonsterGfx:
@257c:  jsr     ClearMonsterGfxBuf
        clr_ax
        lda     #$ff
@2583:  sta     $8117,x     ; clear monster palettes, ???, and sizes
        sta     $8123,x
        inx
        cpx     #$000c
        bne     @2583
        stz     $8258       ; start with monster slot 0
@2592:  lda     $8258       ; monster slot
        asl
        tax
        lda     $2002,x     ; monster number
        cmp     #$ff
        beq     @25b2       ; branch if no monster
        phx
        phx
        lda     $8258       ; monster slot
        jsr     LoadMonsterGfxProp
        plx
        jsr     LoadMonsterStencil
        jsr     LoadMonsterGfx
        plx
        jsl     LoadTrainGfx
@25b2:  inc     $8258       ; next monster
        lda     $8258
        cmp     #$06
        bne     @2592
        rts

; ------------------------------------------------------------------------------

; [ copy monster graphics to vram (long access) ]

; unused

WaitTfrMonsterGfx_far:
@25bd:  jsr     WaitTfrMonsterGfx
        rtl

; ------------------------------------------------------------------------------

; [ copy monster graphics to vram (at next vblank) ]

WaitTfrMonsterGfx:
@25c1:  ldx     #$2000
        stx     $10
        ldx     #$ae3f
        ldy     #$3000
        lda     #$7e
        jmp     WaitTfrVRAM

; ------------------------------------------------------------------------------

; [ copy monster graphics to vram (immediately) ]

; used during battle init only

TfrMonsterGfx:
@25d1:  ldx     #$2000
        stx     $36
        ldx     #$ae3f
        ldy     #$3000
        lda     #$7e
        jmp     TfrVRAM

; ------------------------------------------------------------------------------

; [ update character/monster animation sprite data (back layer) ]

DrawBackAnimSprites:
@25e1:  lda     $62d1
        beq     @2608
        clr_ay
@25e8:  lda     $7b
        cmp     $6142,y
        bne     @2601
        phy
        tya
        asl
        tax
        longa
        lda     f:_c2ce8b,x   ; pointer to animation thread data (+$7e64de)
        tax
        shorta0
        jsr     @2608
        ply
@2601:  iny
        cpy     #$000a
        bne     @25e8
        rts

@2608:  lda     $60aa
        beq     @2617
        lda     $0e
        and     #$01
        beq     @2617
        lda     #$02
        bra     @261a
@2617:  lda     $7b0d
@261a:  bmi     @2641
        and     #$0f
        sta     $7afc
@2621:  lda     $64de,x
        beq     @2631
        lda     $64e7,x
        beq     @2631
        jsr     DrawAnimThreadSprites
        ldx     $7afa
@2631:  longa
        txa
        clc
        adc     #$0010
        tax
        shorta0
        dec     $7afc
        bne     @2621
@2641:  rts

; ------------------------------------------------------------------------------

; [ update character/monster animation sprite data (front layer) ]

_c12642:
front_magic_set:
@2642:  lda     $62d1
        beq     _c12669
        clr_ay
@2649:  lda     $7b
        cmp     $6142,y
        bne     @2662
        phy
        tya
        asl
        tax
        longa
        lda     f:_c2ce8b,x   ; pointer to animation thread data (+$7e64de)
        tax
        shorta0
        jsr     _c12669       ; update animation sprite data
        ply
@2662:  iny
        cpy     #$000a
        bne     @2649
        rts

; ------------------------------------------------------------------------------

; [ update animation sprite data (front layer) ]

;    +X: pointer to thread data (+$6a2e)
; $7b0d: number of threads to update

DrawFrontAnimSprites:
front_magic_set_main:
_c12669:
@2669:  lda     $60aa
        beq     @2678
        lda     $0e
        and     #$01
        beq     @2678
        lda     #$02
        bra     @267b
@2678:  lda     $7b0d
@267b:  bmi     @26a9
        and     #$0f
        sta     $7afc
@2682:  lda     $64de,x     ; skip if sprite is not active
        beq     @2699
        lda     $6f86,x     ; skip if ???
        and     #$03
        bne     @2699
        lda     $64e7,x     ; skip if shown behind characters/monsters
        bne     @2699
        jsr     DrawAnimThreadSprites
        ldx     $7afa
@2699:  longa        ; next thread
        txa
        clc
        adc     #$0010
        tax
        shorta0
        dec     $7afc
        bne     @2682
@26a9:  rts

; ------------------------------------------------------------------------------

; [ update animation thread sprite data ]

DrawAnimThreadSprites:
@26aa:  stx     $7afa       ; thread pointer
        lda     $64e4,x     ; $3c = tile number
        sta     $3c
        longa
        lda     $64df,x     ; +$36 = x offset
        sta     $36
        lda     $64e1,x     ; +$38 = y offset
        sta     $38
        lda     $64e5,x     ; +$3a = sprite data
        sta     $3a
        lda     $64e3,x     ; frame number
        and     #$00ff
        asl
        tax
        lda     $3a
        and     #$0040
        beq     @26d8
        lda     f:_c2c424,x   ; pointer to frame data
        bra     @26dc
@26d8:  lda     f:_c2c3e4,x
@26dc:  tax
        lda     $71         ; next available sprite
        and     #$00ff
        asl2
        tay
        shorta0
@26e8:  lda     a:$0000,x     ; frame data
        cmp     #$ff
        beq     @276b       ; skip if 0
        bpl     @26fd       ; branch if msb clear
        clc
        adc     $36
        sta     $0300,y
        lda     $37
        adc     #$01
        bra     @2707
@26fd:  clc
        adc     $36         ; add to x offset
        sta     $0300,y
        lda     $37
        adc     #$00
@2707:  and     #$01
        beq     @271c
        stx     $3e
        lda     $a17f,y
        tax
        lda     $0500,x     ; set high sprite data
        ora     $a77f,y
        sta     $0500,x
        ldx     $3e         ; add to y offset
@271c:  clc
        lda     a:$0001,x
        bpl     @272d
        adc     $38
        sta     $3e
        lda     $39
        adc     #$01
        jmp     @2735
@272d:  adc     $38
        sta     $3e
        lda     $39
        adc     #$00
@2735:  and     #$01
        beq     @2742
        lda     $3e
        cmp     #$e0
        bcs     @274a       ; branch if sprite is off-screen
        jmp     @2748
@2742:  lda     $3e
        cmp     #$97
        bcc     @274a
@2748:  lda     #$e0
@274a:  sta     $0301,y
        lda     a:$0002,x     ; tile number
        clc
        adc     $3c
        sta     $0302,y
        lda     a:$0003,x
        ora     $3b
        sta     $0303,y
        inx4                ; next sprite
        iny4
        inc     $71         ; increment next available sprite
        jmp     @26e8
@276b:  rts

; ------------------------------------------------------------------------------

; [ update sprites ]

; called directly from nmi

UpdateSprites:
@276c:  lda     $201e       ; monsters shown
        and     $61ab       ;
        and     $60ab
        sta     $88d1       ; monsters with visible sprites
        clr_ax
@277a:  lda     $631a,x     ; damage numeral
        and     #$7f
        beq     @27aa       ; branch if disabled
        lda     $631e,x     ; damage numeral target
        cmp     #$04
        bcc     @279a       ; branch if a character
        sec
        sbc     #$04
        phx
        jsr     GetBitMask
        plx
        and     $88d1
        bne     @27aa       ; branch if monster sprite is visible
        stz     $631a,x     ; disable damage numeral
        bra     @27aa
@279a:  phx
        jsr     GetBitMask
        plx
        and     $201d       ; branch if character is visible
        and     $61ac
        bne     @27aa
        stz     $631a,x     ; disable damage numeral
@27aa:  inx
        cpx     #4
        bne     @277a
        lda     $7b67       ; hide bg1 monster sprites
        asl
        tax
        jmp     (.loword(_c127b8),x)

_c127b8:
@27b8:  .addr   _c127bc
        .addr   _c127bf

; ------------------------------------------------------------------------------

_c127bc:
@27bc:  jmp     _c12897       ; update sprite data

_c127bf:
@27bf:  jmp     _c12869       ; update sprite data (except bg1 monsters)

; ------------------------------------------------------------------------------

; [ update monster sprite data ]

UpdateMonsterSprites:
@27c2:  lda     $88d2
        pha
        sta     $7b
        asl
        tax
        longa
        lda     f:_c2ce93,x   ; pointer to monster animation thread data (+$7e64de)
        tax
        shorta0
        phx
        jsr     _c12642       ; update character/monster animation sprite data
        lda     $88d2
        jsr     DrawDmgNumSprites
        lda     $71
        sta     a:$0060
        lda     $88d2
        jsr     GetBitMask
        and     $88d1
        and     $201e
        and     $61ab
        and     $e9e6
        and     $6191
        beq     @285e
        jsr     _c13935
        lda     $88d2
        and     #$07
        jsr     GetBitMask
        and     $619d
        beq     @285e
        lda     $88d2
        and     #$07
        asl
        tax
        lda     $8130,x
        longa
        asl3
        sta     $36
        lda     $80cf,x
        pha
        clc
        adc     $36
        sta     $80cf,x
        shorta0
        lda     $80dc,x
        pha
        lda     $80f3,x
        eor     $617e,x
        pha
        phx
        lda     $80f3,x
        eor     $617e,x
        ora     #$02
        sta     $80f3,x
        lda     $80dc,x
        and     #$cf
        ora     #$20
        sta     $80dc,x
        jsr     _c13935
        plx
        pla
        sta     $80f3,x
        pla
        sta     $80dc,x
        longa
        pla
        sta     $80cf,x
        shorta0
@285e:  lda     a:$0060
        sta     $71
        plx
        jsr     DrawBackAnimSprites
        pla
        rts

; ------------------------------------------------------------------------------

; [ update sprite data (except bg1 monsters) ]

_c12869:
@2869:  jsr     _c1287a       ; check bg1 monsters
        eor     #$ff
        and     $201e       ; monsters shown
        and     $61ab       ; monsters shown
        sta     $88d1
        jmp     _c12897       ; update sprite data

; ------------------------------------------------------------------------------

; [ check bg1 monsters ]

_c1287a:
get_mon_back_bit_nmi:
@287a:  clr_ax
        stz     $88d1
@287f:  lda     $80f4,x     ; bg1 monster (from battle data)
        lsr
        ora     $88d1
        ror
        sta     $88d1
        inx2                ; next monster
        cpx     #$000c
        bne     @287f
        lsr2
        sta     $88d1
        rts

; ------------------------------------------------------------------------------

; [ update sprite data ]

_c12897:
pri_all_obj_set:
@2897:  lda     $7b0c       ; branch if character/monster order priority data is valid
        beq     @28ca
        stz     $7b0c       ; validate character/monster order priority data
        clr_ax
        longa
        shorti
@28a5:  lda     $7a1f,x     ; copy character/monster order priority data from buffer
        sta     $7a47,x
        lda     $7a21,x
        sta     $7a49,x
        lda     $7a33,x
        sta     $7a5b,x
        lda     $7a35,x
        sta     $7a5d,x
        inx4
        cpx     #$14
        bne     @28a5
        shorta0
        longi
@28ca:  jsr     UpdateCharXPos
        lda     $62b0       ; branch if esper thread 1 sprites are shown below monsters/characters
        bne     @28dd
        lda     #$01        ; update 1 thread
        sta     $7b0d
        ldx     #$0520      ; esper thread 1
        jsr     _c12669       ; update animation sprite data
@28dd:  lda     #$01        ; update 1 thread
        sta     $7b0d
        ldx     #$0530      ; esper thread 2
        jsr     _c12669       ; update animation sprite data
        lda     #$01        ; update 1 thread
        sta     $7b0d
        ldx     #$0540      ; esper thread 3
        jsr     _c12669       ; update animation sprite data
        clr_ax
@28f5:  phx
        lda     $7b0e       ; number of threads to update (monsters)
        sta     $7b0d
        lda     $7a49,x     ; character/monster number
        cmp     #$04
        bcc     @2928       ; branch if a character
        cmp     #$0a
        bcs     @295b       ; skip if not a monster

; monster
        sec
        sbc     #$04
        tax
        sta     $88d2       ; current monster
        lda     f:BitOrTbl,x   ; bit mask
        and     $62af
        bne     @2923
        lda     f:BitOrTbl,x   ; bit mask
        and     $201e
        and     $61ab
        beq     @295b       ; skip if ???
@2923:  jsr     UpdateMonsterSprites
        bra     @295b

; character
@2928:  ora     #$80        ;
        sta     $7b
        and     #$03
        asl
        tax
        longa
        lda     f:_c2ce8b,x   ; pointer to animation thread data (+$7e64de)
        tax
        shorta0
        lda     $7b0f       ; number of threads to update (characters)
        sta     $7b0d
        phx
        lda     $7b
        pha
        jsr     _c12642       ; update character/monster animation sprite data
        pla
        jsr     UpdateCharSprites
        and     #$7f
        cmp     $7b68
        bne     @2955
        jsr     _c12d92
@2955:  plx
        pha
        jsr     DrawBackAnimSprites
        pla

; next character/monster
@295b:  plx
        inx4
        cpx     #$0028
        bne     @28f5
        lda     $62b0       ; branch if esper thread 1 sprites are shown above monsters/characters
        beq     @2975
        lda     #$01
        sta     $7b0d
        ldx     #$0520      ; esper thread 1
        jsr     _c12669       ; update animation sprite data
@2975:  lda     $7b68       ;
        inc
        and     #$03
        sta     $7b68
        rts

; ------------------------------------------------------------------------------

; [ update character sprite data ]

; A: character number

UpdateCharSprites:
@297f:  pha
        and     #$03
        tax
        phx
        lda     f:BitOrTbl,x   ; bit mask
        sta     $2c         ; $2c = character bit mask
        plx
        lda     $201d       ; characters shown
        and     $61ac       ; characters shown
        and     $2c
        bne     @2998       ; return if character is not shown
@2995:  jmp     @2a25
@2998:  lda     f:_c2cf5b,x   ; pointer to character graphics data (+$7e2eae)
        tax
        lda     $2eae,x     ; character graphics index
        cmp     #$ff
        beq     @2995       ; return if invalid
        lda     $2ec0,x     ; status 4
        and     #$20
        bne     @2a25       ; branch if hide status
        pla
        jsr     DrawDmgNumSprites
        sta     $36
        lda     $62bd       ; return if characters are hidden for esper attack
        bne     @2a24
        lda     $36
        pha
        lda     $64ba       ;
        bne     @2a18
        pla
        jsr     DrawStatusSprites
        jsr     DrawCharSprite
        pha
        and     #$03
        sta     $36
        jsr     GetBitMask
        and     $619c
        beq     @2a0e       ; branch if vertical mirror image is enabled
        lda     $36
        and     #$03
        tax
        lda     f:_c2cf5b,x   ; pointer to character graphics data (+$7e2eae)
        tax
        longa
        lda     $61b9,x     ; add $18 to y position
        pha
        clc
        adc     #$0018
        sta     $61b9,x
        lda     $61bd,x
        pha
        phx
        shorta0
        lda     $61bd,x     ; sprite priority
        and     #$cf
        ora     #$a0        ; set vertical flip, priority = 2
        sta     $61bd,x
        lda     $36
        jsr     DrawCharSprite
        longa
        plx
        pla
        sta     $61bd,x
        pla
        sta     $61b9,x
        shorta0
@2a0e:  pla
        jsr     _c12a27
        jsr     DrawEchoSprites
        jmp     DrawCharShadow
@2a18:  pla
        pha
        jsr     DrawCharSprite
        jsr     _c12a27
        jsr     DrawBlockSprites
        pla
@2a24:  rts
@2a25:  pla
        rts

; ------------------------------------------------------------------------------

; [  ]

_c12a27:
set_deth_poi:
@2a27:  pha
        and     #$03
        asl
        tay
        tax
        lda     $e9da
        lsr
        and     #$08
        sta     $36
        txa
        clc
        adc     $36
        tax
        lda     f:CondemnNumGfxPtrs,x
        sta     $e9d2,y
        lda     f:CondemnNumGfxPtrs+1,x
        sta     $e9d3,y
        pla
        rts

; ------------------------------------------------------------------------------

; [ update echo sprites ]

; A: current character

DrawEchoSprites:
@2a4a:  pha
        and     #$03
        cmp     $62d3       ; return if this is not the character with echo effect
        bne     @2a57
        lda     $62d4       ; return if echo effect is disabled
        bne     @2a59
@2a57:  pla
        rts
@2a59:  lda     $0e         ; frame counter
        and     $62d5       ; frame delay
        bne     @2aa7
        ldx     #$0038
        longa
@2a65:  lda     $62ce,x     ; shift all sprites back 1
        sta     $62d6,x
        lda     $62d0,x
        sta     $62d8,x
        lda     $62d2,x
        sta     $62da,x
        lda     $62d4,x
        sta     $62dc,x
        txa
        sec
        sbc     #$0008
        tax
        bne     @2a65
        lda     $71         ; next available sprite
        and     #$00ff
        dec2                ; previous sprite
        asl2
        tax
        lda     $0300,x     ; copy previous sprite data to echo sprite data (top and bottom)
        sta     $62d6
        lda     $0302,x
        sta     $62d8
        lda     $0304,x
        sta     $62da
        lda     $0306,x
        sta     $62dc
@2aa7:  longa
        lda     $71         ; next available sprite
        and     #$00ff
        asl2
        tax
        lda     $0e         ; frame counter
        and     #$0001
        beq     @2abd
        ldy     #$0008
        bra     @2abe
@2abd:  tay
@2abe:  lda     $62d6,y     ; copy echo sprite data
        sta     $0300,x
        lda     $62d8,y
        sta     $0302,x
        lda     $62da,y
        sta     $0304,x
        lda     $62dc,y
        sta     $0306,x
        lda     $62e6,y
        sta     $0308,x
        lda     $62e8,y
        sta     $030a,x
        lda     $62ea,y
        sta     $030c,x
        lda     $62ec,y
        sta     $030e,x
        lda     $62f6,y
        sta     $0310,x
        lda     $62f8,y
        sta     $0312,x
        lda     $62fa,y
        sta     $0314,x
        lda     $62fc,y
        sta     $0316,x
        lda     $6306,y
        sta     $0318,x
        lda     $6308,y
        sta     $031a,x
        lda     $630a,y
        sta     $031c,x
        lda     $630c,y
        sta     $031e,x
        shorta0
        lda     $71         ; increment next available sprite (8 sprites)
        clc
        adc     #$08
        sta     $71
        pla
        rts

; ------------------------------------------------------------------------------

; [ update damage numeral sprites ]

DrawDmgNumSprites:
@2b2a:  jsr     _c12c67       ; update damage numeral for target
        pha
        sta     $3a
        lda     $7b3e       ; branch if mass damage numerals are disabled
        beq     @2b54
        jsr     _c12bfc       ;
        bcs     @2b4b
        lda     $3a
        tax
        lda     $7b3f,x     ; branch if damage numeral is disabled
        and     #$7f
        beq     @2b4b
        lda     $7b49,x     ; damage numeral frame counter
        cmp     #$40
        bne     @2b57       ; branch after 64 frames (a little over 1 second)
@2b4b:  lda     $3a
        tax
        stz     $7b3f,x     ; disable damage numeral
        stz     $7b49,x
@2b54:  jmp     @2bfa
@2b57:  phx
        tax
        lda     f:DmgNumBounceTbl,x   ; $3c = y offset for bouncing damage numerals
        sta     $3c
        plx
        inc     $7b49,x     ; increment frame counter
        stz     $41
        lda     $7b53,x     ; +$40 = x offset
        sta     $40
        bpl     @2b6e
        dec     $41
@2b6e:  longa
        lda     $36         ; +$36 = x position
        sec
        sbc     $40
        sta     $36
        shorta0
        lda     $38         ; $38 = y position
        sec
        sbc     $3c
        sta     $38
        lda     $71         ; next available sprite
        longa
        asl2
        tay
        shorta0
        lda     $3a
        tax
        lda     $7b3f,x
        and     #$80
        bne     @2b99
        lda     #$38
        bra     @2b9b
@2b99:  lda     #$3a
@2b9b:  sta     $0303,y
        sta     $0307,y
        lda     $36
        sta     $0300,y
        lda     $37
        and     #$01
        beq     @2bbb
        phx
        lda     $a17f,y
        tax
        lda     $0500,x
        ora     $a77f,y
        sta     $0500,x
        plx
@2bbb:  longa
        lda     $36
        clc
        adc     #$0010
        sta     $36
        shorta0
        lda     $36
        sta     $0304,y
        lda     $37
        and     #$01
        beq     @2be2
        phx
        lda     $a183,y
        tax
        lda     $0500,x
        ora     $a783,y
        sta     $0500,x
        plx
@2be2:  lda     $38
        sta     $0301,y
        sta     $0305,y
        lda     f:_c2e398,x
        sta     $0302,y
        inc2
        sta     $0306,y
        inc     $71         ; increment next available sprite (2 sprites)
        inc     $71
@2bfa:  pla
        rts

; ------------------------------------------------------------------------------

; [  ]

_c12bfc:
get_damage_poi:
@2bfc:  lda     $3a
        bpl     @2c2a
        and     #$03
        sta     $3a
        jsr     GetBitMask
        and     $201d
        and     $61ac
        bne     @2c11
        sec
        rts
@2c11:  lda     $7b10,x
        sta     $2c
        txa
        asl
        tax
        lda     $8043,x
        sta     $38
        lda     $8034,x
        sta     $37
        lda     $8033,x
        sta     $36
        bra     @2c5c
@2c2a:  lda     $3a
        jsr     GetBitMask
        and     $201e
        and     $61ab
        beq     @2c5e
        txa
        asl
        tax
        lda     $8027,x
        sta     $38
        lda     $800f,x
        sta     $36
        lda     $8010,x
        sta     $37
        lda     $80f3,x
        eor     $617e,x
        and     #$01
        eor     #$01
        sta     $2c
        lda     $3a
        clc
        adc     #$04
        sta     $3a
@2c5c:  clc
        rts
@2c5e:  lda     $3a
        clc
        adc     #$04
        sta     $3a
        sec
        rts

; ------------------------------------------------------------------------------

; [ update damage numeral for target ]

; A: target

_c12c67:
one_damage_oam_set2:
@2c67:  sta     $6141       ; current character/monster
        sta     $3a
        jsr     _c12bfc       ;
        bcc     @2c91
        clr_ax
@2c73:  lda     $631a,x     ; damage numeral
        and     #$7f
        beq     @2c87       ; branch if numeral is disabled
        lda     $631e,x     ; numeral target
        cmp     $3a
        bne     @2c87       ; branch if it doesn't match the current target
        stz     $631a,x     ; disable damage numeral
        stz     $6322,x
@2c87:  inx
        cpx     #4
        bne     @2c73
        lda     $6141
        rts
@2c91:  clr_ax
@2c93:  lda     $631a,x     ; damage numeral
        and     #$7f
        beq     @2cb8       ; branch if numeral is disabled
        lda     $631e,x     ; numeral target
        cmp     $3a
        bne     @2cb8       ; branch if it doesn't match the current target
        lda     $3a
        pha
        phx
        stx     $3c
        lda     $6141       ; current character/monster
        sta     $3a
        jsr     _c12bfc       ;
        ldx     $3c
        jsr     _c12cc2       ; update damage numeral sprite
        plx
        pla
        sta     $3a
@2cb8:  inx                 ; next numeral
        cpx     #4
        bne     @2c93
        lda     $6141
        rts

; ------------------------------------------------------------------------------

; [ update damage numeral sprite ]

_c12cc2:
@2cc2:  pha
        lda     $6322,x     ; damage numeral frame counter
        cmp     #$40        ; branch after 64 frames (a little over 1 second)
        bne     @2cd2
        stz     $631a,x     ; disable damage numeral
        stz     $6322,x
        pla
        rts
@2cd2:  phx
        tax
        lda     f:DmgNumBounceTbl,x   ; $3c = y offset for bouncing damage numerals
        sta     $3c
        plx
        inc     $6322,x     ; increment frame counter
        stz     $41
        lda     $6326,x     ; +$40 = x offset to center sprite
        sta     $40
        bpl     @2ce9
        dec     $41
@2ce9:  longa
        lda     $36         ; +$36 = x position
        sec
        sbc     $40
        sta     $36
        shorta0
        lda     $38         ; +$38 = y position
        sec
        sbc     $3c
        sta     $38
        lda     $3a         ; target
        cmp     #$04
        bcc     @2d0e       ; branch if a character
        sec
        sbc     #$04
        asl
        tay
        lda     $80e8,y
        sta     $3a         ; $3a = $80e8,y (monster)
        bra     @2d12
@2d0e:  lda     #$ff
        sta     $3a         ; $3a = #$ff (character)
@2d12:  lda     $71         ; next available sprite
        longa
        asl2
        tay
        shorta0
        lda     $631a,x     ; branch if numeral is green
        and     #$80
        bne     @2d27
        lda     #$38        ; use palette 4 (white numerals)
        bra     @2d29
@2d27:  lda     #$3a        ; use palette 5 (green numerals)
@2d29:  and     $3a
        sta     $0303,y     ; vhoopppm
        sta     $0307,y
        lda     $36
        sta     $0300,y     ; x position
        lda     $37
        and     #$01
        beq     @2d4b       ; branch if x position < $0100
        phx
        lda     $a17f,y
        tax
        lda     $0500,x     ; set sprite high data
        ora     $a77f,y
        sta     $0500,x
        plx
@2d4b:  longa
        lda     $36         ; next tile, x += 16
        clc
        adc     #$0010
        sta     $36
        shorta0
        lda     $36
        sta     $0304,y     ; x position
        lda     $37
        and     #$01
        beq     @2d72       ; branch if x position < $0100
        phx
        lda     $a183,y
        tax
        lda     $0500,x     ; set sprite high data
        ora     $a783,y
        sta     $0500,x
        plx
@2d72:  lda     $38         ; y position
        cmp     #$97
        bcc     @2d7a       ; hide sprite if y position < $97
        lda     #$e0
@2d7a:  sta     $0301,y
        sta     $0305,y
        lda     f:_c2e394,x   ; tile pointer for damage numeral sprite
        sta     $0302,y
        inc2
        sta     $0306,y
        inc     $71         ; increment next available sprite
        inc     $71
        pla
        rts

; ------------------------------------------------------------------------------

; [  ]

_c12d92:
bunsin_obj_set:
@2d92:  pha
        lda     $7b68
        tax
        phx
        lda     f:BitOrTbl,x
        sta     $2c
        plx
        lda     $201d
        and     $61ac
        and     $2c
        beq     @2dd1
        lda     f:_c2cf5b,x   ; pointer to character graphics data (+$7e2eae)
        tax
        lda     $2eae,x
        cmp     #$ff
        beq     @2dd1
        lda     $2ec0,x
        and     #$20
        bne     @2dd1
        lda     $2ec2,x
        and     #$04
        beq     @2dd1
        lda     #$01
        sta     $7b69
        lda     $7b68
        jsr     DrawCharSprite
        stz     $7b69
@2dd1:  pla
        rts

; ------------------------------------------------------------------------------

; [ update character color palettes ]

UpdateCharPal:
@2dd3:  lda     a:$0098       ; frame counter
        inc
        and     #$03
        asl5
        tay                 ; +y = pointer to current character palette
        phy
        ldx     #$0018
@2de3:  lda     $81ad,y     ; copy unaltered character palette
        sta     $7f80,y
        iny
        dex
        bne     @2de3
        ply
        lda     $61cd,y     ; branch if not vanishing
        beq     @2e05
        dec2                ; decrement vanish counter
        sta     $61cd,y
        bne     @2dfd
        stz     $7b6a       ; vanish animation complete
@2dfd:  lda     #$05
        jsr     UpdateVanishOutlineColor
        jmp     @2eb4
@2e05:  longa
        lda     $2ec1,y     ; +$36 = current status 1 & 2
        sta     $36
        lda     $2ec3,y     ; +$38 = current status 3 & 4
        sta     $38
        shorta0
        lda     $36         ; branch if character doesn't have petrify status
        and     #$40
        beq     @2e2d
        clr_ax
@2e1c:  lda     f:PetrifyPal,x
        sta     $7f82,y
        iny
        inx
        cpx     #$0016
        bne     @2e1c
        jmp     @2eb4
@2e2d:  lda     $39         ; branch if character doesn't have frozen status
        and     #$02
        beq     @2e45
        clr_ax
        phy
@2e36:  lda     f:FrozenPal,x
        sta     $7f82,y
        iny
        inx
        cpx     #$0016
        bne     @2e36
        ply
@2e45:  lda     $36         ; branch if character doesn't have poison status
        and     #$04
        beq     @2e51
        clr_a
        jsr     UpdateStatusSkinColor
        bra     @2eb4
@2e51:  lda     $36         ; branch if character doesn't have zombie status
        and     #$02
        beq     @2e5e
        lda     #$01
        jsr     UpdateStatusSkinColor
        bra     @2eb4
@2e5e:  lda     $37         ; branch if character doesn't have berserk status
        and     #$10
        beq     @2e6b
        lda     #$02
        jsr     UpdateStatusSkinColor
        bra     @2eb4
@2e6b:  lda     $38         ; branch if character doesn't have reflect status
        bpl     @2e75
        clr_a
        jsr     UpdateStatusOutlineColor
        bra     @2eb4
@2e75:  and     #$40        ; branch if character doesn't have safe status
        beq     @2e80
        lda     #$01
        jsr     UpdateStatusOutlineColor
        bra     @2eb4
@2e80:  lda     $38         ; branch if character doesn't have shell status
        and     #$20
        beq     @2e8d
        lda     #$02
        jsr     UpdateStatusOutlineColor
        bra     @2eb4
@2e8d:  lda     $38         ; branch if character doesn't have stop status
        and     #$10
        beq     @2e9a
        lda     #$07
        jsr     UpdateStatusOutlineColor
        bra     @2eb4
@2e9a:  lda     $38         ; branch if character doesn't have haste status
        and     #$08
        beq     @2ea7
        lda     #$03
        jsr     UpdateStatusOutlineColor
        bra     @2eb4
@2ea7:  lda     $38         ; return if character doesn't have slow status
        and     #$04
        beq     @2eb4
        lda     #$04
        jsr     UpdateStatusOutlineColor
        bra     @2eb4
@2eb4:  rts

; ------------------------------------------------------------------------------

; [ update glowing border (vanish) ]

UpdateVanishOutlineColor:
@2eb5:  pha
        lda     $61cd,y
        asl2
        clc
        adc     #$40
        sta     $2c
        pla
        bra     _2ec9

; ------------------------------------------------------------------------------

; [ update glowing border ]

; A: border color
;      0: blue/reflect
;      1: yellow/safe
;      2: green/shell
;      3: red/haste
;      4: white/slow
;      5: white/vanish
;      6: red/unused
;      7: pink/stop

UpdateStatusOutlineColor:
@2ec3:  pha
        lda     $0e
        sta     $2c
        pla

one_pal1_main:
_2ec9:  pha
        lda     $2c
        and     #$03
        tax
        lda     f:StatusOutlineDelayTbl,x
        clc
        adc     $2c
        sta     $36
        and     #$40
        beq     @2eee
        lda     $36
        and     #$3c
        lsr
        sta     $2c
        lda     #$1f
        sec
        sbc     $2c
        sta     $2c
        stz     $2d
        bra     @2ef7
@2eee:  lda     $36
        and     #$3c
        lsr
        sta     $2c
        stz     $2d
@2ef7:  pla
        asl
        tax
        longa
        jsr     _c141e4
        lda     f:StatusOutlineColorTbl,x
        jsr     _c14202
        sta     $7f82,y
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ update skin color ]

; A: skin color
;      0: poison
;      1: zombie
;      2: berserk

UpdateStatusSkinColor:
@2f0d:  asl2
        tax
        longa
        lda     f:StatusSkinColorTbl,x
        sta     $7f8c,y
        lda     f:StatusSkinColorTbl+2,x
        sta     $7f8e,y
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

_c12f24:
one_status_obj_set:
@2f24:  phx
        lda     $2ebe,x
        sta     $10
        bpl     @2f30
        lda     #$06
        bra     @2f70
@2f30:  lda     $10
        and     #$20
        beq     @2f3a
        lda     #$02
        bra     @2f70
@2f3a:  lda     $10
        and     #$10
        beq     @2f44
        lda     #$04
        bra     @2f70
@2f44:  lda     $2ec0,x
        and     #$01
        beq     @2f4f
        lda     #$04
        bra     @2f70
@2f4f:  lda     $2ebd,x
        and     #$04
        beq     @2f5a
        lda     #$01
        bra     @2f70
@2f5a:  lda     $2ebd,x
        and     #$01
        beq     @2f65
        lda     #$03
        bra     @2f70
@2f65:  lda     $10
        and     #$08
        beq     @2f6f
        lda     #$05
        bra     @2f70
@2f6f:  clr_a
@2f70:  sta     $61cf,x
        plx
        rts

; ------------------------------------------------------------------------------

; [ update character status change animations (long access) ]

_c12f75:
status_pat_tfr_long:
@2f75:  jsr     _c12f79       ; update character status change animations
        rtl

; ------------------------------------------------------------------------------

; [ update character status change animations ]

; morph/clear

_c12f79:
status_pat_tfr:
@2f79:  lda     $7b78       ; character index for status change animations
        and     #$03
        tay
        asl5
        tax
        lda     $61cd,x     ; counter for vanish palette
        jne     @304c
        lda     #$01        ;
        sta     $61ce,x
        lda     $2f4b       ; branch if running is disabled (event battles)
        and     #$01
        bne     @2fd1
        lda     $2ec0,x     ; branch if not morph status
        and     #$08
        beq     @2fb5
        lda     $7b6c,y     ; character graphics index
        cmp     #CHAR_GFX::ESPER_TERRA
        beq     @2fe6       ; branch if esper terra
        lda     #CHAR_GFX::ESPER_TERRA
        sta     $7b6c,y     ; change graphics to esper terra
        jsr     _c13157       ; update character graphics for status changes
        clr_a
        sta     $7b70,y
        bra     @2fe6
@2fb5:  lda     $2ebd,x
        and     #$20
        beq     @2fd1
        lda     $7b6c,y     ; character graphics index
        cmp     #$0f
        beq     @2fe6       ; branch if imp
        lda     #$0f
        sta     $7b6c,y     ; change graphics to imp
        jsr     _c13157       ; update character graphics for status changes
        clr_a
        sta     $7b70,y
        bra     @2fe6
@2fd1:  lda     $7b6c,y     ; character graphics index
        cmp     $2eae,x
        beq     @2fe6       ; branch if the same as buffer value
        lda     $2eae,x
        sta     $7b6c,y     ; change graphics to buffer value
        jsr     _c13157       ; update character graphics for status changes
        clr_a
        sta     $7b70,y
@2fe6:  lda     $2f4b       ; branch if running is disabled (event battles)
        and     #$01
        bne     @3013
        lda     $2ebd,x     ; branch if not clear status
        and     #$10
        beq     @3013
        lda     $7b70,y
        bne     @3032
        lda     $7b6a
        bne     @3032
        inc     $7b6a
        jsr     _c13050
        jsr     _c13106
        lda     #$01
        sta     $7b70,y
        lda     #$1e
        sta     $61cd,x
        bra     @3032
@3013:  lda     $7b70,y
        beq     @3032
        lda     $7b6a
        bne     @3032
        inc     $7b6a
        jsr     _c13050
        lda     $7b6c,y
        jsr     _c13157       ; update character graphics for status changes
        clr_a
        sta     $7b70,y
        lda     #$1e
        sta     $61cd,x
@3032:  stz     $61ce,x     ;
        jsr     _c13071
        jsr     _c12f24
        longa
        lda     $2ebd,x     ; copy status to second graphics buffer
        sta     $2ec1,x
        lda     $2ebf,x
        sta     $2ec3,x
        shorta0
@304c:  inc     $7b78       ; increment character number
        rts

; ------------------------------------------------------------------------------

; [  ]

_c13050:
tfr_chr_tmp:
@3050:  phy
        phx
        lda     $7b78
        and     #$03
        asl
        tax
        phb
        longa
        lda     f:_c2e422,x
        tax
        ldy     #$8000
        lda     #$1fff
        mvn     #$7f,#$7f
        shorta0
        plb
        plx
        ply
        rts

; ------------------------------------------------------------------------------

; [  ]

_c13071:
one_status_chr_set:
@3071:  phx
        longa
        lda     $2ebd,x
        sta     $10
        lda     $2ebf,x
        sta     $12
        shorta0
        lda     $10
        bpl     @3089
        lda     #$01
        bra     @30be
@3089:  lda     $11
        bpl     @3091
        lda     #$0a
        bra     @30be
@3091:  and     #$20
        beq     @3099
        lda     #$25
        bra     @30be
@3099:  lda     $13
        and     #$10
        beq     @30a3
        lda     #$09
        bra     @30be
@30a3:  lda     $10
        and     #$04
        beq     @30ad
        lda     #$0a
        bra     @30be
@30ad:  lda     $11
        and     #$02
        beq     @30b7
        lda     #$0a
        bra     @30be
@30b7:  lda     $61bb,x
        bne     @30be
        lda     #$06
@30be:  sta     $61bf,x
        plx
        rts

; ------------------------------------------------------------------------------

; [  ]

; unused ???

@30c3:  phy
        phx
        phb
        lda     #$7f
        pha
        plb
        ldx     #$8000
        ldy     #$0100
@30d0:  lda     #$08
        sta     $16
@30d4:  lda     a:$0001,x
        ora     a:$0010,x
        ora     a:$0011,x
        eor     #$ff
        and     a:$0000,x
        sta     a:$0000,x
        stz     a:$0001,x
        stz     a:$0010,x
        stz     a:$0011,x
        inx2
        dec     $16
        bne     @30d4
        longa
        txa
        clc
        adc     #$0010
        tax
        shorta0
        dey
        bne     @30d0
        plb
        plx
        ply
        rts

; ------------------------------------------------------------------------------

; [  ]

_c13106:
@3106:  phy
        phx
        lda     $7b78
        and     #$03
        asl
        tax
        longa
        lda     f:_c2e422,x
        tax
        shorta0
        phb
        lda     #$7f
        pha
        plb
        ldy     #$0100
@3121:  lda     #$08
        sta     $16
@3125:  lda     a:$0001,x
        ora     a:$0010,x
        ora     a:$0011,x
        eor     #$ff
        and     a:$0000,x
        sta     a:$0000,x
        stz     a:$0001,x
        stz     a:$0010,x
        stz     a:$0011,x
        inx2
        dec     $16
        bne     @3125
        longa
        txa
        clc
        adc     #$0010
        tax
        shorta0
        dey
        bne     @3121
        plb
        plx
        ply
        rts

; ------------------------------------------------------------------------------

; [ update character graphics for status changes ]

_c13157:
one_poi_chr_set:
@3157:  phy
        phx
        pha
        tya
        sta     $10
        lda     $7b78       ; character index
        and     #$03
        asl
        tax
        longa
        lda     f:_c2e422,x   ; pointer to character graphics buffer (+$7f0000)
        tax
        shorta0
        pla
        jsr     LoadCharGfx
        plx
        ply
        rts

; ------------------------------------------------------------------------------

; [ update character shadow sprites ]

DrawCharShadow:
@3175:  pha
        and     #$03
        tax
        lda     f:_c2cf5b,x   ; pointer to character graphics data (+$7e2eae)
        tax
        stz     $42
        lda     $61bd,x
        sta     $43
        lda     $71
        longa
        asl2
        tay
        lda     $61b7,x
        clc
        adc     $61c5,x
        clc
        adc     $61d4,x
        sta     $36
        lda     $61b9,x
        clc
        adc     #$0010
        adc     $61c7,x
        sta     $38
        lda     $42
        ora     #$0c2c
        sta     $42
        shorta0
        lda     $36
        sta     $0300,y
        lda     $37
        and     #$01
        beq     @31c7
        lda     $a17f,y
        tax
        lda     $0500,x
        ora     $a77f,y
        sta     $0500,x
@31c7:  lda     $39
        and     #$01
        beq     @31d6
        lda     $38
        cmp     #$e0
        bcs     @31de
        jmp     @31dc
@31d6:  lda     $38
        cmp     #$97
        bcc     @31de
@31dc:  lda     #$97
@31de:  sta     $0301,y
        longa
        lda     $42
        sta     $0302,y
        shorta0
        inc     $71
        pla
        rts

; ------------------------------------------------------------------------------

; [  ]

; A:

_c131ef:
armer_pat_set:
@31ef:  and     #$03
        sta     $36
        lda     $0e         ; frame counter
        and     #$03
        cmp     $36
        bne     @326a
        tax
        tay
        lda     $e9ef
        beq     @3209       ; branch if battle time is running
        lda     $0e
        lsr3
        bra     @320d
@3209:  lda     $0e
        lsr2
@320d:  and     #$03
        sta     $36
        lda     $64cc,x
        asl2
        clc
        adc     $36
        tax
        lda     f:_c2cf73,x
        asl2
        tax
        longa
        lda     f:MagitekGfxPtrs,x
        sta     $64bc
        clc
        adc     #$0080
        sta     $64c0
        clc
        adc     #$0180
        sta     $64be
        clc
        adc     #$0080
        sta     $64c2
        lda     $0e
        and     #$0003
        asl3
        tax
        lda     f:_c2cf37,x
        sta     $64c4
        lda     f:_c2cf37+2,x
        sta     $64c6
        lda     f:_c2cf37+4,x
        sta     $64c8
        lda     f:_c2cf37+6,x
        sta     $64ca
        shorta0
        inc     $64bb
@326a:  rts

; ------------------------------------------------------------------------------

; [  ]

_c1326b:
set_armer_offset:
@326b:  phx
        lda     $0e
        and     #$03
        cmp     $32
        bne     @329d
        tax
        tay
        lda     $0e
        lsr2
        sta     $36
        lda     $e9ef       ; branch if battle time is running
        beq     @3283
        lsr     $36
@3283:  lda     $36
        and     #$03
        sta     $36
        lda     $64cc,x
        asl2
        clc
        adc     $36
        tax
        lda     f:_c2cf73,x
        beq     @329a
        lda     #$01
@329a:  sta     $64d0,y
@329d:  plx
        rts

; ------------------------------------------------------------------------------

; [ draw shield block sprites ]

DrawBlockSprites:
@329f:  pha
        and     #$03
        sta     $32
        tax
        jsr     _c1326b
        lda     $64d0,x
        sta     $3c
        lda     f:_c2cf5b,x   ; pointer to character graphics data (+$7e2eae)
        tax
        stz     $3a
        lda     $61c3,x     ; current graphic action
        cmp     #$30
        bcc     @32bf       ; branch if not mirrored
        lda     #$40
        sta     $3a
@32bf:  lda     $61be,x
        and     #$c0
        eor     $3a
        ora     $61bd,x
        and     #$f1
        ora     $64d4
        sta     $43
        stz     $42
        lda     $71
        dec2
        longa
        asl2
        tay
        shorta0
        lda     $0301,y
        clc
        adc     $3c
        sta     $0301,y
        lda     $0305,y
        clc
        adc     $3c
        sta     $0305,y
        lda     $71
        longa
        asl2
        tay
        lda     $61b7,x
        clc
        adc     $61c5,x
        clc
        adc     $61d4,x
        sta     $36
        lda     $61b9,x
        clc
        adc     $61c7,x
        clc
        adc     $61d2,x
        sta     $38
        shorta0
        lda     $32
        asl2
        tax
        clc
        lda     f:_c2cf83,x
        bpl     @332c
        adc     $36
        sta     $0300,y
        lda     $37
        adc     #$01
        jmp     @3335
@332c:  adc     $36
        sta     $0300,y
        lda     $37
        adc     #$00
@3335:  and     #$01
        beq     @334c
        stx     $3c
        lda     $a17f,y
        tax
        lda     $0500,x
        ora     $a57f,y
        sta     $0500,x
        ldx     $3c
        bra     @335d
@334c:  stx     $3c
        lda     $a17f,y
        tax
        lda     $0500,x
        ora     $a37f,y
        sta     $0500,x
        ldx     $3c
@335d:  clc
        lda     f:_c2cf83+1,x
        bpl     @336e
        adc     $38
        sta     $3e
        lda     $39
        adc     #$01
        bra     @3376
@336e:  adc     $38
        sta     $3e
        lda     $39
        adc     #$00
@3376:  and     #$01
        beq     @3383
        lda     $3e
        cmp     #$e0
        bcs     @338b
        jmp     @3389
@3383:  lda     $3e
        cmp     #$97
        bcc     @338b
@3389:  lda     #$97
@338b:  sta     $0301,y
        longa
        lda     f:_c2cf83+2,x
        ora     $42
        sta     $0302,y
        shorta0
        inc     $71
        pla
        jsr     _c131ef
        rts

; ------------------------------------------------------------------------------

; [ update character status sprites ]

DrawStatusSprites:
@33a3:  pha
        and     #$03
        tax
        stz     $42
        lda     f:_c2cf5b,x   ; pointer to character graphics data (+$7e2eae)
        tax
        lda     $61cf,x
        bne     @33b5
        pla
        rts
@33b5:  stz     $3a
        lda     $61c3,x
        cmp     #$30
        bcc     @33c2
        lda     #$40
        sta     $3a
@33c2:  lda     $61c3,x     ; current graphic action
        cmp     #$14
        beq     @33d2       ; branch if kneeling
        cmp     #$44
        beq     @33d2       ; branch if kneeling
        stz     $3c
        jmp     @33d6
@33d2:  lda     #$1c        ; y-offset for kneeling character status sprite
        sta     $3c
@33d6:  stz     $32
        lda     $61be,x
        and     #$c0
        eor     $3a
        ora     $61bd,x
        sta     $43
        and     #$40
        beq     @33ed
        lda     $61cf,x
        sta     $32
@33ed:  jsr     _c134a5
        lda     $71
        longa
        asl2
        tay
        lda     $61b7,x
        clc
        adc     $61c5,x
        clc
        adc     $61d4,x
        sta     $36
        lda     $61b9,x
        clc
        adc     $61c7,x
        adc     $61d2,x
        adc     $38
        sta     $38
        phx
        lda     $32
        and     #$00ff
        asl
        tax
        lda     f:StatusSpriteOffsetTbl,x   ; x offsets for character status sprites
        clc
        adc     $36
        sta     $36
        plx
        shorta0
        lda     $61cf,x
        dec
        asl2
        clc
        adc     $3c
        tax
        clc
        lda     f:StatusSpriteData,x   ; x position for character status sprites
        bpl     @3444
        adc     $36
        sta     $0300,y
        lda     $37
        adc     #$01
        jmp     @344d
@3444:  adc     $36
        sta     $0300,y
        lda     $37
        adc     #$00
@344d:  and     #$01
        beq     @3462
        stx     $3c
        lda     $a17f,y
        tax
        lda     $0500,x
        ora     $a77f,y
        sta     $0500,x
        ldx     $3c
@3462:  clc
        lda     f:StatusSpriteData+1,x   ; y position for character status sprites
        bpl     @3473
        adc     $38
        sta     $3e
        lda     $39
        adc     #$01
        bra     @347b
@3473:  adc     $38
        sta     $3e
        lda     $39
        adc     #$00
@347b:  and     #$01
        beq     @3488
        lda     $3e
        cmp     #$e0
        bcs     @3490
        jmp     @348e
@3488:  lda     $3e
        cmp     #$97
        bcc     @3490
@348e:  lda     #$97
@3490:  sta     $0301,y
        longa
        lda     f:StatusSpriteData+2,x
        ora     $42
        sta     $0302,y
        shorta0
        inc     $71
        pla
        rts

; ------------------------------------------------------------------------------

; [  ]

_c134a5:
get_yoffset:
@34a5:  stz     $38
        stz     $39
        lda     $64ba
        beq     @34b6
        phx
        ldx     #$fff4
        stx     $38
        plx
        rts
@34b6:  lda     $2ec4,x
        bpl     @34da
        lda     $61d1,x
        bne     @34da
        lda     $61c1,x
        bne     @34da
        phx
        lda     $61c2,x
        and     #$38
        lsr3
        tax
        lda     #$ff
        sta     $39
        lda     f:FloatStatusOffsetTbl,x
        sta     $38
        plx
@34da:  rts

; ------------------------------------------------------------------------------

; [ update character sprites ]

DrawCharSprite:
@34db:  pha
        and     #$03
        tay
        tax
        lda     f:BitOrTbl,x
        sta     $36
        lda     f:_c2cf57,x
        sta     $40
        lda     f:_c2cf5b,x   ; pointer to character graphics data (+$7e2eae)
        tax
        lda     $7b69
        beq     @34f9
        dec     $61c2,x
@34f9:  stz     $44
        stz     $45
        lda     $61bc,x
        ora     $61bd,x
        sta     $42
        lda     $629a
        bne     @3549
        lda     $ecb8
        cmp     #$21
        beq     @3516
        lda     $2f45
        beq     @3549
@3516:  lda     $62a5,y
        bne     @3549
        lda     $62a0,y
        bne     @3549
        lda     $2f47
        and     $36
        bne     @3549
        lda     $2ec1,x
        and     #$c2
        bne     @3549
        lda     $2ec2,x
        and     #$80
        bne     @3549
        lda     $2ec3,x
        and     #$10
        bne     @3549
        lda     $2ec4,x
        and     #$08
        bne     @3549
        lda     #$0c
        sta     $36
        bra     @355f
@3549:  lda     $61c1,x
        bne     @3595
        lda     $61c0,x
        bne     @3556
        lda     $61bf,x
@3556:  asl2
        sta     $36
        lda     $61d0,x
        beq     @3564
@355f:  lda     $61c2,x
        bra     @3568
@3564:  lda     $61c2,x
        lsr
@3568:  lsr2
        sta     $38
        lda     $64ba
        beq     @3578
        lda     $e9ef       ; branch if battle time is running
        beq     @3578
        lsr     $38
@3578:  lda     $38
        and     #$03
        clc
        adc     $36
        txy
        tax
        lda     f:_c2c6a9,x   ; frames for animated graphic actions
        sta     $36
        and     #$1f
        cmp     #$07
        bne     @3592
        ldx     $44
        dex
        stx     $44
@3592:  tyx
        lda     $36
@3595:  sta     $61c3,x     ; set current graphic action
        sta     $36
        stz     $38
        cmp     #$30
        bcc     @35a9
        sec
        sbc     #$30
        sta     $36
        lda     #$40
        sta     $38
@35a9:  stz     $3a
        lda     $36
        bne     @35b3
        lda     #$08
        sta     $3a
@35b3:  lda     $61be,x
        and     #$c0
        eor     $38
        ora     $42
        sta     $42
        and     #$c0
        lsr2
        ora     $3a
        sta     $3a
        sta     $e9da
        stz     $36
        stz     $37
        lda     $7b69
        beq     @35e2
        lda     $42
        and     #$40
        beq     @35dd
        ldy     #$fff8
        bra     @35e0
@35dd:  ldy     #$0008
@35e0:  sty     $36
@35e2:  jsr     _c134a5
        inc     $61c2,x
        lda     $71
        longa
        asl2
        tay
        lda     $61b7,x
        clc
        adc     $61d4,x
        clc
        adc     $61c5,x
        clc
        adc     $36
        sta     $36
        lda     $61b9,x
        clc
        adc     $61c7,x
        adc     $61d2,x
        adc     $38
        adc     $44
        sta     $38
        shorta0
        lda     $3a
        tax
        lda     #$02
        sta     $41
@3619:  clc
        lda     f:CharSpriteData,x
        bpl     @362c
        adc     $36
        sta     $0300,y
        lda     $37
        adc     #$01
        jmp     @3635
@362c:  adc     $36
        sta     $0300,y
        lda     $37
        adc     #$00
@3635:  and     #$01
        beq     @364a
        stx     $3c
        lda     $a17f,y
        tax
        lda     $0500,x
        ora     $a77f,y
        sta     $0500,x
        ldx     $3c
@364a:  iny
        inx
        clc
        lda     f:CharSpriteData,x
        bpl     @365e
        adc     $38
        sta     $3e
        lda     $39
        adc     #$01
        jmp     @3666
@365e:  adc     $38
        sta     $3e
        lda     $39
        adc     #$00
@3666:  and     #$01
        beq     @3673
        lda     $3e
        cmp     #$e0
        bcs     @367b
        jmp     @3679
@3673:  lda     $3e
        cmp     #$97
        bcc     @367b
@3679:  lda     #$97
@367b:  sta     $0300,y
        iny
        inx
        lda     f:CharSpriteData,x
        clc
        adc     $40
        sta     $0300,y
        iny
        inx
        lda     f:CharSpriteData,x
        ora     $42
        sta     $0300,y
        iny
        inx
        inc     $71
        dec     $41
        jne     @3619
        pla
        rts

; ------------------------------------------------------------------------------

; [ update character graphics ]

UpdateCharGfx:
@36a2:  clr_a
        stz     $2c
@36a5:  tax
        pha
        lda     $61ce,x
        bne     @36d7
        lda     $61c2,x
        dec
        and     #$07
        beq     @36bc
        lda     $61c3,x
        cmp     $61c4,x
        beq     @36d7       ; branch if character graphic action has not changed
@36bc:  lda     $61c3,x
        sta     $61c4,x
        cmp     #$30
        bcc     @36c9
        sec
        sbc     #$30
@36c9:  sta     $37
        lda     $61cd,x
        sta     $3a
        stz     $3b
        lda     $2c
        jsr     _c136e2
@36d7:  inc     $2c
        pla
        clc
        adc     #$20
        cmp     #$80
        bne     @36a5
        rts

; ------------------------------------------------------------------------------

; [  ]

;   A: character slot
; $37: graphic action
; $3a: counter for vanish palette

_c136e2:
player_pat_chr_set:
@36e2:  pha
        sta     $3c
        lda     $3a
        bne     @36ee       ; branch if vanish palette counter is active
        jsr     UpdateCharGfxBuf
        bra     @36f8
@36ee:  lsr3
        and     #$03
        asl
        tax
        jsr     (.loword(_c1373f),x)
@36f8:  pla
        and     #$03
        tax
        lda     $202a,x     ; condemned number
        beq     @373e       ; return if not visible
        txa
        asl
        tax
        phb
        lda     #$7f
        pha
        plb
        longa
        lda     $7ee9d2,x   ; pointer to condemned numeral graphics
        tay
        lda     f:_c2e41a,x   ; pointer to character graphics buffer
        tax
        lda     #8
        sta     $3a
@371a:  lda     a:$0000,y
        sta     a:$0000,x
        lda     a:$0010,y
        sta     a:$0010,x
        lda     a:$0020,y
        sta     a:$0020,x
        lda     a:$0030,y
        sta     a:$0030,x
        iny2
        inx2
        dec     $3a
        bne     @371a
        shorta0
        plb
@373e:  rts

; ------------------------------------------------------------------------------

; jump table for vanishing character ??? (one per character)
super_jmp:
_c1373f:
@373f:  .addr   _c1379a,_c137e7,_c13834,_c13881

; ------------------------------------------------------------------------------

; [  ]

UpdateCharGfxBuf:
@3747:  lda     $3c         ; character slot
        asl
        tax
        phb
        stz     $36
        longa
        lda     f:_c2e41a,x   ; pointer to character graphics buffer
        sta     $38
        tay
        lda     f:_c2e422,x   ; pointer to character sprite sheet buffer
        clc
        adc     $36
        tax
        lda     #$003f
        mvn     #$7f,#$7f
        lda     $38
        clc
        adc     #$0200
        tay
        lda     #$003f
        mvn     #$7f,#$7f
        lda     $38
        clc
        adc     #$0040
        tay
        lda     #$003f
        mvn     #$7f,#$7f
        lda     $7e64ba
        and     #$00ff
        bne     @3795
        lda     $38
        clc
        adc     #$0240
        tay
        lda     #$003f
        mvn     #$7f,#$7f
@3795:  shorta0
        plb
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1379a:
@379a:  lda     $3c
        asl
        tax
        phb
        stz     $36
        longa
        lda     f:_c2e412,x
        sta     $3c
        lda     f:_c2e41a,x   ; pointer to character graphics buffer
        sta     $38
        tay
        lda     f:_c2e422,x   ; pointer to character sprite sheet buffer
        clc
        adc     $36
        tax
        lda     #$003f
        mvn     #$7f,#$7f
        lda     $38
        clc
        adc     #$0200
        tay
        lda     #$003f
        mvn     #$7f,#$7f
        lda     $38
        clc
        adc     #$0040
        tay
        lda     #$003f
        mvn     #$7f,#$7f
        lda     $38
        clc
        adc     #$0240
        tay
        jsr     _c138d2
        shorta0
        plb
        rts

; ------------------------------------------------------------------------------

; [  ]

_c137e7:
@37e7:  lda     $3c
        asl
        tax
        phb
        stz     $36
        longa
        lda     f:_c2e412,x
        sta     $3c
        lda     f:_c2e41a,x   ; pointer to character graphics buffer
        sta     $38
        tay
        lda     f:_c2e422,x   ; pointer to character sprite sheet buffer
        clc
        adc     $36
        tax
        lda     #$003f
        mvn     #$7f,#$7f
        lda     $38
        clc
        adc     #$0200
        tay
        lda     #$003f
        mvn     #$7f,#$7f
        lda     $38
        clc
        adc     #$0040
        tay
        jsr     _c138d2
        lda     $38
        clc
        adc     #$0240
        tay
        lda     #$003f
        mvn     #$7f,#$7f
        shorta0
        plb
        rts

; ------------------------------------------------------------------------------

; [  ]

_c13834:
@3834:  lda     $3c
        asl
        tax
        phb
        stz     $36
        longa
        lda     f:_c2e412,x
        sta     $3c
        lda     f:_c2e41a,x   ; pointer to character graphics buffer
        sta     $38
        tay
        lda     f:_c2e422,x
        clc
        adc     $36
        tax
        lda     #$003f
        mvn     #$7f,#$7f
        lda     $38
        clc
        adc     #$0200
        tay
        jsr     _c138d2
        lda     $38
        clc
        adc     #$0040
        tay
        lda     #$003f
        mvn     #$7f,#$7f
        lda     $38
        clc
        adc     #$0240
        tay
        lda     #$003f
        mvn     #$7f,#$7f
        shorta0
        plb
        rts

; ------------------------------------------------------------------------------

; [  ]

_c13881:
@3881:  lda     $3c
        asl
        tax
        phb
        lda     #$7f
        pha
        plb
        stz     $36
        longa
        lda     f:_c2e412,x
        sta     $3c
        lda     f:_c2e41a,x   ; pointer to character graphics buffer
        sta     $38
        tay
        lda     f:_c2e422,x   ; pointer to character sprite sheet buffer
        clc
        adc     $36
        tax
        jsr     _c138d2
        lda     $38
        clc
        adc     #$0200
        tay
        lda     #$003f
        mvn     #$7f,#$7f
        lda     $38
        clc
        adc     #$0040
        tay
        lda     #$003f
        mvn     #$7f,#$7f
        lda     $38
        clc
        adc     #$0240
        tay
        lda     #$003f
        mvn     #$7f,#$7f
        shorta0
        plb
        rts

; ------------------------------------------------------------------------------

; [  ]

_c138d2:
super_level_tfr:
        .a16
@38d2:  phx
        lda     $3a
        and     #$0007
        sta     $3a
        lda     #$0008
        sec
        sbc     $3a
        sta     $3e
@38e2:  lda     a:$0000,x
        sta     a:$0000,y
        lda     a:$0010,x
        sta     a:$0010,y
        lda     a:$0020,x
        sta     a:$0020,y
        lda     a:$0030,x
        sta     a:$0030,y
        inx2
        iny2
        dec     $3e
        bne     @38e2
        lda     $3a
        beq     @392b
        txa
        clc
        adc     $3c
        tax
@390b:  lda     a:$0000,x
        sta     a:$0000,y
        lda     a:$0010,x
        sta     a:$0010,y
        lda     a:$0020,x
        sta     a:$0020,y
        lda     a:$0030,x
        sta     a:$0030,y
        inx2
        iny2
        dec     $3a
        bne     @390b
@392b:  pla
        clc
        adc     $3c
        clc
        adc     #$0040
        tax
        rts

; ------------------------------------------------------------------------------

; [  ]

_c13935:
one_mon_obj_set:
        .a8
@3935:  lda     $88d2
        tay
        asl
        tax
        stx     $2e
        lda     $88b9,y
        sta     $2c
        lda     $80db,x
        ora     $80dc,x
        and     $80e8,x
        sta     $3d
        stz     $3c
        lda     #$c2
        sta     $38
        lda     $80f3,x
        eor     $617e,x
        and     #$03
        asl2
        tax
        longa
        lda     $3c
        eor     f:_c2c464,x
        sta     $3c
        lda     f:_c2c464+2,x
        sta     $36
        ldy     $2e
        tyx
        lda     [$36],y
        tay
        lda     $80c3,x
        sta     $38
        lda     $80cf,x
        sta     $3a
        lda     $60
        and     #$00ff
        asl2
        tax
        shorta0
@3989:  clc
        lda     $0000,y
        bpl     @399f
        adc     $38
        sta     $0300,x
        lda     $39
        adc     #$01
        and     #$01
        bne     @39c0
        jmp     @39ac
@399f:  adc     $38
        sta     $0300,x
        lda     $39
        adc     #$00
        and     #$01
        bne     @39c0
@39ac:  sty     $44
        lda     $a17f,x
        tay
        lda     $0500,y
        ora     $a37f,x
        sta     $0500,y
        ldy     $44
        jmp     @39d1
@39c0:  sty     $44
        lda     $a17f,x
        tay
        lda     $0500,y
        ora     $a57f,x
        sta     $0500,y
        ldy     $44
@39d1:  iny
        inx
        lda     $0000,y
        bpl     @39e8
        clc
        adc     $3a
        sta     $3e
        lda     $3b
        adc     #$01
        and     #$01
        beq     @39fe
        jmp     @39f5
@39e8:  clc
        adc     $3a
        sta     $3e
        lda     $3b
        adc     #$00
        and     #$01
        beq     @39fe
@39f5:  lda     $3e
        cmp     #$e0
        bcs     @3a06
        jmp     @3a04
@39fe:  lda     $3e
        cmp     #$97
        bcc     @3a06
@3a04:  lda     #$97
@3a06:  sta     $0300,x
        iny
        inx
        longa
        lda     $0000,y
        ora     $3c
        sta     $0300,x
        shorta0
        iny2
        inx2
        inc     $60
        dec     $2c
        jne     @3989
        rts

; ------------------------------------------------------------------------------

; [ update character x positions ]

UpdateCharXPos:
@3a26:  ldx     $61c9       ; character 1 target xy angle
        cpx     $61cb
        beq     @3a3e       ; branch if equal to current xy angle
        stx     $61cb       ; +$36 = xy angle
        stx     $36
        lda     $61b9       ; $2c = y position
        sta     $2c
        jsr     CalcCharXPos
        stx     $61b7       ; x position
@3a3e:  ldx     $61e9       ; character 2 ...
        cpx     $61eb
        beq     @3a56
        stx     $61eb
        stx     $36
        lda     $61d9
        sta     $2c
        jsr     CalcCharXPos
        stx     $61d7
@3a56:  ldx     $6209       ; character 3 ...
        cpx     $620b
        beq     @3a6e
        stx     $620b
        stx     $36
        lda     $61f9
        sta     $2c
        jsr     CalcCharXPos
        stx     $61f7
@3a6e:  ldx     $6229       ; character 4 ...
        cpx     $622b
        beq     @3a86
        stx     $622b
        stx     $36
        lda     $6219
        sta     $2c
        jsr     CalcCharXPos
        stx     $6217
@3a86:  rts

; ------------------------------------------------------------------------------

; [ calculate character x position ]

; +$36: xy angle ($0100 = vertical, $0180 = 45 degrees to the right)
;  $2c: y position
;   +X: absolute x position (out)

CalcCharXPos:
@3a87:  stz     $2d
        lda     $2c
        clc
        adc     #$68        ; top of "character triangle" is $68 above top of screen
        sta     $2c
        longa
        lda     $36
        and     #$01ff
        sec
        sbc     #$0100      ; +$2e = xy angle battlefield center (-255..255)
        sta     $2e
        lda     $2e
        bpl     @3ab0       ; branch if to the right of center
        eor     #$ffff
        sta     $2e
        jsr     Mult816NoHW
        lda     $31
        eor     #$ffff
        bra     @3ab5
@3ab0:  jsr     Mult816NoHW
        lda     $31
@3ab5:  clc
        adc     #$0078      ; add $78 center to center x position on screen
        tax
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ init character graphics data ]

InitCharGfxMain:
@3abe:  lda     $ecb8       ; battle bg
        cmp     #BATTLE_BG_MAGITEK_TRAIN
        bne     @3ac9       ; branch if not $2c (magitek train car)
        lda     #$04
        bra     @3acc
@3ac9:  lda     $201f       ; battle type
@3acc:  asl2
        tax
        lda     f:CharYOffsetTbl,x   ; character 1 y offset
        tay
        sty     $61b9
        lda     f:CharYOffsetTbl+1,x   ; character 2 y offset
        tay
        sty     $61d9
        lda     f:CharYOffsetTbl+2,x   ; character 3 y offset
        tay
        sty     $61f9
        lda     f:CharYOffsetTbl+3,x   ; character 4 y offset
        tay
        sty     $6219
        lda     f:CharFlipTbl,x   ; character 1 h-flip
        sta     $61be
        lda     f:CharFlipTbl+1,x   ; character 2 h-flip
        sta     $61de
        lda     f:CharFlipTbl+2,x   ; character 3 h-flip
        sta     $61fe
        lda     f:CharFlipTbl+3,x   ; character 4 h-flip
        sta     $621e
        jsl     _c2afa3
        stz     $10
        lda     $2eae       ; character 1 graphics index
        sta     $7b6c
        ldx     #$0000
        jsr     LoadCharGfx
        lda     #$01
        sta     $10
        lda     $2ece       ; character 2 graphics index
        sta     $7b6d
        ldx     #$2000
        jsr     LoadCharGfx
        lda     #$02
        sta     $10
        lda     $2eee       ; character 3 graphics index
        sta     $7b6e
        ldx     #$4000
        jsr     LoadCharGfx
        lda     #$03
        sta     $10
        lda     $2f0e       ; character 4 graphics index
        sta     $7b6f
        ldx     #$6000
        jsr     LoadCharGfx
        lda     #$d0        ;
        sta     $1e
        lda     $201f       ; battle type
        asl2
        tax
        lda     f:CharDirTbl,x   ; character 1 hand swap
        sta     $7b10
        lda     f:CharDirTbl+1,x
        sta     $7b11
        lda     f:CharDirTbl+2,x
        sta     $7b12
        lda     f:CharDirTbl+3,x
        sta     $7b13
        lda     $201f       ; battle type
        asl3
        tax
        longa
        lda     f:CharXAngleTbl,x   ; character 1 xy angle
        sta     $61c9
        inc
        sta     $61cb
        lda     $2ec5       ; character 1 row (0 = front, 1 = back)
        and     #$00ff
        beq     @3ba3       ; branch if front row
        shorta
        lda     #$01
        sta     $2ec5       ; character 1 row
        longa
        lda     $61c9
        clc
        adc     f:CharRowOffsetTbl,x   ; add back row xy angle
        sta     $61c9
@3ba3:  lda     f:CharXAngleTbl+2,x   ; character 2 x-offset
        sta     $61e9
        inc
        sta     $61eb
        lda     $2ee5       ; character 2 row
        and     #$00ff
        beq     @3bca
        shorta
        lda     #$01
        sta     $2ee5
        longa
        lda     $61e9
        clc
        adc     f:CharRowOffsetTbl+2,x
        sta     $61e9
@3bca:  lda     f:CharXAngleTbl+4,x   ; character 3 x-offset
        sta     $6209
        inc
        sta     $620b
        lda     $2f05
        and     #$00ff
        beq     @3bf1
        shorta
        lda     #$01
        sta     $2f05
        longa
        lda     $6209
        clc
        adc     f:CharRowOffsetTbl+4,x
        sta     $6209
@3bf1:  lda     f:CharXAngleTbl+6,x   ; character 4 x-offset
        sta     $6229
        inc
        sta     $622b
        lda     $2f25
        and     #$00ff
        beq     @3c18
        shorta
        lda     #$01
        sta     $2f25
        longa
        lda     $6229
        clc
        adc     f:CharRowOffsetTbl+6,x
        sta     $6229
@3c18:  stz     $61d3       ; clear character y-offsets
        stz     $61f3
        stz     $6213
        stz     $6233
        shorta0
        ldx     $11e0       ; battle index
        cpx     #$023e
        beq     @3c34       ; branch if shadow at colosseum
        cpx     #$023f
        bne     @3c3a       ; branch if not colosseum
@3c34:  ldy     #$0068
        sty     $61b9       ; character 1 y position
@3c3a:  clr_axy
        longa
@3c3f:  lda     $6246,x
        cmp     #$ffff
        beq     @3c54
        clc
        adc     #$0080
        sta     $61c9,y
        lda     $6248,x
        sta     $61b9,y
@3c54:  inx4                ; next character
        tya
        clc
        adc     #$0020
        tay
        cpy     #$0080
        bne     @3c3f
        shorta0
        lda     #$08
        sta     $61bc       ; character 1 palette
        lda     #$0a
        sta     $61dc       ; character 2 palette
        lda     #$0c
        sta     $61fc       ; character 3 palette
        lda     #$0e
        sta     $621c       ; character 4 palette
        lda     #$30
        sta     $61bd       ; sprite priority = 3
        sta     $61dd
        sta     $61fd
        sta     $621d
        lda     #$06        ; tertiary graphics index = 6
        sta     $61bf
        sta     $61df
        sta     $61ff
        sta     $621f
        ldx     $00         ; primary & secondary graphics index = 0
        stx     $61c0
        stx     $61e0
        stx     $6200
        stx     $6220
        clr_a
        sta     a:$0098       ; clear frame counter
        sta     $61c2       ; character 1 graphic action counter = 0
        inc2
        sta     $61e2       ; character 2 graphic action counter = 2
        inc2
        sta     $6202       ; character 3 graphic action counter = 4
        inc2
        sta     $6222       ; character 4 graphic action counter = 6
        clr_axy
@3cbd:  lda     $2eae,x     ; character graphics index
        cmp     #$ff
        beq     @3cd1       ; branch if no character
        iny
        txa
        clc
        adc     #$20
        tax
        cpx     #$0080
        bne     @3cbd
        clr_ay
@3cd1:  tyx                 ; y = first empty character slot (0 if no slots are empty)
        lda     f:MagitekPalOffsetTbl,x
        sta     $64d4       ; magitek color palette
        txa
        asl5
        tay
        lda     $64ba       ; branch if not magitek mode
        beq     @3cfb
        lda     #$18        ; 12 colors
        sta     $10
        clr_ax
@3ceb:  lda     f:MagitekPal,x
        sta     $81ad,y
        sta     $7f80,y
        inx
        iny
        dec     $10
        bne     @3ceb
@3cfb:  lda     $2f47       ; characters acting as enemies
        sta     $10
        clr_axy
@3d03:  lsr     $10
        bcc     @3d17       ; branch if character is not acting as an enemy
        lda     $7b10,x     ; swap character hands
        eor     #$01
        sta     $7b10,x
        lda     $61be,y     ; h-flip character
        eor     #$40
        sta     $61be,y
@3d17:  tya                 ; next character
        clc
        adc     #$20
        tay
        inx
        cpx     #4
        bne     @3d03
        rts

; ------------------------------------------------------------------------------

; [ init char sprite data (next part of final battle) ]

InitCharGfxFinalBattle:
@3d23:  jsr     InitCharGfxMain
        rts

; ------------------------------------------------------------------------------

; [ init char sprite data ]

InitCharGfx:
@3d27:  jsr     InitCharGfxMain
        jsr     UpdateCharXPos
        lda     #4
        dec     a:$0098
@3d32:  pha
        jsr     UpdateCharPal
        jsr     _c12f79       ; update character status change animations
        inc     a:$0098
        inc     $0e
        pla
        dec
        bne     @3d32
        rts

; ------------------------------------------------------------------------------

; [ load character graphics/palette ]

;  A: character graphics index
; +X: pointer to graphics buffer(+$7f0000)

LoadCharGfx:
@3d43:  cmp     #$ff
        bne     @3d48       ; return if not a valid character
        rts
@3d48:  sta     $14
        stx     $1c
        tax
        lda     $10
        pha
        pha
        phx
        ldx     $1c
        stx     $1a
        lda     $14
        asl
        clc
        adc     $14
        tax
        lda     #^_c2c745
        sta     $16
        phb
        lda     #$7f
        pha
        plb
        lda     f:CharGfxPtrs+2,x
        sta     $12
        longa
        lda     f:CharGfxPtrs,x
        sta     $10
        lda     #.loword(_c2c745)   ; pointers to tile graphics in buffer (+$7f0000)
        sta     $14
        ldx     $1a
        lda     #$0100      ; copy 256 tiles
        sta     $1a
@3d80:  lda     #$0010      ; copy 16 words (one 8x8 tile)
        sta     $18
        lda     [$14]       ; destination
        cmp     #$ffff
        bne     @3d98       ; branch if there is a tile
        clr_a
@3d8d:  sta     a:$0000,x     ; clear graphics
        inx2
        dec     $18
        bne     @3d8d
        bra     @3da6
@3d98:  tay
@3d99:  lda     [$10],y
        sta     a:$0000,x     ; copy graphics to buffer (one 8x8 tile)
        inx2
        iny2
        dec     $18
        bne     @3d99
@3da6:  inc     $14         ; next tile
        inc     $14
        dec     $1a
        bne     @3d80
        shorta0
        ldx     $1c
        lda     #$40        ; 64 tiles
        sta     $12
@3db7:  lda     $03c0,x     ; horizontally flip legs tiles
        .repeat 8
        asl
        ror     $10
        .endrep
        lda     $10
        sta     $03c0,x
        lda     $10c0,x
        .repeat 8
        asl
        ror     $10
        .endrep
        lda     $10
        sta     $10c0,x
        inx
        dec     $12
        bne     @3db7
        plb
        plx
        pla
        asl5
        phx
        tax
        lda     $2eae,x     ; character graphics
        cmp     #CHAR_GFX::SOLDIER
        bne     @3e1f       ; branch if not brown soldier
        lda     $2ec6,x     ; actor index
        cmp     #CHAR::LOCKE
        bne     @3e1f       ; branch if not locke
        lda     $1ea0
        and     #$08
        beq     @3e1f       ; event bit for when locke is a green soldier
        plx
        clr_a                 ; force palette 0 to get green soldier
        bra     @3e24
@3e1f:  plx
        lda     f:CharPalTbl,x
@3e24:  longa
        asl5
        tax
        shorta0
        pla
        asl5
        tay
        phy
        lda     #$18
        sta     $10
@3e3b:  lda     f:BattleCharPal,x
        sta     $81ad,y
        inx
        iny
        dec     $10
        bne     @3e3b
        plx
        inc     $61c4,x     ; invalidate previous graphic action (forces buffer update)
        rts

; ------------------------------------------------------------------------------

; [ load status/cursor palettes ]

LoadStatusPal:
@3e4d:  clr_ax
@3e4f:  lda     f:_c2c689,x
        sta     $7f98,x
        lda     f:_c2c689+8,x
        sta     $7fb8,x
        lda     f:_c2c689+16,x
        sta     $7fd8,x
        lda     f:_c2c689+24,x
        sta     $7ff8,x
        inx
        cpx     #8
        bne     @3e4f
        rts

; ------------------------------------------------------------------------------

; [ init monster sprite data ]

_c13e72:
v_mode_init:
@3e72:  lda     #$ff
        clr_ax
@3e76:  sta     $8259,x     ; clear monster sprite data
        sta     $83f1,x
        sta     $8589,x
        sta     $8721,x
        inx
        cpx     #$0198
        bne     @3e76
        lda     $2000       ; vram map index * 12
        sta     $22
        lda     #12
        sta     $24
        jsr     Mult8
        lda     $26
        tax
        lda     f:MonsterSpriteMapPtrs,x
        sta     $10
        lda     f:MonsterSpriteMapPtrs+1,x
        sta     $11
        lda     #^MonsterSpriteMapPtrs
        sta     $12
        ldx     #$8259      ; +$14 = pointer to monster sprite data
        stx     $14
        lda     #$06        ; $16 = monster counter
        sta     $16
@3eb0:  longa
        lda     [$10]       ; monster's x and y position in graphics buffer
        sta     $18
        inc     $10
        inc     $10
        shorta0
        ldy     $00
@3ebf:  lda     [$10]       ; sprite number
        bmi     @3eef       ; branch if at end of data
        asl2
        tax
        lda     f:_c2b9e7,x   ; sprite's x offset
        sec
        sbc     $18
        sta     ($14),y
        iny
        lda     f:_c2b9e7+1,x   ; sprite's y offset
        sec
        sbc     $19
        sta     ($14),y
        iny
        lda     f:_c2b9e7+2,x   ; sprite's tile pointer
        sta     ($14),y
        iny
        lda     f:_c2b9e7+3,x
        sta     ($14),y
        iny                 ; next sprite
        ldx     $10
        inx
        stx     $10
        bra     @3ebf
@3eef:  sta     ($14),y     ; store end byte
        longa
        inc     $10         ; next monster
        lda     $14
        clc
        adc     #$0044
        sta     $14
        shorta0
        dec     $16
        bne     @3eb0
        ldx     $00
@3f06:  lda     $8259,x     ; copy first set of sprite data to other three sets
        sta     $83f1,x
        sta     $8589,x
        sta     $8721,x
        inx
        cpx     #$0198
        bne     @3f06
        stz     $14         ;
        lda     #$01
        sta     $12
        ldx     $00
@3f20:  dec     $12
        bne     @3f36
        lda     #$11
        sta     $12
        lda     $14
        asl
        tay
        lda     $812f,y     ; monster width
        asl3                ; convert to pixels
        sta     $10
        inc     $14
@3f36:  lda     $8259,x     ; sprite x position
        cmp     #$ff
        beq     @3f46       ; branch if no sprite
        eor     #$ff        ; invert
        inc
        sec
        sbc     #$20        ; subtract 32
        clc
        adc     $10         ; add width
@3f46:  sta     $83f1,x     ; set 1st and 3rd copy x position
        sta     $8721,x
        inx4                ; next sprite
        cpx     #$0198
        bne     @3f20
        stz     $14
        lda     #$01
        sta     $12
        ldx     $00
@3f5d:  dec     $12
        bne     @3f73
        lda     #$11
        sta     $12
        lda     $14
        asl
        tay
        lda     $8130,y
        asl3
        sta     $10
        inc     $14
@3f73:  lda     $825a,x     ; sprite y position
        cmp     #$ff
        beq     @3f83       ; branch if no sprite
        eor     #$ff        ; invert
        inc
        sec
        sbc     #$20        ; subtract 32
        clc
        adc     $10         ; add width
@3f83:  sta     $858a,x     ; set 2nd and 3rd copy y position
        sta     $8722,x
        inx4                ; next sprite
        cpx     #$0198
        bne     @3f5d
        clr_ay
@3f94:  tya
        asl
        tax
        lda     f:MonsterSpriteDataPtrs,x
        sta     $10
        lda     f:MonsterSpriteDataPtrs+1,x
        sta     $11
        lda     #$11
        sta     $12
        clr_a
        sta     $88b9,y
@3fab:  lda     ($10)
        cmp     #$ff
        beq     @3fc4
        lda     $88b9,y
        inc
        sta     $88b9,y
        ldx     $10
        inx4
        stx     $10
        dec     $12
        bne     @3fab
@3fc4:  iny
        cpy     #$0006
        bne     @3f94
        rts

; ------------------------------------------------------------------------------

_c23fcb:
@3fcb:  .byte   $b4,$b5,$b6,$b7,$b8,$b9,$ba,$bb,$bc,$bd,$8c,$87,$8f,$c0,$8d,$9e
        .byte   $9d,$8c,$8f,$ff,$ff

; ------------------------------------------------------------------------------

; .repeat 8, i
;         .import .ident(.sprintf("WindowGfx_%04x", i))
; .endrep

; pointers to menu window graphics
WindowGfxPtrs:
@3fe0:
.repeat 8, i
        .faraddr WindowGfx + i * $0380
.endrep

; ------------------------------------------------------------------------------

; pointers to menu window palettes (in RAM)
WindowPalPtrs:
@3ff8:  .faraddr $1d57,$1d65,$1d73,$1d81,$1d8f,$1d9d,$1dab,$1db9

; ------------------------------------------------------------------------------

; [ get pointer to menu window graphics ]

;  +X: pointer to menu window graphics (out)
; $12: menu window graphics bank (out)

GetWindowGfxPtr:
@4010:  lda     $2f34       ; menu window graphics index
        and     #$07
        sta     $2f34
        asl
        clc
        adc     $2f34
        tax
        lda     f:WindowGfxPtrs+2,x
        sta     $12
        longa
        lda     f:WindowGfxPtrs,x
        tax
        shorta0
        ldy     #$0380      ; size = $0380
        sty     $10
        rts

; ------------------------------------------------------------------------------

; [ copy message window graphics to vram ]

; for messages at the top of the screen only, not used for menu windows

TfrMsgWindowGfx:
@4034:  jsr     GetWindowGfxPtr
        ldy     #$0a00      ; destination address = $0a00
        lda     $12
        jmp     WaitTfrVRAM

; ------------------------------------------------------------------------------

; [ load menu window and text graphics ]

LoadMenuGfx:
@403f:  jsr     GetWindowGfxPtr
        ldy     $10
        sty     $36                     ; size = $0380
        lda     $12
        ldy     #$4200                  ; destination address = $4200
        jsr     TfrVRAM

; slot graphics
        ldx     #$0800
        stx     $36                     ; size = $0800
        ldx     #.loword(SlotGfx)
        ldy     #$4400                  ; destination address = $4400
        lda     #^SlotGfx
        jsr     TfrVRAM

; small font graphics
        ldx     #$1000
        stx     $36                     ; size = $1000
        ldx     #.loword(SmallFontGfx)
        ldy     #$5800                  ; destination address = $5800
        lda     #^SmallFontGfx
        jsr     TfrVRAM

; menu window palette
        lda     $2f34                   ; menu window graphics index
        and     #$07
        sta     $2f34
        asl
        clc
        adc     $2f34
        tax
        lda     f:WindowPalPtrs+2,x
        sta     $38
        longa
        lda     f:WindowPalPtrs,x
        sta     $36
        clr_axy
        lda     #$0008
        sta     $2c
        jsr     _c141e4
@4095:  lda     [$36],y
        jsr     _c1417e
        sta     $7e42,x
        iny2
        inx2
        cpx     #$000e
        bne     @4095
        clr_ax
@40a8:  lda     f:BattleFontPal,x
        sta     $7e00,x
        lda     f:BattleFontPal+$10,x
        sta     $7e10,x
        inx2
        cpx     #$0010
        bne     @40a8
        lda     $1d55
        sta     $7e06
        shorta0
        ldy     #$4080
        clr_ax
@40cb:  lda     f:_c23fcb,x
        phx
        longa
        asl4
        clc
        adc     #.loword(SmallFontGfx)
        tax
        lda     #$0010
        sta     $36
        shorta0
        lda     #^SmallFontGfx
        jsr     TfrVRAM
        plx
        longa
        tya
        clc
        adc     #$0010
        tay
        shorta0
        inx
        cpx     #$0015
        bne     @40cb
        jsr     _c140fe
        rts

; ------------------------------------------------------------------------------

; [  ]

_c140fe:
bar_color_set:
@40fe:  clr_ax
@4100:  lda     f:BattleFontPal+$28,x
        sta     $7e28,x
        inx
        cpx     #$0018
        bne     @4100
        rts

; ------------------------------------------------------------------------------

; [  ]

; unused

@410e:  clr_ax
@4110:  lda     f:_c1414e,x
        sta     $7e50,x
        inx
        cpx     #$0010
        bne     @4110
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1411e:
gra_color_clr:
@411e:  clr_ax
@4120:  sta     $7e50,x
        inx
        cpx     #$0010
        bne     @4120
        rts

; ------------------------------------------------------------------------------

; [  ]

; unused

@412a:  clr_ax
        longa
@412e:  lda     f:_c14166,x
        eor     #$ffff
        sta     $7e28,x
        inx2
        cpx     #$0018
        bne     @412e
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

; unused

@4143:  clr_a
@4144:  stz     $7e28,x
        inx
        cpx     #$0018
        bne     @4144
        rts

; ------------------------------------------------------------------------------

_c1414e:
@414e:  .word   $739c,$6318,$5294,$4210,$318c,$2108,$1084,$0000
        .word   $0000,$7fe0,$7fe0,$7fe0

_c14166:
@4166:  .word   $6f18,$4a10,$2928,$037f,$0254,$018e,$001f,$0016
        .word   $7cc1,$6ce3,$7fff,$0000

; ------------------------------------------------------------------------------

; [  ]

_c1417e:
one_upcolor_set:
        .a16
@417e:  sta     $32
        and     #$001f
        clc
        adc     $2c
        sta     $34
        and     #$7fe0
        bne     @4198
        lda     $32
        and     #$7fe0
        ora     $34
        sta     $32
        bra     @419f
@4198:  lda     $32
        ora     #$001f
        sta     $32
@419f:  lda     $32
        and     #$03e0
        clc
        adc     $2e
        sta     $34
        and     #$7c1f
        bne     @41b9
        lda     $32
        and     #$7c1f
        ora     $34
        sta     $32
        bra     @41c0
@41b9:  lda     $32
        ora     #$03e0
        sta     $32
@41c0:  lda     $32
        and     #$7c00
        clc
        adc     $30
        sta     $34
        and     #$83ff
        bne     @41da
        lda     $32
        and     #$03ff
        ora     $34
        sta     $32
        bra     @41e1
@41da:  lda     $32
        ora     #$7c00
        sta     $32
@41e1:  lda     $32
        rts

; ------------------------------------------------------------------------------

; [  ]

_c141e4:
nmi_onecolor_init:
@41e4:  lda     $2c
        asl5
        and     #$03e0
        sta     $2e
        asl5
        and     #$7c00
        sta     $30
        lda     $2c
        and     #$001f
        sta     $2c
        rts

; ------------------------------------------------------------------------------

; [  ]

_c14202:
one_downcolor_set:
@4202:  sta     $32
        and     #$001f
        sec
        sbc     $2c
        sta     $34
        and     #$7fe0
        bne     @421c
        lda     $32
        and     #$7fe0
        ora     $34
        sta     $32
        bra     @4223
@421c:  lda     $32
        and     #$7fe0
        sta     $32
@4223:  lda     $32
        and     #$03e0
        sec
        sbc     $2e
        sta     $34
        and     #$7c1f
        bne     @423d
        lda     $32
        and     #$7c1f
        ora     $34
        sta     $32
        bra     @4244
@423d:  lda     $32
        and     #$7c1f
        sta     $32
@4244:  lda     $32
        and     #$7c00
        sec
        sbc     $30
        sta     $34
        and     #$83ff
        bne     @425e
        lda     $32
        and     #$03ff
        ora     $34
        sta     $32
        bra     @4265
@425e:  lda     $32
        and     #$03ff
        sta     $32
@4265:  lda     $32
        rts

; ------------------------------------------------------------------------------

; [ update menu state $39:  ]

UpdateMenuState_39:
        .a8
@4268:  lda     $7b83
        bpl     @4272
        lda     #$1c
        sta     $7b83
@4272:  jsr     _c14286
        lda     $7b83
        sec
        sbc     #$04
        sta     $7b83
        cmp     #$fc
        jeq     GoToNextMenuState
        rts

; ------------------------------------------------------------------------------

; [  ]

_c14286:
@4286:  clr_ax
        longa
        lda     $7b83
        sta     $2c
        jsr     _c141e4
@4292:  lda     f:_c14166,x
        eor     #$ffff
        jsr     _c14202
        sta     $7e28,x
        inx2
        cpx     #$0018
        bne     @4292
        clr_ax
        lda     $7b83
        sta     $2c
        jsr     _c141e4
@42b0:  lda     f:_c1414e,x
        eor     #$ffff
        jsr     _c14202
        sta     $7e50,x
        inx2
        cpx     #$0010
        bne     @42b0
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ update menu state $3a:  ]

UpdateMenuState_3a:
@42c8:  lda     $7b83
        bpl     @42d0
        stz     $7b83
@42d0:  jsr     _c14286
        lda     $7b83
        clc
        adc     #$04
        sta     $7b83
        cmp     #$20
        jeq     GoToNextMenuState
        rts

; ------------------------------------------------------------------------------

; [  ]

_c142e4:
window_mess_open_init:
@42e4:  jsr     ClearDlgGfxBuf
        ldx     #$5800
        stx     $e9bf
        jsr     TfrDlgTextGfx
        ldx     #$5a00
        stx     $e9bf
        jsr     TfrDlgTextGfx
        ldx     #$5c00
        stx     $e9bf
        jsr     TfrDlgTextGfx
        ldx     #$5e00
        stx     $e9bf
        jsr     TfrDlgTextGfx
        jsr     _c1436d
        jsr     _c199ac
        rts

; ------------------------------------------------------------------------------

; [  ]

_c14312:
window_mess_open:
@4312:  ldx     #$ffff
        stx     $4001
        stx     $4003
        lda     $7bca
        beq     @4325
        jsr     WaitFrame
        bra     @4312
@4325:  lda     $64d5
        bne     @434a
        jsr     _c1434b
        inc     $64d5
        lda     #$3b
        sta     $7bc3
        lda     #$01
        sta     $7bc2
@433a:  lda     $7bf0
        ora     $7bc2
        beq     @4347
        jsr     WaitFrame
        bra     @433a
@4347:  jsr     _c142e4
@434a:  rts

; ------------------------------------------------------------------------------

; [  ]

_c1434b:
w_mess_all_scr_clr:
@434b:  jsr     _c1994c
        ldy     #$7c00
        jsr     _c143ac
        ldy     #$7c40
        jsr     _c143ac
        ldy     #$7c80
        jsr     _c143ac
        ldy     #$7cc0
        jsr     _c143ac
        ldy     #$7d00
        jsr     _c143ac
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1436d:
w_mess_all_scr_set:
@436d:  jsr     _c1994c
        ldx     #$3100
        ldy     #$7c00
        jsr     _c14395
        ldx     #$3140
        ldy     #$7c40
        jsr     _c14395
        ldx     #$3180
        ldy     #$7c80
        jsr     _c14395
        ldx     #$31c0
        ldy     #$7cc0
        jsr     _c14395
        rts

; ------------------------------------------------------------------------------

; [  ]

_c14395:
one_w_mess_scr_set:
@4395:  longa
        txa
        ldx     $00
@439a:  sta     $e745,x
        inc
        sta     $e785,x
        inc
        inx2
        cpx     #$0034
        bne     @439a
        shorta0
; fallthrough

_c143ac:
@43ac:  ldx     #$0080
        stx     $10
        ldx     #$e73f
        lda     #$7e
        jmp     WaitTfrVRAM

; ------------------------------------------------------------------------------

; [  ]

_c143b9:
@43b9:  jsr     _c1434b
        ldx     #$1000
        stx     $10
        ldx     #.loword(SmallFontGfx)
        ldy     #$5800
        lda     #^SmallFontGfx
        jmp     WaitTfrVRAM

; ------------------------------------------------------------------------------

; [  ]

_c143cc:
@43cc:  lda     $64d5
        beq     @43e1
        jsr     _c143b9
        lda     #$3c
        sta     $7bc3
        lda     #$02
        sta     $7bc2
        stz     $64d5
@43e1:  rts

; ------------------------------------------------------------------------------

; [ update menu window $22:  ]

UpdateMenuWindow_22:
window_close:
@43e2:  ldx     $62ca
        lda     $7bcc
        bne     @43ee
        lda     #$ff
        bra     @4426
@43ee:  cmp     #$02
        bne     @4424
        clr_ax
@43f4:  lda     $4001,x
        cmp     #$ff
        beq     @43fe
        inc     $4001,x
@43fe:  inx
        cpx     #4
        bne     @43f4
        clr_ax
        stz     $10
        stx     $12
@440a:  lda     $4001,x
        cmp     #$ff
        beq     @4419
        cmp     $10
        bcc     @4419
        sta     $10
        stx     $12
@4419:  inx
        cpx     #4
        bne     @440a
        ldx     $12
        clr_a
        bra     @4426
@4424:  lda     #$04
@4426:  sta     $14
        lda     $4001,x
        cmp     #$ff
        beq     @4434
        lda     $14
        sta     $4001,x
@4434:  stz     $2f41       ; start battle time
        stz     $7bca
        stz     $7bcc
        jsr     _c150e9       ; go to next menu state
        jsl     UpdateMonsterNames
        rts

; ------------------------------------------------------------------------------

; [ update inventory with obtained items ]

_c14445:
set_item_add_data:
@4445:  lda     $64db
        and     #$0f
        sta     $10
        asl2
        clc
        adc     $10
        tay
        sty     $12
        lda     $602d,y     ; item index
        cmp     #$ff
        beq     @44a1       ; return if not valid
        ldx     #$0000
@445e:  cmp     $2686,x     ; find the item in the inventory
        beq     @4484
        inx5
        cpx     #$0500
        bne     @445e

; new item
        jsr     CheckInventoryFull
        bcs     @44a1
        lda     #$05
        sta     $10
@4476:  lda     $602d,y     ; copy obtained item to inventory
        sta     $2686,x
        iny
        inx
        dec     $10
        bne     @4476
        bra     @4494

; existing item
@4484:  lda     $6030,y     ; item quantity
        clc
        adc     $2689,x     ; add quantity to existing item slot (max 99)
        cmp     #$64
        bcc     @4491
        lda     #$63
@4491:  sta     $2689,x
@4494:  ldy     $12         ; pointer to obtained items list
        lda     #$ff
        sta     $602d,y     ; clear obtained item
        inc     $64db       ; increment number of items added to inventory
        jmp     @4445       ; next item
@44a1:  rts

; ------------------------------------------------------------------------------

; [  ]

_c144a2:
window_open:
@44a2:  lda     #$01
        sta     $7b98
        jsr     _c14445       ; update inventory with obtained items
        jsr     _c14759
        lda     #$04
        sta     $7bc3
        lda     #$01
        sta     $7bc2
        inc     $7bbb       ; enable menu window update
        inc     $7bca       ;
        rts

; ------------------------------------------------------------------------------

; [ update hp/gauge graphics ]

UpdateCharText:
@44be:  lda     $7b98       ;
        ora     $7b9c
        bne     @44d7
        lda     $7b99       ;
        asl
        tax
        jsr     (.loword(DrawCharHPMPTbl),x)
        lda     $7b99
        inc
        and     #$07
        sta     $7b99
@44d7:  lda     $7b9a       ;
        inc
        and     #$03
        sta     $7b9a
        asl
        tax
        jmp     (.loword(DrawCharGaugeTbl),x)

; ------------------------------------------------------------------------------

; jump table for gauge updates (each character)
DrawCharGaugeTbl:
@44e5:  .addr   DrawCharGauge_00
        .addr   DrawCharGauge_01
        .addr   DrawCharGauge_02
        .addr   DrawCharGauge_03

; ------------------------------------------------------------------------------

; jump table for hp/mp updates
DrawCharHPMPTbl:
@44ed:  .addr   DrawCharHP_00
        .addr   DrawCharMP_00
        .addr   DrawCharHP_01
        .addr   DrawCharMP_01
        .addr   DrawCharHP_02
        .addr   DrawCharMP_02
        .addr   DrawCharHP_03
        .addr   DrawCharMP_03

; ------------------------------------------------------------------------------

; [ draw character mp ]

DrawCharMP_03:
@44fd:  jsr     DrawCharMP

DrawCharMP_00:
DrawCharMP_01:
DrawCharMP_02:
@4500:  inc     $7b9c
        rts

; ------------------------------------------------------------------------------

; [ update menu window ]

UpdateMenuWindow:
@4504:  lda     $7bbb       ; branch if battle menu update is disabled
        bne     @4515
        ldx     $00
        stx     $10
        lda     $7bf0       ; update menu window
        asl
        tax
        jmp     (.loword(UpdateMenuWindowTbl),x)
@4515:  rts

; ------------------------------------------------------------------------------

; [ update menu window: no effect ]

UpdateMenuWindow_00:
UpdateMenuWindow_0f:
UpdateMenuWindow_23:
UpdateMenuWindow_24:
@4516:  rts

; ------------------------------------------------------------------------------

; update menu window jump table
UpdateMenuWindowTbl:
@4517:  .addr   UpdateMenuWindow_00
        .addr   UpdateMenuWindow_01
        .addr   UpdateMenuWindow_02
        .addr   UpdateMenuWindow_03
        .addr   UpdateMenuWindow_04
        .addr   UpdateMenuWindow_05
        .addr   UpdateMenuWindow_06
        .addr   UpdateMenuWindow_07
        .addr   UpdateMenuWindow_08
        .addr   UpdateMenuWindow_09
        .addr   UpdateMenuWindow_0a
        .addr   UpdateMenuWindow_0b
        .addr   UpdateMenuWindow_0c
        .addr   UpdateMenuWindow_0d
        .addr   UpdateMenuWindow_0e
        .addr   UpdateMenuWindow_0f
        .addr   UpdateMenuWindow_10
        .addr   UpdateMenuWindow_11
        .addr   UpdateMenuWindow_12
        .addr   UpdateMenuWindow_13
        .addr   UpdateMenuWindow_14
        .addr   UpdateMenuWindow_15
        .addr   UpdateMenuWindow_16
        .addr   UpdateMenuWindow_17
        .addr   UpdateMenuWindow_18
        .addr   UpdateMenuWindow_19
        .addr   UpdateMenuWindow_1a
        .addr   UpdateMenuWindow_1b
        .addr   UpdateMenuWindow_1c
        .addr   UpdateMenuWindow_1d
        .addr   UpdateMenuWindow_1e
        .addr   UpdateMenuWindow_1f
        .addr   UpdateMenuWindow_20
        .addr   UpdateMenuWindow_21
        .addr   UpdateMenuWindow_22
        .addr   UpdateMenuWindow_23
        .addr   UpdateMenuWindow_24
        .addr   UpdateMenuWindow_25
        .addr   UpdateMenuWindow_26
        .addr   UpdateMenuWindow_27
        .addr   UpdateMenuWindow_28
        .addr   UpdateMenuWindow_29
        .addr   UpdateMenuWindow_2a
        .addr   UpdateMenuWindow_2b
        .addr   UpdateMenuWindow_2c

; ------------------------------------------------------------------------------

; [ update menu window $2c: close character status window ]

UpdateMenuWindow_2c:
@4571:  inc     $10
        lda     #$1a
        clc
        adc     $ecba                   ; status window type (item or magic)
        jsr     _c150fb
        lda     #$0a
        jsr     _c15165
        jsr     _c14f8c                 ; close menu window
        jmp     _c148f2

; ------------------------------------------------------------------------------

; [ find first status ailment for status window ]

GetFirstStatus:
@4587:  longa
        lda     $2ebd,x                 ; character status 1 & 2
        beq     @459f
        xba
        ldx     #0
@4592:  asl
        bcs     @459b
        inx
        cpx     #16
        bne     @4592
@459b:  txa
        shorta
        rts
@459f:  lda     $2ebf,x                 ; character status 3 & 4
        ldx     #16
        xba
@45a6:  asl
        bcs     @45af
        inx
        cpx     #31
        bne     @45a6
@45af:  txa
        shorta
        rts

; ------------------------------------------------------------------------------

; [ check if character menu slot is valid ]

CheckStatusMenuCharValid:
@45b3:  tax
        lda     $64d6,x
        bmi     @45c1
        asl5
        tax
        sec
        rts
@45c1:  clc
        rts

; ------------------------------------------------------------------------------

; [ draw status name for status window (character target select) ]

DrawStatusMenuText:
@45c3:  lda     #$21
        jsr     LoadMenuText

; character slot 1
        clr_a
        jsr     CheckStatusMenuCharValid
        bcc     @45fb
        jsr     GetFirstStatus
        sta     $56d6

; character slot 2
        lda     #$01
        jsr     CheckStatusMenuCharValid
        bcc     @45fb
        jsr     GetFirstStatus
        sta     $56d9

; character slot 3
        lda     #$02
        jsr     CheckStatusMenuCharValid
        bcc     @45fb
        jsr     GetFirstStatus
        sta     $56dc
; character slot 4
        lda     #$03
        jsr     CheckStatusMenuCharValid
        bcc     @45fb
        jsr     GetFirstStatus
        sta     $56df
@45fb:  jmp     DrawMenuText

; ------------------------------------------------------------------------------

; [ update menu window $2b: open character status window ]

UpdateMenuWindow_2b:
disp_window_open:
@45fe:  lda     #$22
        jsr     LoadMenuText
        jsr     DrawMenuText
        jsr     DrawStatusMenuText
        lda     #$11
        jsr     _c14704
        inc
        jsr     _c14704
        lda     #$02
        jsr     _c14704
        inc
        jsr     _c14704
        lda     #$02
        ldy     #$8d53
        jsr     _c14721       ; update battle menu tile data (-> $7a00 vram)
        lda     #$01
        sta     $7b85
        stz     $10
        lda     #$19
        jsr     _c150fb
        lda     #$0a
        jsr     _c15165
        jmp     _c14f77

; ------------------------------------------------------------------------------

; [ update menu window $03: open command window ]

UpdateMenuWindow_03:
command_window_open:
@4637:  ldx     $62ca
        lda     $62cc,x
        bne     @4648
        lda     $2f2e
        beq     @4648
        lda     #$16
        bra     @464a
@4648:  lda     #$01
@464a:  jsr     _c150fb
        clr_a
        jsr     _c15165
        jsr     _c147ac
        jsr     _c14f77
        inc     $7bbb
        lda     #$01
        sta     $7bf0
        sta     $7b85
        inc     $7bdd
        inc     $7bd1
        inc     $93
        rts

; ------------------------------------------------------------------------------

; [ update menu window $05:  ]

UpdateMenuWindow_05:
command_window_close:
@466b:  inc     $10
        clr_a
        jsr     _c150fb
        jsr     GetCharMenuOrder
        lda     #$21
        jsr     _c14780
        clr_a
        jsr     _c15165
        inc     $7bee
        lda     #$02
        sta     $7bf0
        stz     $7b85
        inc     $7bdd
        inc     $7bd1
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1468f:
window_tfr_buf_clr:
@468f:  ldy     #$01ee

_c14692:
window_tfr_buf_clr2:
@4692:  longa
        ldx     $00
        tya
@4697:  sta     $5855,x
        inx2
        cpx     #$0280
        bne     @4697
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

_c146a5:
scr_tmp_line_set:
@46a5:  lda     #$04
        sta     $7afd
        shorti
        longa
        phd
        lda     #$0100      ; nonzero dp
        pha
        pld
        ldx     #$00
@46b6:  lda     $4307,x
        sta     $02,x
        sta     $51f7,x
        inx4
        cpx     #$c0
        bne     @46b6
@46c6:  lda     $4307,x
        sta     $02,x
        inx4
        cpx     #$f0
        bne     @46c6
        pld
        shorta0
        longi
        rts

; ------------------------------------------------------------------------------

; [ copy menu text ]

; +$10: source address
; +$12: destination address
; +$14: size
; +$16: number of lines

_c146da:
box_data_copy:
@46da:  shorti
        longa
        ldx     $16
@46e0:  ldy     $00
@46e2:  lda     ($10),y
        sta     ($12),y
        iny2
        cpy     $14
        bne     @46e2
        lda     $10
        clc
        adc     $14
        sta     $10
        lda     $12
        clc
        adc     #$0040
        sta     $12
        dex
        bne     @46e0
        clr_a
        longi
        shorta
        rts

; ------------------------------------------------------------------------------

; [ update menu text ]

; A: text region
;      0: monster names

_c14704:
set_box_data:
@4704:  pha
        asl3
        tax
        ldy     $00
@470b:  lda     f:_c2df9e,x
        sta     $0010,y
        inx
        iny
        cpy     #8
        bne     @470b
        jsr     _c146da
        pla
        rts

; ------------------------------------------------------------------------------

; [ update battle menu tile data ]

;  A: vram destination (0 = $7800, 1 = $7900, 2 = $7a00, 3 = $7c00)
; +Y: source address

_c1471e:
tfr_poi_set:
@471e:  ldy     #$5855      ; tile data pointer

_c14721:
tfr_poi_set2:
@4721:  phy
        pha
@4723:  lda     $7bbb
        beq     @472d       ; branch if battle menu update is not pending
        jsr     WaitVblank
        bra     @4723
@472d:  pla
        asl2
        tax
        longa
        lda     f:_c14749,x   ; size ??? (unused)
        sta     $7bbc
        lda     f:_c14749+2,x   ; bg2 tile data destination (vram)
        sta     $7bbe
        ply
        sty     $7bc0       ; source address
        shorta0
        rts

; ------------------------------------------------------------------------------

tfr_poi_tbl:
_c14749:
@4749:  .addr   $0200,$7800,$0200,$7900,$0200,$7a00,$0280,$7c00

; ------------------------------------------------------------------------------

; [ update monster names ]

_c14759:
normal_window_data_set:
@4759:  clr_a
        jsr     _c14704
        inc
        jsr     _c14704
        inc
        jsr     _c14704
        inc
        jsr     _c14704
        clr_a
        jmp     _c1471e       ; update battle menu tile data (-> $7800 vram)

; ------------------------------------------------------------------------------

_c1476d:
@476d:  .byte   $00,$1c,$38,$54

; ------------------------------------------------------------------------------

; [  ]

; unused

@4771:  clr_ax
        lda     #$21
@4775:  sta     $5b96,x
        inx2
        cpx     #$0070
        bne     @4775
        rts

; ------------------------------------------------------------------------------

; [  ]

_c14780:
player_name_buf_attr_set:
@4780:  pha
        phx
        clr_ax
@4784:  lda     #$21
        jsr     @4791
        inx
        cpx     #4
        bne     @4784
        plx
        pla
@4791:  phx
        pha
        txa
        and     #$03
        tax
        lda     f:_c1476d,x
        tax
        lda     #$0e
        sta     $12
        pla
@47a1:  sta     $5b96,x
        inx2
        dec     $12
        bne     @47a1
        plx
        rts

; ------------------------------------------------------------------------------

; [ draw character battle commands ]

_c147ac:
command_window_data_set:
@47ac:  ldx     $62ca       ; active character
        lda     $62cc,x
        bne     @47ee       ; branch if controlling a monster
        lda     $2f2e
        beq     @4830       ; branch if window mode

; short mode
        lda     #$1f
        jsr     LoadMenuText
        ldx     $62ca
        lda     f:CharCmdPtrs,x
        tax
        clr_ay
@47c8:  lda     $202e,x
        sta     $56da,y
        lda     $202f,x
        jsr     GetTextColor
        ora     $56d8,y
        sta     $56d8,y
        inx3
        tya
        clc
        adc     #$09
        tay
        cmp     #$24
        bne     @47c8
        jsr     DrawMenuText
        lda     #$01
        jmp     _c1471e       ; update battle menu tile data (-> $7900 vram)

; controlling a monster
@47ee:  jsr     GetCharMenuOrder
        lda     #$29
        jsr     _c14780
        lda     #$01
        jsr     _c14704
        lda     #$20
        jsr     LoadMenuText
        ldx     $62ca
        lda     f:CharCmdPtrs,x
        tax
        clr_ay
@480a:  lda     $205e,x
        sta     $56d9,y
        lda     $205f,x
        jsr     GetTextColor
        ora     $56d7,y
        sta     $56d7,y
        inx3
        tya
        clc
        adc     #$08
        tay
        cmp     #$20
        bne     @480a
        jsr     DrawMenuText
        lda     #$01
        jmp     _c1471e       ; update battle menu tile data (-> $7900 vram)

; window mode
@4830:  jsr     GetCharMenuOrder
        lda     #$29
        jsr     _c14780
        lda     #$01
        jsr     _c14704
        lda     #$04
        jsr     LoadMenuText
        ldx     $62ca
        lda     f:CharCmdPtrs,x
        tax
        clr_ay
@484c:  lda     $202e,x     ; command
        sta     $56da,y
        lda     $202f,x     ;
        jsr     GetTextColor
        ora     $56d8,y
        sta     $56d8,y
        inx3
        tya
        clc
        adc     #$08
        tay
        cmp     #$20
        bne     @484c
        jsr     DrawMenuText
        lda     #$01
        jmp     _c1471e       ; update battle menu tile data (-> $7900 vram)

; ------------------------------------------------------------------------------

; [ init bg tile data for swdtech numerals ]

_c24872:
ken_window_data_set:
@4872:  ldx     $62ca       ; active character
        lda     #$07
        sec
        sbc     $2020       ; number of known swdtechs
        tax
        clr_ay
@487e:  lda     f:_c2a860,x   ; palette data for swdtech menu
        sta     $5dda,y
        inx
        iny2
        cpy     #$0010
        bne     @487e
        lda     #$0c
        jsr     _c14704
        lda     #$0d
        jsr     _c14704
        lda     #$0e
        jsr     _c14704
        lda     #$02
        ldy     #$8d53
        jmp     _c14721       ; update battle menu tile data (-> $7a00 vram)

; ------------------------------------------------------------------------------

; [  ]

_c148a4:
def_window_data_set:
@48a4:  lda     #$0c
        jsr     _c14704
        lda     #$0d
        jsr     _c14704
        lda     $2f2e
        beq     @48b7
        lda     #$10
        bra     @48c0
@48b7:  ldx     $62ca
        lda     $890f,x
        clc
        adc     #$08
@48c0:  jsr     _c14704
        lda     #$02
        ldy     #$8d53
        jmp     _c14721       ; update battle menu tile data (-> $7a00 vram)

; ------------------------------------------------------------------------------

; [  ]

_c148cb:
@48cb:  lda     #$0c
        jsr     _c14704
        lda     #$0d
        jsr     _c14704
        lda     $2f2e
        beq     @48de
        lda     #$0f
        bra     @48e7
@48de:  ldx     $62ca
        lda     $890f,x
        clc
        adc     #$04
@48e7:  jsr     _c14704
        lda     #$02
        ldy     #$8d53
        jmp     _c14721       ; update battle menu tile data (-> $7a00 vram)

; ------------------------------------------------------------------------------

; [ copy menu window tile buffer ]

_c148f2:
tmp_buffer_copy:
@48f2:  phb
        longa
        ldx     #$5855
        ldy     #$8d53
        lda     #$01ff
        mvn     #$7e,#$7e
        shorta0
        plb
        rts

; ------------------------------------------------------------------------------

; [ draw icons for one slot machine slot ]

DrawSlotReel:
@4906:  sty     $10
        longa
        lda     #$0010
        sta     $18
@490f:  lda     f:SlotReelTbl,x
        asl
        phx
        tax
        lda     f:_c1495b,x
        sta     $16
        plx
        lda     #$0002
        sta     $14
@4922:  lda     $10
        sta     f:hVMADDL
        lda     $16
        sta     f:hVMDATAL
        inc
        sta     f:hVMDATAL
        inc
        sta     f:hVMDATAL
        inc
        sta     f:hVMDATAL
        lda     $10
        clc
        adc     #$0020
        sta     $10
        lda     $16
        clc
        adc     #$0010
        sta     $16
        dec     $14
        bne     @4922
        inx2
        dec     $18
        bne     @490f
        shorta0
        rts

; ------------------------------------------------------------------------------

_c1495b:
@495b:  .word   $0640,$0644,$0648,$064c,$0660,$0664,$0668,$066c

; ------------------------------------------------------------------------------

; [  ]

_c1496b:
bg1_window_init:
@496b:  ldy     #$6c09
        ldx     #$0000
        jsr     DrawSlotReel
        ldy     #$6c0e
        ldx     #$0020
        jsr     DrawSlotReel
        ldy     #$6c13
        ldx     #$0040
        jsr     DrawSlotReel
        ldy     #$00ee
        jsr     _c14692
        clr_axy
@498f:  lda     f:_c14a37,x
        sta     $5883,y
        lda     f:_c14a37+21,x
        sta     $5884,y
        lda     f:_c14a37+7,x
        sta     $5903,y
        lda     f:_c14a37+28,x
        sta     $5904,y
        lda     f:_c14a37+14,x
        sta     $5983,y
        lda     f:_c14a37+35,x
        sta     $5984,y
        iny2
        inx
        cpx     #$0007
        bne     @498f
        ldx     #$0180
        stx     $36
        ldx     #$5855
        ldy     #$6aa0
        lda     #$7e
        jsr     TfrVRAM
        clr_ay
@49d3:  lda     $5883,y
        sta     $5d15,y
        lda     $5903,y
        sta     $5d23,y
        iny
        cpy     #$000e
        bne     @49d3
        jsr     _c15a17
        lda     #$06
        jsr     LoadMenuText
        jsr     DrawMenuText
        ldx     #$0080
        stx     $36
        ldx     #$5e4d
        lda     #$7e
        ldy     #$7e00
        jsr     TfrVRAM
        rts

; ------------------------------------------------------------------------------

; [ init menu text ]

InitMenuText:
@4a01:  jsr     DrawMonsterNames
        jsr     DrawCharNames
        jsr     DrawCharHPInit
        jsr     DrawCharMPInit
        jsr     DrawRowDefText
        lda     #$1e
        jsr     LoadMenuText
        ldx     $62ca
        lda     #$07
        sec
        sbc     $2020
        tax
        clr_ay
@4a21:  lda     f:_c2a860,x   ; palette data for swdtech menu
        sta     $56d8,y
        inx
        iny3
        cpy     #$0018
        bne     @4a21
        jsr     DrawMenuText
        jmp     DrawCharGaugeInit

; ------------------------------------------------------------------------------

_c14a37:
@4a37:  .byte   $08,$08,$08,$15,$08,$08,$08
        .byte   $08,$08,$08,$ff,$19,$1a,$ff
        .byte   $ff,$16,$17,$17,$18,$17,$18
        .byte   $02,$02,$02,$02,$02,$02,$02
        .byte   $02,$02,$02,$00,$02,$02,$00
        .byte   $00,$02,$02,$02,$02,$02,$02

; ------------------------------------------------------------------------------

; [ update monster names ]

DrawMonsterNames:
@4a61:  clr_a
        jsr     LoadMenuText
        jmp     DrawMenuText

; ------------------------------------------------------------------------------

; [ draw row/def window text ]

DrawRowDefText:
@4a68:  clr_ax
        longa
        lda     #$01ff
@4a6f:  sta     $5d31,x
        sta     $5d77,x
        inx2
        cpx     #$0046
        bne     @4a6f
        shorta0
        lda     #$08
        jsr     LoadMenuText
        jsr     DrawMenuText
        lda     #$09
        jsr     LoadMenuText
        jmp     DrawMenuText

; ------------------------------------------------------------------------------

; [ draw all character names ]

DrawCharNames:
@4a8f:  lda     #$01
        jsr     LoadMenuText
        jmp     DrawMenuText

; ------------------------------------------------------------------------------

; [ update gauge/condemned buffers ]

; A: character number
; A: 0 if not morphed, 4 if morphed (out)

UpdateCharGaugeBuf:
@4a97:  tax
        lda     $64d6,x
        bmi     @4aba                   ; return if character slot is empty
        and     #$03
        tax
        lda     $2022,x                 ; atb gauge
        sta     $619e,x
        lda     $2026,x                 ; morph gauge
        sta     $61a2,x
        lda     $202a,x                 ; condemned number
        sta     $61a6,x
        lda     $2026,x                 ; branch if not morphed
        beq     @4aba
        lda     #$04
        rts
@4aba:  clr_a
        rts

; ------------------------------------------------------------------------------

; [ draw gauge for character slot 1 ]

DrawCharGauge_00:
@4abc:  clr_a
        jsr     UpdateCharGaugeBuf
        clc
        adc     #$12                    ; $12 if not morphed, $16 if morphed
        jsr     DrawCharText
        stz     $7b9b
        rts

; ------------------------------------------------------------------------------

; [ draw gauge for character slot 2 ]

DrawCharGauge_01:
@4aca:  lda     #$01
        jsr     UpdateCharGaugeBuf
        clc
        adc     #$13
        jsr     DrawCharText
        lda     #$01
        sta     $7b9b
        rts

; ------------------------------------------------------------------------------

; [ draw gauge for character slot 3 ]

DrawCharGauge_02:
@4adb:  lda     #$02
        jsr     UpdateCharGaugeBuf
        clc
        adc     #$14
        jsr     DrawCharText
        lda     #$02
        sta     $7b9b
        rts

; ------------------------------------------------------------------------------

; [ draw gauge for character slot 4 ]

DrawCharGauge_03:
@4aec:  lda     #$03
        jsr     UpdateCharGaugeBuf
        clc
        adc     #$15
        jsr     DrawCharText
        lda     #$03
        sta     $7b9b
        rts

; ------------------------------------------------------------------------------

; [ draw a single character's current hp ]

DrawCharHP_00:
@4afd:  stz     $7b9d
        lda     #$0e
        bra     DrawCharText

DrawCharHP_01:
@4b04:  lda     #$01
        sta     $7b9d
        lda     #$0f
        bra     DrawCharText

DrawCharHP_02:
@4b0d:  lda     #$02
        sta     $7b9d
        lda     #$10
        bra     DrawCharText

DrawCharHP_03:
@4b16:  lda     #$03
        sta     $7b9d
        lda     #$11
; fall through

; ------------------------------------------------------------------------------

; [ draw character text ]

DrawCharText:
@4b1d:  jsr     LoadMenuText
        jmp     DrawMenuText

; ------------------------------------------------------------------------------

; [ draw all characters' current hp ]

DrawCharHPInit:
@4b23:  lda     #$02
        jsr     LoadMenuText
        jmp     DrawMenuText

; ------------------------------------------------------------------------------

; [ get character's battle menu position ]

; empty character slots are pushed to the bottom of the battle menu order
; for example, if slot 1 is empty, the battle menu order would be 2, 3, 4, empty

GetCharMenuOrder:
@4b2b:  clr_ax
        lda     $62ca                   ; character slot
@4b30:  cmp     $64d6,x
        beq     @4b3d                   ; return if slot is valid
        inx
        cpx     #4
        bne     @4b30
        clr_ax
@4b3d:  rts

; ------------------------------------------------------------------------------

; [ draw character mp ]

; A: character slot

DrawCharMP:
@4b3e:  jsr     GetCharMenuOrder
        txa
        clc
        adc     #$0a
        jsr     LoadMenuText
        jmp     DrawMenuText

; ------------------------------------------------------------------------------

; [ draw all characters' min/max MP ]

DrawCharMPInit:
@4b4b:  lda     #$07
        jsr     LoadMenuText
        jmp     DrawMenuText

; ------------------------------------------------------------------------------

; [ draw all characters' ATB gauges (or max HP) ]

DrawCharGaugeInit:
@4b53:  lda     #$03
        jsr     LoadMenuText
        jmp     DrawMenuText

; ------------------------------------------------------------------------------

; pointers to character battle commands (+$202e)
CharCmdPtrs:
@4b5b:  .byte   $00,$0c,$18,$24

; pointers to character spell/lore lists (+$208e)
CharSpellListPtrs:
@4b5f:  .word   $0000,$013c,$0278,$03b4

; pointers to character equipped weapon/shield data (+$7e2b86)
CharEquipPtrs:
@4b67:  .byte   $00,$05,$0a,$0f

; ------------------------------------------------------------------------------

; [ get enabled/disabled text color ]

; A: msb set = gray, msb clear = white

GetTextColor:
@4b6b:  and     #$80        ; "disabled" flag >> 5
        lsr5
        rts

; ------------------------------------------------------------------------------

; [  ]

_c14b73:
get_attr_info2:
@4b73:  and     $40
        beq     @4b7a
@4b77:  lda     #$04
        rts
@4b7a:  lda     $890d
        cmp     #$ff
        beq     @4ba9
        lda     $2c
        cmp     #$ff
        beq     @4ba9
        ldx     $62ca
        lda     $2e6e,x
        beq     @4b9e
        lda     $890e
        and     #$08
        beq     @4ba9
        lda     $2d
        and     #$08
        bne     @4b77
        bra     @4ba9
@4b9e:  lda     $2d
        ora     $890e
        and     #$18
        cmp     #$18
        bne     @4b77
@4ba9:  lda     #$08
        rts

; ------------------------------------------------------------------------------

_c14bac:
@4bac:  .byte   $05,$02,$04,$21,$0e,$00,$ff,$ff,$04,$21,$0e,$00,$ff,$00

; ------------------------------------------------------------------------------

; [  ]

DrawEquipListText:
@4bba:  clr_ax
@4bbc:  lda     f:_c14bac,x
        sta     $5755,x
        inx
        cpx     #$0013
        bne     @4bbc
        ldx     $62ca
        lda     f:CharEquipPtrs,x
        tay
        lda     f:BitOrTbl,x
        sta     $40
        lda     $2b86,y
        sta     $575a
        lda     $2b9a,y
        sta     $5760
        jsr     InitListTextTfr
        jmp     DrawListText

; ------------------------------------------------------------------------------

ToolsListText:
@4be9:  .byte   $05,$02                 ; 2 spaces
        .byte   $04,$21                 ; white font
        .byte   $0e,$00                 ; item name
        .byte   $ff                     ; space
        .byte   $ff                     ; space
        .byte   $04,$21                 ; white font
        .byte   $0e,$00                 ; item name
        .byte   $ff                     ; space
        .byte   $00                     ; terminator

; ------------------------------------------------------------------------------

; [ draw one line of tools menu ]

DrawToolsListText:
@4bf7:  phy
        longa
        asl
        sta     $40
        asl
        clc
        adc     $40
        tay
        shorta0
        tax
@4c06:  lda     f:ToolsListText,x
        sta     $5755,x
        inx
        cpx     #$0013
        bne     @4c06
        lda     $4005,y
        sta     $575a       ; set 1st item id
        lda     $4008,y
        sta     $5760       ; set 2nd item id
        jsr     InitListTextTfr
        jsr     DrawListText
        ply
        rts

; ------------------------------------------------------------------------------

; [ draw one line of throw menu text ]

DrawThrowListText:
@4c27:  phy
        longa
        sta     $40
        asl
        clc
        adc     $40
        tay
        shorta0
        tax
@4c35:  lda     f:ItemListText,x
        sta     $5755,x
        inx
        cpx     #$0013
        bne     @4c35
        lda     $4005,y
        cmp     #$ff
        beq     @4c51
        lda     $4006,y
        sta     $575d
        bne     @4c5a
@4c51:  clr_a
        sta     $575d
        lda     #$ff
        sta     $575b
@4c5a:  lda     $4005,y
        sta     $575a
        sta     $5761
        jsr     InitListTextTfr
        jsr     DrawListText
        ply
        rts

; ------------------------------------------------------------------------------

; [ draw one row of inventory ]

DrawItemListText:
@4c6b:  phy
        longa
        sta     $40
        asl2
        clc
        adc     $40
        tay
        shorta0
        tax
@4c7a:  lda     f:ItemListText,x
        sta     $5755,x
        inx
        cpx     #$0013
        bne     @4c7a
        ldx     $62ca
        lda     f:BitOrTbl,x
        sta     $40
        lda     $2686,y
        cmp     #$ff
        beq     @4c9f
        lda     $2689,y
        sta     $575d
        bne     @4ca8
@4c9f:  clr_a
        sta     $575d
        lda     #$ff
        sta     $575b
@4ca8:  lda     $2686,y
        sta     $575a
        sta     $5761
        lda     $890c
        beq     @4cce
        lda     $2686,y
        sta     $2c
        lda     $2687,y
        sta     $2d
        lda     $268a,y
        jsr     _c14b73
        ora     $5758
        sta     $5758
        bra     @4cda
@4cce:  lda     $2687,y
        jsr     GetTextColor
        ora     $5758
        sta     $5758
@4cda:  jsr     InitListTextTfr
        jsr     DrawListText
        ply
        rts

; ------------------------------------------------------------------------------

; [ draw one row of rage menu list ]

DrawRageListText:
@4ce2:  phy
        asl
        tay
        clr_ax
@4ce7:  lda     f:RageListText,x
        sta     $5755,x
        inx
        cpx     #$000d
        bne     @4ce7
        lda     $257e,y
        sta     $575a
        lda     $257f,y
        sta     $5760
        jsr     InitListTextTfr
        jsr     DrawListText
        ply
        rts

; ------------------------------------------------------------------------------

; [ draw one row of dance menu text ]

DrawDanceListText:
@4d08:  phy
        asl
        tay
        clr_ax
@4d0d:  lda     f:DanceListText,x
        sta     $5755,x
        inx
        cpx     #$000d
        bne     @4d0d
        lda     $267e,y
        sta     $575a
        lda     $267f,y
        sta     $5760
        jsr     InitListTextTfr
        jsr     DrawListText
        ply
        rts

; ------------------------------------------------------------------------------

; [  ]

_c14d2e:
madou_line_mess_set:
@4d2e:  phy
        asl
        tay
        clr_ax
@4d33:  lda     f:MagitekListText,x
        sta     $5755,x
        inx
        cpx     #$000d
        bne     @4d33
        tya
        tax
        lda     $62ca
        asl5
        tay
        lda     $2eae,y
        bne     @4d60
        lda     f:TerraMagitekAttackTbl,x
        sta     $575a
        lda     f:TerraMagitekAttackTbl+1,x
        sta     $5760
        bra     @4d6e
@4d60:  lda     f:DefaultMagitekAttackTbl,x
        sta     $575a
        lda     f:DefaultMagitekAttackTbl+1,x
        sta     $5760
@4d6e:  jsr     InitListTextTfr
        jsr     DrawListText
        ply
        rts

; ------------------------------------------------------------------------------

; [  ]

DrawLoreListText:
@4d76:  phy
        sta     $40
        lda     $62ca
        asl
        tax
        lda     $40
        longa
        asl2
        clc
        adc     f:CharSpellListPtrs,x
        tay
        shorta0
        tax
@4d8e:  lda     f:LoreListText,x
        sta     $5755,x
        inx
        cpx     #$000e
        bne     @4d8e
        lda     $216a,y
        sta     $575b
        lda     $216b,y
        jsr     GetTextColor
        ora     $5759
        sta     $5759
        jsr     InitListTextTfr
        jsr     DrawListText
        ply
        rts

; ------------------------------------------------------------------------------

; [  ]

DrawMagicListText:
@4db5:  phy
        asl
        sta     $40
        lda     $62ca
        asl
        tax
        lda     $40
        longa
        asl2
        clc
        adc     f:CharSpellListPtrs,x
        tay
        shorta0
        tax
@4dce:  lda     f:MagicListText,x
        sta     $5755,x
        inx
        cpx     #$0010
        bne     @4dce
        lda     $2092,y
        sta     $575a
        lda     $2096,y
        sta     $5760
        lda     $2093,y
        jsr     GetTextColor
        ora     $5758
        sta     $5758
        lda     $2097,y
        jsr     GetTextColor
        ora     $575e
        sta     $575e
        jsr     InitListTextTfr
        jsr     DrawListText
        ply
        rts

; ------------------------------------------------------------------------------

; [ init list text transfer to VRAM ]

InitListTextTfr:
@4e07:  ldx     #$5755
        stx     $88dd
        ldx     #$5e4d
        stx     $88df
        lda     #$20
        sta     $88e1
        lda     #$21
        sta     $88e2
        rts

; ------------------------------------------------------------------------------

; [ draw magic list when summon window is open ]

DrawSummonMagicListText:
@4e1e:  clr_ax
@4e20:  lda     f:SummonMagicListText,x
        sta     $5755,x
        inx
        cpx     #$0017
        bne     @4e20
        lda     $62ca
        asl
        tax
        longa
        lda     f:CharSpellListPtrs,x
        tax
        shorta0
        lda     $208e,x
        sta     $5761
        lda     $2091,x
        sta     $576a
        lda     $208f,x
        jsr     GetTextColor
        ora     $575f
        sta     $575f
        jsr     InitListTextTfr
        jmp     DrawListText

; ------------------------------------------------------------------------------

; [ load menu text (bg3) ]

; A: text region
;      $00: monster names
;      $01: character names
;      $02: character current hp
;      $03: character atb gauges or max hp
;      $04: battle command names (window mode)
;      $05:
;      $06: equip menu text
;      $07: current/max mp
;      $08: def. command
;      $09: row command
;      $0a: character 1 mp
;      $0b: character 2 mp
;      $1c: character 3 mp
;      $1d: character 4 mp
;      $0e: character 1 hp
;      $0f: character 2 hp
;      $10: character 3 hp
;      $11: character 4 hp
;      $12: character 1 atb gauge
;      $13: character 2 atb gauge
;      $14: character 3 atb gauge
;      $15: character 4 atb gauge
;      $16: character 1 morph gauge
;      $17: character 2 morph gauge
;      $18: character 3 morph gauge
;      $19: character 4 morph gauge
;      $1a: character 1 condemned gauge
;      $1b: character 2 condemned gauge
;      $1c: character 3 condemned gauge
;      $1d: character 4 condemned gauge
;      $1e: swdtech window text
;      $1f: battle command names (short mode)
;      $20: battle command names (controlling a monster)
;      $21: clear status names
;      $22: character status window (item/magic target select)

LoadMenuText:
@4e5a:  pha
        asl
        tax
        lda     #$c2
        sta     $12
        longa
        lda     f:MenuTextPtrs,x
        sta     $10
        ldy     $00
@4e6b:  lda     [$10],y
        sta     $56d5,y
        iny2
        cpy     #$0040
        bne     @4e6b
        shorta0
        pla
        asl2
        tax
        lda     f:MenuTextBufData,x
        sta     $88d9
        lda     f:MenuTextBufData+1,x
        sta     $88da
        lda     f:MenuTextBufData+2,x
        sta     $88db
        lda     #$21
        sta     $88dc
        ldx     #$56d5
        stx     $88d7
        rts

; ------------------------------------------------------------------------------

; [  ]

_c14e9f:
get_chg_def_para:
@4e9f:  lda     $2f2e
        beq     @4eae
        lda     #$17
        jsr     _c150fb
        lda     #$05
        jmp     _c15165
@4eae:  ldx     $62ca
        lda     $890f,x     ; cursor position
        pha
        clc
        adc     #$0a
        jsr     _c150fb
        pla
        clc
        adc     #$05
        jmp     _c15165

; ------------------------------------------------------------------------------

; [  ]

_c14ec2:
set_cgadd_sub:
@4ec2:  ldx     $00
@4ec4:  sta     $8bf1,x
        sta     $8c39,x
        sta     $8c81,x
        sta     $8cc9,x
        inx4
        cpx     #$0048
        bne     @4ec4
        rts

; ------------------------------------------------------------------------------

; [ update menu window $25: open swdtech window ]

UpdateMenuWindow_25:
ken_window_open:
@4eda:  lda     #$83
        jsr     _c14ec2
        lda     #$12
        jsr     _c150fb
        lda     #$09
        jsr     _c15165
        inc     $7bdb
        jsr     _c24872       ; init bg tile data for swdtech numerals
        jmp     _c14f77

; ------------------------------------------------------------------------------

; [ update menu window $26: close swdtech window ]

UpdateMenuWindow_26:
ken_window_close:
@4ef2:  inc     $10
        lda     #$13
        jsr     _c150fb
        inc     $7bdb
        lda     #$09
        jsr     _c15165
        jsr     _c14f8c       ; close menu window
        jmp     _c148f2

; ------------------------------------------------------------------------------

; [ update menu window $17: open row window ]

UpdateMenuWindow_17:
chg_window_open:
@4f07:  lda     #$83
        jsr     _c14ec2
        jsr     _c14e9f
        jsr     _c148cb
        inc     $7bdb
        jmp     _c14f77

; ------------------------------------------------------------------------------

; [ update menu window $19: open def. window ]

UpdateMenuWindow_19:
def_window_open:
@4f18:  lda     #$83
        jsr     _c14ec2
        jsr     _c14e9f
        jsr     _c148a4
        lda     $2f2e
        beq     @4f2c
        lda     #$60
        bra     @4f2e
@4f2c:  lda     #$30
@4f2e:  sta     $10
        stz     $11
        longa
        lda     $7bd2
        sec
        sbc     $10
        sta     $7bd2
        shorta0
        inc     $7bdb
        jmp     _c14f77

; ------------------------------------------------------------------------------

; [ update menu window $18/$1a: close row/def. window ]

UpdateMenuWindow_18:
UpdateMenuWindow_1a:
chg_window_close:
def_window_close:
@4f46:  inc     $10
        lda     #$01
        jsr     _c15165
        lda     $2f2e
        beq     @4f5a
        lda     #$18
        jsr     _c150fb
        clr_a
        bra     @4f68
@4f5a:  ldx     $62ca
        lda     $890f,x
        pha
        clc
        adc     #$0e
        jsr     _c150fb
        pla
@4f68:  clc
        adc     #$05
        jsr     _c15165
        inc     $7bdb
        jsr     _c14f8c       ; close menu window
        jmp     _c148f2

; ------------------------------------------------------------------------------

; [ open menu window ]

_c14f77:
set_open_flag:
@4f77:  inc     $7bbb

_c14f7a:
@4f7a:  lda     #$01
        sta     $7bf0
        stz     $7b85
        inc     $7bdd
        inc     $7bd1
        rts

; ------------------------------------------------------------------------------

; [ close menu window ]

set_close_flag:
@4f89:  inc     $7bbb

_c14f8c:
set_close_flag2:
@4f8c:  lda     #$02
        sta     $7bf0
        stz     $7b85
        inc     $7bdd
        inc     $7bd1
        rts

; ------------------------------------------------------------------------------

; [ update menu window $0d: open esper window ]

UpdateMenuWindow_0d:
summon_window_open:
@4f9b:  lda     #$08
        jsr     _c150fb
        lda     #$03
        jsr     _c15165
        jmp     _c14f7a       ; open menu window

; ------------------------------------------------------------------------------

; [ update menu window $0e: close esper window ]

UpdateMenuWindow_0e:
summon_window_close:
@4fa8:  inc     $10
        lda     #$09
        jsr     _c150fb
        lda     #$03
        jsr     _c15165
        jmp     _c14f8c       ; close menu window

; ------------------------------------------------------------------------------

; [ update menu window $09: open weapon change window ]

UpdateMenuWindow_09:
hand_window_open:
@4fb7:  lda     #$05
        jsr     _c150fb
        lda     #$04
        jsr     _c15165
        jmp     _c14f7a       ; open menu window

; ------------------------------------------------------------------------------

; [ update menu window $0a: close weapon change window ]

UpdateMenuWindow_0a:
hand_window_close:
@4fc4:  inc     $10
        lda     #$07
        jsr     _c150fb
        lda     #$04
        jsr     _c15165
        jmp     _c14f8c       ; close menu window

; ------------------------------------------------------------------------------

; [ set bg1 scroll hdma data ]

; +X: horizontal scroll position
; +Y: vertical scroll position

_c14fd3:
throt_line_set:
@4fd3:  longa
        stx     $22
        sty     $24
        ldx     #$028c
@4fdc:  lda     $22
        sta     $43f5,x
        lda     $24
        sta     $43f7,x
        inx4
        cpx     #$034c      ; copy for 211 scanlines
        bne     @4fdc
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ update menu window $04: open slot window ]

UpdateMenuWindow_04:
throt_window_open:
@4ff3:  jsr     _c146a5
        ldy     #$004c
        ldx     #$0100
        jsr     _c14fd3
        lda     #$02
        jsr     _c150fb
        lda     #$02
        jsr     _c15165
        jmp     _c14f7a       ; open menu window

; ------------------------------------------------------------------------------

; [  ]

_c1500c:
mess_window_open_scr_init:
@500c:  lda     #$04
        sta     $7afd
        shorti
        longa
        phd
        lda     #$0100      ; nonzero dp
        pha
        pld
        ldx     #$00
        lda     #$0060
@5020:  sta     $02,x
        sta     $51f7,x
        inx4
        cpx     #$c0
        bne     @5020
@502d:  sta     $02,x
        inx4
        cpx     #$00
        bne     @502d
        pld
        shorta0
        longi
        rts

; ------------------------------------------------------------------------------

; [ update menu window $27: open dialog window ]

UpdateMenuWindow_27:
mess_window_open:
@503e:  clr_ax
        longa
@5042:  lda     $4d61,x
        sta     $52d5,x
        inx2
        cpx     #$0100
        bne     @5042
        shorta0
        jsr     _c1500c
        lda     #$14
        jsr     _c150fb
        lda     #$02
        jsr     _c15165
        jmp     _c14f7a       ; open menu window

; ------------------------------------------------------------------------------

; [ update menu window $28: close dialog window ]

UpdateMenuWindow_28:
mess_window_close:
@5062:  inc     $10
        lda     #$15
        jsr     _c150fb
        clr_ax
        longa
@506d:  lda     $52d5,x
        sta     $51d5,x
        inx2
        cpx     #$0100
        bne     @506d
        shorta0
        lda     #$02
        jsr     _c15165
        inc     $7bee
        jmp     _c14f8c       ; close menu window

; ------------------------------------------------------------------------------

; [ update menu window $07/$13/$15/$1b/$1d/$20: open item/rage/dance/magitek/throw/tools window ]

UpdateMenuWindow_07:
UpdateMenuWindow_13:
UpdateMenuWindow_15:
UpdateMenuWindow_1b:
UpdateMenuWindow_1d:
UpdateMenuWindow_20:
item_window_open:
riot_window_open:
dance_window_open:
madou_window_open:
throw_window_open:
machine_window_open:
@5088:  jsr     _c146a5
        lda     #$03
        jsr     _c150fb
        lda     #$02
        jsr     _c15165
        jmp     _c14f7a       ; open menu window

; ------------------------------------------------------------------------------

; [ update menu window $0b/$11: open magic/lore window ]

UpdateMenuWindow_0b:
UpdateMenuWindow_11:
magic_window_open:
learning_window_open:
@5098:  lda     #$82
        jsr     _c14ec2
        jsr     _c146a5
        lda     #$04
        jsr     _c150fb
        lda     #$02
        jsr     _c15165
        jmp     _c14f7a       ; open menu window

; ------------------------------------------------------------------------------

; [ update menu window $06:  ]

UpdateMenuWindow_06:
throt_window_close:
@50ad:  clr_axy
        jsr     _c14fd3
        stz     $8992
; fall through

; ------------------------------------------------------------------------------

; [ update menu window: close item/magic/lore/rage/dance/magitek/throw/tools window ]

UpdateMenuWindow_08:
UpdateMenuWindow_0c:
UpdateMenuWindow_12:
UpdateMenuWindow_14:
UpdateMenuWindow_16:
UpdateMenuWindow_1c:
UpdateMenuWindow_1e:
UpdateMenuWindow_21:
item_window_close:
magic_window_close:
@50b6:  inc     $10
        lda     #$06
        jsr     _c150fb
        lda     #$02
        jsr     _c15165
        inc     $7bee
        jmp     _c14f8c       ; close menu window

; ------------------------------------------------------------------------------

; [ update menu window $1f:  ]

UpdateMenuWindow_1f:
@50c8:  jsr     _c148f2
        jmp     _c150e9       ; go to next menu state

; ------------------------------------------------------------------------------

; [ update menu window $01: window opening ]

UpdateMenuWindow_01:
@50ce:  lda     $7bd1
        ora     $7bdd
        bne     @50dc
        stz     $7b98
        jsr     _c150e9       ; go to next menu state
@50dc:  rts

; ------------------------------------------------------------------------------

; [ update menu window $02: window closing ]

UpdateMenuWindow_02:
@50dd:  lda     $7bd1
        ora     $7bdd
        bne     @50e8
        jsr     _c150e9       ; go to next menu state
@50e8:  rts

; ------------------------------------------------------------------------------

; [ go to next menu state ]

_c150e9:
UpdateMenuWindow_10:
data_sift:
@50e9:  clr_ax
        sta     $7bff       ; add state 0 to end of queue
@50ee:  lda     $7bf1,x     ; move all items in queue up one slot
        sta     $7bf0,x
        inx
        cpx     #$000f
        bne     @50ee
        rts

; ------------------------------------------------------------------------------

; [ load menu window position data ]

; $10: 0 = window opening, 1 = window closing
;   A: window type
;        $00: no menu (open)
;        $01: command select (open)
;        $02: slot (open)
;        $03: item/rage/dance/magitek/throw/tools (open)
;        $04: magic/lore (open)
;        $05: weapon change (open)
;        $06: item/rage/dance/magitek/throw/tools/magic/lore/slot (close)
;        $07: weapon change (close)
;        $08: esper (open)
;        $09: esper (close)
;        $0a: row/def, slot 1 (open)
;        $0b: row/def, slot 2 (open)
;        $0c: row/def, slot 3 (open)
;        $0d: row/def, slot 4 (open)
;        $0e: row/def, slot 1 (close)
;        $0f: row/def, slot 2 (close)
;        $10: row/def, slot 3 (close)
;        $11: row/def, slot 4 (close)
;        $12: swdtech (open)
;        $13: swdtech (close)
;        $14: dialog (open)
;        $15: dialog (close)
;        $16: dialog (close, go to command select)
;        $17: row/def, short (open)
;        $18: row/def, short (close)
;        $19: character select (open)
;        $1a: character select (close, go to item select)
;        $1b: character select (open, go to magic select)

_c150fb:
window_open_data_set:
@50fb:  asl2
        tax
        lda     $10
        beq     @5133       ; branch if menu is opening
        longa
        lda     f:_c2dea2,x
        sta     $7bd2       ; menu window horizontal scroll position (pixels)
        lda     f:_c2dea2+2,x
        sta     $7bd4       ; menu window vertical scroll position (pixels)
        lda     f:_c2de32+2,x
        sta     $7bd6       ; menu window height (tiles)
        asl5
        clc
        adc     f:_c2de32,x
        sec
        sbc     #$0010
        sta     $7bd7       ; menu window bottom (pixels)
        lda     f:_c2de32,x
        sta     $7bd9       ; menu window top (pixels)
        bra     @515e
@5133:  longa
        lda     f:_c2dea2,x
        sta     $7bd2       ; menu window horizontal scroll position (pixels)
        lda     f:_c2dea2+2,x
        sta     $7bd4       ; menu window vertical scroll position (pixels)
        lda     f:_c2de32+2,x
        sta     $7bd6       ; menu window height (tiles)
        dec
        asl4
        clc
        adc     f:_c2de32,x
        sta     $7bd7       ; menu window bottom (pixels)
        clc
        adc     #$0010
        sta     $7bd9       ; menu window top (pixels)
@515e:  stz     $7bdb       ; bg2 update
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ load menu text position data ]

; $10: 0 = window opening, 1 = window closing
;   A: text type
;        $00: command select
;        $01:
;        $02: magic/tools/dance/rage/lore/item/slot/dialog
;        $03: esper
;        $04: weapon change
;        $05: row/def, slot 1
;        $06: row/def, slot 2
;        $07: row/def, slot 3
;        $08: row/def, slot 4
;        $09: swdtech
;        $0a: character select (item/magic)

_c15165:
main_window_open_data_set:
@5165:  asl3
        tax
        stz     $7beb
        lda     $10
        beq     @51ad       ; branch if menu is opening
        longa
        lda     f:_c2ddda,x
        clc
        adc     #$0010
        sta     $7be2
        lda     f:_c2ddda+2,x
        clc
        adc     #$0010
        sta     $7be4
        lda     f:_c2ddda+4,x
        asl5
        pha
        clc
        adc     f:_c2ddda,x
        sec
        sbc     #$0020
        sta     $7bde
        pla
        clc
        adc     f:_c2ddda+2,x
        sec
        sbc     #$0020
        sta     $7be0
        bra     @51d8
@51ad:  longa
        lda     f:_c2ddda+4,x   ; text height (tiles)
        dec                 ; convert to pixels
        asl4
        pha
        clc
        adc     f:_c2ddda,x   ; add source address
        sta     $7bde       ;
        clc
        adc     #$0010
        sta     $7be2
        pla
        clc
        adc     f:_c2ddda+2,x
        sta     $7be0
        clc
        adc     #$0010
        sta     $7be4
@51d8:  lda     f:_c2ddda,x
        clc
        adc     #$0010
        sta     $7be7
        lda     f:_c2ddda+2,x
        clc
        adc     #$0010
        sta     $7be9
        lda     f:_c2ddda+4,x
        dec
        asl5
        dec
        sta     $7bec
        shorta0
        lda     f:_c2ddda+4,x
        dec
        sta     $7be6
        stz     $7bee
        rts

; ------------------------------------------------------------------------------

; [ clear menu window tile data buffer ]

_c1520b:
window_tmp_buf_clr:
@520b:  longa
        ldx     $00
@520f:  lda     #$00ff
        sta     $8d13,x
        inx2
        cpx     #$0300
        bne     @520f
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ update menu window $29: get command window setting ]

UpdateMenuWindow_29:
@5220:  ldx     $62ca       ; active character
        lda     $62cc,x     ; branch if character is controlling a monster
        bne     _523d
        lda     $2f2e       ; command setting
        beq     _5235       ; branch if window
        lda     #$01
        sta     $64b8       ; use short window
        jmp     _c150e9       ; go to next menu state

; ------------------------------------------------------------------------------

; [ update menu window $2a:  ]

UpdateMenuWindow_2a:
_5235:  lda     #$02
        sta     $64b8       ; use normal window
        jmp     _c150e9       ; go to next menu state

_523d:  lda     #$03
        sta     $64b8       ; use control window
        jmp     _c150e9       ; go to next menu state

; ------------------------------------------------------------------------------

; [ init command select menu window tile data ]

_c15245:
set_short_frame:
@5245:  clr_ax
        longa
@5249:  lda     $8d13,x     ; copy buffer to window mode tile data
        sta     $9213,x
        inx2
        cpx     #$0200
        bne     @5249
        shorta
        clr_a
        jsr     DrawMenuWindow
        lda     #$01
        jsr     DrawMenuWindow
        lda     #$0e
        jsr     DrawMenuWindow
        clr_ax
        longa
@526a:  lda     $8d13,x     ; copy buffer to relm's "command" mode tile data
        sta     $9413,x
        inx2
        cpx     #$0200
        bne     @526a
        shorta
        clr_a
        jsr     DrawMenuWindow
        lda     #$01
        jsr     DrawMenuWindow
        lda     #$0d
        jsr     DrawMenuWindow
        clr_ax
        longa
@528b:  lda     $8d13,x     ; copy buffer to short mode tile data
        sta     $9013,x
        inx2
        cpx     #$0200
        bne     @528b
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ init menu window tile data ]

InitMenuWindows:
@529c:  jsr     _c1520b       ; clear menu window tile data buffer
        clr_a
        jsr     DrawMenuWindow
        lda     #$01
        jsr     DrawMenuWindow
        clr_a
        jsr     TfrMenuTiles       ; copy menu window tile data to vram (closed menu)
        lda     #$02
        jsr     DrawMenuWindow
        jsr     _c15245       ; init command select menu window tile data
        lda     #$01
        jsr     TfrMenuTiles       ; copy menu window tile data to vram (command select)
        lda     #$03
        jsr     DrawMenuWindow
        jsr     _c15335       ; init slot window tile data
        lda     #$02
        jsr     TfrMenuTiles       ; copy menu window tile data to vram (slot)
        lda     #$04
        jsr     DrawMenuWindow
        lda     #$03
        jsr     TfrMenuTiles       ; copy menu window tile data to vram (item/dialog/etc.)
        lda     #$07
        jsr     DrawMenuWindow
        lda     #$05
        jsr     DrawMPWindow
        lda     #$04
        jsr     TfrMenuTiles       ; copy menu window tile data to vram (magic/lore select)
        lda     #$06
        jsr     DrawMenuWindow
        lda     #$05
        jsr     TfrMenuTiles       ; copy menu window tile data to vram (weapon select)
        lda     #$08
        jsr     DrawMenuWindow
        lda     #$06
        jsr     TfrMenuTiles       ; copy menu window tile data to vram (esper)
        jsr     _c1520b       ; clear menu window tile data buffer
        lda     #$09
        jsr     DrawMenuWindow
        lda     #$07
        jsr     TfrMenuTiles       ; copy menu window tile data to vram (row/def.)
        jsr     _c1520b       ; clear menu window tile data buffer
        lda     #$0a
        jsr     DrawMenuWindow
        lda     #$08
        jmp     TfrMenuTiles       ; copy menu window tile data to vram (swdtech)

; ------------------------------------------------------------------------------

; [ init slot window tile data (one row) ]

; +X: tile data offset
; +A: tile data

_c1530d:
one_sp_frame_set:
@530d:  sta     $8d65,x     ; first slot
        sta     $8d6f,x     ; second slot
        sta     $8d79,x     ; third slot
        inc
        sta     $8d67,x     ; second tile
        sta     $8d71,x
        sta     $8d7b,x
        inc
        sta     $8d69,x     ; third tile
        sta     $8d73,x
        sta     $8d7d,x
        inc
        sta     $8d6b,x     ; fourth tile
        sta     $8d75,x
        sta     $8d7f,x
        rts

; ------------------------------------------------------------------------------

; [ init slot window tile data ]

_c15335:
sp_window_frame_set:
@5335:  clr_ax
        longa
        ldx     #$0000
        lda     #$2a68
        jsr     _c1530d       ; set slot window tile data (1st row)
        ldx     #$0040
        lda     #$2a78
        jsr     _c1530d       ; set slot window tile data (2nd row)
        ldx     #$0080
        lda     #$2a6c
        jsr     _c1530d       ; set slot window tile data (3rd row)
        ldx     #$00c0
        lda     #$2a7c
        jsr     _c1530d       ; set slot window tile data (4th row)
        ldx     #$0100
        lda     #$aa78
        jsr     _c1530d       ; set slot window tile data (5th row)
        ldx     #$0140
        lda     #$aa68
        jsr     _c1530d       ; set slot window tile data (6th row)
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ copy menu window tile data to vram ]

; A: window location in vram
;      $00: closed menu
;      $01: command select
;      $02: slot
;      $03: item/dialog/etc.
;      $04: magic/lore select
;      $05: weapon select
;      $06: esper
;      $07: row/def. (bg1)
;      $08: swdtech (bg1)

TfrMenuTiles:
@5373:  asl
        tax
        longa
        lda     f:MenuWindowVRAMPtrs,x
        tay
        shorta0
        ldx     #$0200      ; size = $0200
        stx     $36
        ldx     #$8d13      ; source = $7e8d13
        lda     #$7e
        jmp     TfrVRAM

; ------------------------------------------------------------------------------

; [ load menu window tile data (messages at top of screen) ]

; A: window number (see below)

DrawMsgWindow:
@538c:  asl2
        tax
        lda     #$80
        sta     $7c
        lda     #$28        ; tiles are priority 1, palette 2, tile index +#$0000
        bra     DrawWindowMain

; ------------------------------------------------------------------------------

; [ load menu window tile data (mp needed) ]

; priority 0 allows bg1 text to be shown above bg2
; A: window number (see below)

DrawMPWindow:
@5397:  stz     $7c
        asl2
        tax
        lda     #$0a        ; tiles are priority 0, palette 2, tile index +#$0200
        bra     DrawWindowMain

; ------------------------------------------------------------------------------

; [ load menu window tile data ]

; A: window number
;      $00: monster name
;      $01: character name/hp/gauge
;      $02: command (window mode)
;      $03: slot window
;      $04: item/dialog/etc.
;      $05: magic/lore mp required
;      $06: weapon select
;      $07: magic/lore select
;      $08: esper
;      $09: row/def. (all positions)
;      $0a: swdtech
;      $0b: wide message (top of screen)
;      $0c: narrow message (top of screen)
;      $0d: command (short mode)
;      $0e: command (relm's "command" ability)

DrawMenuWindow:
@53a0:  stz     $7c
        asl2
        tax
        lda     #$2a        ; tiles are priority 1, palette 2, tile index +#$0200
; fallthrough

DrawWindowMain:
_53a7:  sta     $7bae
        ldy     $00
@53ac:  lda     f:MenuWindowTbl,x
        sta     $88d3,y
        inx
        iny
        cpy     #4
        bne     @53ac
        ldx     $88d5
        stx     $10
        stz     $14
        lda     $88d4
        dec2
        sta     $13
        longa
        lda     f:WindowBorderTileTbl                 ; top border
        sta     $22
        lda     f:WindowBorderTileTbl+2
        sta     $24
        shorta0
        lda     $88d3
        sta     $12
        jsr     DrawWindowRow
        lda     #$40
        jsr     IncWindowTilePtr
@53e6:  lda     $14
        and     #$0f
        tax
        longa
        lda     f:WindowTileTbl,x
        sta     $22
        lda     f:WindowTileTbl+2,x
        sta     $24
        shorta0
        lda     $88d3
        sta     $12
        jsr     DrawWindowRow
        lda     $14
        clc
        adc     #$04
        sta     $14
        lda     #$40
        jsr     IncWindowTilePtr
        dec     $13
        bne     @53e6
        longa
        lda     f:WindowBorderTileTbl+4                 ; bottom border
        sta     $22
        lda     f:WindowBorderTileTbl+6
        sta     $24
        shorta0
        lda     $88d3
        sta     $12
        jsr     DrawWindowRow
        ldx     $88d5
        stx     $10
        lda     $88d4
        sta     $12
        lda     f:WindowBorderTileTbl+12                 ; left border
        sta     $22
        lda     f:WindowBorderTileTbl+13
        sta     $23
        ldy     $00
        jsr     DrawWindowCol
        ldx     $88d5
        stx     $10
        lda     $88d4
        sta     $12
        lda     f:WindowBorderTileTbl+16                 ; right border
        sta     $22
        lda     f:WindowBorderTileTbl+17
        sta     $23
        lda     $88d3
        dec
        asl
        tay
        jsr     DrawWindowCol
        ldx     $88d5
        stx     $10
        ldy     $00
        lda     f:WindowBorderTileTbl+8                 ; top left corner
        jsr     DrawWindowTile
        lda     $88d3
        dec
        asl
        tay
        lda     f:WindowBorderTileTbl+9                 ; top right corner
        jsr     DrawWindowTile
        lda     $88d4
        dec
        longa
        asl6
        clc
        adc     $88d5
        sta     $10
        clr_ay
        shorta
        lda     f:WindowBorderTileTbl+10                 ; bottom left corner
        jsr     DrawWindowTile
        lda     $88d3
        dec
        asl
        tay
        lda     f:WindowBorderTileTbl+11                 ; bottom right corner
        jsr     DrawWindowTile
        rts

; ------------------------------------------------------------------------------

; [ add to window tile pointer ]

IncWindowTilePtr:
@54ad:  longa
        clc
        adc     $10
        sta     $10
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ draw a row of window tiles ]

; $12: row width

DrawWindowRow:
@54b8:  clr_axy
        shorti
@54bd:  lda     $22,x
        jsr     DrawWindowTile
        txa
        inc
        and     #$03
        tax
        dec     $12
        bne     @54bd
        longi
        rts

; ------------------------------------------------------------------------------

; [ draw a column of window tiles ]

DrawWindowCol:
@54ce:  clr_ax
@54d0:  lda     $22,x
        clc
        adc     $7c
        sta     ($10),y
        iny
        lda     $7bae
        sta     ($10),y
        iny
        longa
        tya
        clc
        adc     #$003e
        tay
        shorta0
        txa
        inc
        and     #$01
        tax
        dec     $12
        bne     @54d0
        rts

; ------------------------------------------------------------------------------

; [ draw one window tile ]

DrawWindowTile:
@54f3:  clc
        adc     $7c
        sta     ($10),y
        iny
        lda     $7bae
        sta     ($10),y
        iny
        rts

; ------------------------------------------------------------------------------

; menu window tile numbers
WindowTileTbl:
@5500:  .byte   $23,$20,$21,$22
        .byte   $27,$24,$25,$26
        .byte   $2b,$28,$29,$2a
        .byte   $2f,$2c,$2d,$2e

; menu border tile numbers (top, bottom, corners, left side, right side)
WindowBorderTileTbl:
@5510:  .byte   $32,$31,$32,$31
        .byte   $3a,$39,$3a,$39
        .byte   $30,$33,$38,$3b
        .byte   $36,$34,$36,$34
        .byte   $37,$35,$37,$35

; ------------------------------------------------------------------------------

; [ update menu state ]

UpdateMenuState:
@5524:  lda     $7bc2       ; menu cursor state
        asl
        tax
        jmp     (.loword(UpdateMenuStateTbl),x)

; ------------------------------------------------------------------------------

; update menu state jump table
UpdateMenuStateTbl:
@552c:  .addr   UpdateMenuState_00
        .addr   UpdateMenuState_01
        .addr   UpdateMenuState_02
        .addr   UpdateMenuState_03
        .addr   UpdateMenuState_04
        .addr   UpdateMenuState_05
        .addr   UpdateMenuState_06
        .addr   UpdateMenuState_07
        .addr   UpdateMenuState_08
        .addr   UpdateMenuState_09
        .addr   UpdateMenuState_0a
        .addr   UpdateMenuState_0b
        .addr   UpdateMenuState_0c
        .addr   UpdateMenuState_0d
        .addr   UpdateMenuState_0e
        .addr   UpdateMenuState_0f
        .addr   UpdateMenuState_10
        .addr   UpdateMenuState_11
        .addr   UpdateMenuState_12
        .addr   UpdateMenuState_13
        .addr   UpdateMenuState_14
        .addr   UpdateMenuState_15
        .addr   UpdateMenuState_16
        .addr   UpdateMenuState_17
        .addr   UpdateMenuState_18
        .addr   UpdateMenuState_19
        .addr   UpdateMenuState_1a
        .addr   UpdateMenuState_1b
        .addr   UpdateMenuState_1c
        .addr   UpdateMenuState_1d
        .addr   UpdateMenuState_1e
        .addr   UpdateMenuState_1f
        .addr   UpdateMenuState_20
        .addr   UpdateMenuState_21
        .addr   UpdateMenuState_22
        .addr   UpdateMenuState_23
        .addr   UpdateMenuState_24
        .addr   UpdateMenuState_25
        .addr   UpdateMenuState_26
        .addr   UpdateMenuState_27
        .addr   UpdateMenuState_28
        .addr   UpdateMenuState_29
        .addr   UpdateMenuState_2a
        .addr   UpdateMenuState_2b
        .addr   UpdateMenuState_2c
        .addr   UpdateMenuState_2d
        .addr   UpdateMenuState_2e
        .addr   UpdateMenuState_2f
        .addr   UpdateMenuState_30
        .addr   UpdateMenuState_31
        .addr   UpdateMenuState_32
        .addr   UpdateMenuState_33
        .addr   UpdateMenuState_34
        .addr   UpdateMenuState_35
        .addr   UpdateMenuState_36
        .addr   UpdateMenuState_37
        .addr   UpdateMenuState_38
        .addr   UpdateMenuState_39
        .addr   UpdateMenuState_3a
        .addr   UpdateMenuState_3b
        .addr   UpdateMenuState_3c
        .addr   UpdateMenuState_3d
        .addr   UpdateMenuState_3e
        .addr   UpdateMenuState_3f
        .addr   UpdateMenuState_40
        .addr   UpdateMenuState_41

; ------------------------------------------------------------------------------

; [ update menu state $3f: open character status window ]

UpdateMenuState_3f:
@55b0:  lda     #$2b
        sta     $7bf0
        lda     #$12
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $40: close character status window ]

UpdateMenuState_40:
@55ba:  lda     #$2c
        sta     $7bf0
        lda     $ecba                   ; status menu type (item or magic)
        asl
        clc
        adc     #$02                    ; show item or magic window (2 or 4)
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $32:  ]

UpdateMenuState_32:
@55c9:  clr_ax
        lda     #$4c
@55cd:  sta     $5ffd,x
        sta     $6007,x
        sta     $6011,x
        inx2
        cpx     #$0008
        bne     @55cd
        lda     #$01
        sta     $7b95
        sta     $7b97
        sta     $7b8b
        sta     $8992
        lda     #$80
        sta     $7b83
        lda     $800e
        and     #$7f
        sta     $800e
        lda     #$0c
        sta     $7b8a
        stz     $7b8f
        stz     $7b90
        stz     $7b91
        stz     $7b8c
        stz     $7b8d
        stz     $7b8e
        stz     $7b92
        stz     $7b93
        stz     $7b94
        jmp     GoToNextMenuState

; ------------------------------------------------------------------------------

; [ update menu state $35:  ]

UpdateMenuState_35:
@561b:  stz     $7b82
        lda     #$25
        sta     $7bf0
        lda     #$10
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $36: close swdtech menu ]

UpdateMenuState_36:
CloseBushidoWindow:
@5628:  lda     #$26
        sta     $7bf0
        clr_a
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $22:  ]

UpdateMenuState_22:
@5631:  lda     #$17
        sta     $7bf0
        lda     #$0b
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $25:  ]

UpdateMenuState_25:
@563b:  lda     #$19
        sta     $7bf0
        lda     #$0c
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $0b: open equip window ]

UpdateMenuState_0b:
OpenEquipWindow:
@5645:  jsr     DrawEquipListText
        ldx     #$7e40
        stx     $7baa
        inc     $7ba9
        lda     #$09
        sta     $7bf0
        lda     #$03
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $10:  ]

UpdateMenuState_10:
@565b:  stz     $7bcb
        lda     #$22
        sta     $7bf0
        lda     #$01
        sta     $7bc2
        rts

; ------------------------------------------------------------------------------

; [ update menu state $13: close equip window ]

UpdateMenuState_13:
CloseEquipWindow:
@5669:  lda     #$0a
        sta     $7bf0
        lda     #$08
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $26: close defend window ]

UpdateMenuState_26:
CloseDefendWindow:
@5673:  lda     #$1a
        sta     $7bf0
        clr_a
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $23: close row window ]

UpdateMenuState_23:
CloseRowWindow:
@567c:  lda     #$18
        sta     $7bf0
        clr_a
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $0f: close command menu ]

UpdateMenuState_0f:
CloseCmdWindow:
@5685:  stz     $632f
        lda     #$05
        sta     $7bf0
        lda     #$2a
        sta     $7bf1
        lda     #$05
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $2f: close tools menu ]

UpdateMenuState_2f:
CloseToolsWindow:
@5697:  lda     #$21
        sta     $7bf0
        clr_a
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $07:  ]

UpdateMenuState_07:
@56a0:  lda     #$80
        sta     $7b83
        lda     #$3a
        sta     $7bc2
        lda     #$01
        sta     $7bc3
        lda     #$34
        sta     $7bc4
        rts

; ------------------------------------------------------------------------------

; [ update menu state $34:  ]

UpdateMenuState_34:
@56b5:  jsr     _c140fe
        jsr     _c1411e
        lda     #$33
        sta     $7bc2
        lda     #$02
        sta     $7b95
        sta     $7b97
        stz     $7b8b
        lda     $800e
        and     #$7f
        sta     $800e
        stz     $7b8a
        rts

; ------------------------------------------------------------------------------

; [ update menu state $33:  ]

UpdateMenuState_33:
@56d7:  lda     #$06
        sta     $7bf0
        clr_a
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $2c: close throw window ]

UpdateMenuState_2c:
CloseThrowWindow:
@56e0:  lda     #$1e
        sta     $7bf0
        clr_a
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $14: close magic window ]

UpdateMenuState_14:
CloseMagicWindow:
@56e9:  lda     #$0c
        sta     $7bf0
        clr_a
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $12: close item window ]

UpdateMenuState_12:
CloseItemWindow:
@56f2:  lda     #$08
        sta     $7bf0
        clr_a
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $1a: close lore window ]

UpdateMenuState_1a:
CloseLoreWindow:
@56fb:  lda     #$12
        sta     $7bf0
        clr_a
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $1d: close rage window ]

UpdateMenuState_1d:
CloseRageWindow:
@5704:  lda     #$14
        sta     $7bf0
        clr_a
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $20: close dance window ]

UpdateMenuState_20:
CloseDanceWindow:
@570d:  lda     #$16
        sta     $7bf0
        clr_a
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $29: close magitek window ]

UpdateMenuState_29:
CloseMagitekWindow:
@5716:  lda     #$1c
        sta     $7bf0
        clr_a
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $15: close summon window ]

UpdateMenuState_15:
CloseSummonWindow:
@571f:  lda     #$0e
        sta     $7bf0
        lda     #$04
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [  ]

_c15729:
set_scr_vram_poi:
@5729:  lda     $7ba5
        and     #$03
        asl
        tax
        lda     f:_c18291,x
        sta     $7baa
        lda     f:_c18291+1,x
        sta     $7bab
        inc     $7ba9
        inc     $7ba6
        inc     $7ba5
        lda     $7ba5
        cmp     #$84
        bne     @5753
        stz     $7ba5
        sec
        rts
@5753:  clc
        rts

; ------------------------------------------------------------------------------

; [ update menu state $3b:  ]

UpdateMenuState_3b:
@5755:  lda     #$27
        sta     $7bf0
        lda     #$11
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $3c:  ]

UpdateMenuState_3c:
@575f:  lda     #$28
        sta     $7bf0
        lda     #$11
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ update menu state $09: open item window ]

UpdateMenuState_09:
OpenItemWindow:
@5769:  stz     $7b02
        stz     $890c
        lda     #$09
        sta     $7bc2
        lda     $7ba5
        bmi     @578a
        jsr     _c15a17
        ldx     $62ca
        lda     $8947,x
        sta     $7ba6
        lda     #$80
        sta     $7ba5
@578a:  lda     $7ba6
        jsr     DrawItemListText
        jsr     _c15729
        bcc     @579f
        lda     #$07
        sta     $7bf0
        lda     #$02
        jmp     _c15a2c
@579f:  rts

; ------------------------------------------------------------------------------

; [ update menu state $0d: open magic window ]

UpdateMenuState_0d:
OpenMagicWindow:
@57a0:  lda     #$0d
        sta     $7bc2
        lda     $7ba5
        bmi     @57c4
        jsr     _c18414
        lda     $2095,x
        sta     $6178
        jsr     _c15a17
        ldx     $62ca
        lda     $8913,x
        sta     $7ba6
        lda     #$80
        sta     $7ba5
@57c4:  lda     $7ba6
        jsr     DrawMagicListText
        jsr     _c15729
        bcc     @57d9
        lda     #$0b
        sta     $7bf0
        lda     #$04
        jmp     _c15a2c
@57d9:  rts

; ------------------------------------------------------------------------------

MakeThrowListTbl:
@57da:  .addr   MakeThrowList_00
        .addr   MakeThrowList_01
        .addr   MakeThrowList_02
        .addr   MakeThrowList_03
        .addr   MakeThrowList_04

MakeToolsListTbl:
@57e4:  .addr   MakeToolsList_00
        .addr   MakeToolsList_01
        .addr   MakeToolsList_02
        .addr   MakeToolsList_03
        .addr   MakeToolsList_04

; ------------------------------------------------------------------------------

; [ generate item buffer by filtering inventory ]

_c157ee:
set_buf_item:
@57ee:  stx     $36
        lda     $7ba4
        sta     $38
        lda     $7ba3
        sta     $39
        ldx     $7b9f
        ldy     $7ba1
@5800:  lda     $2687,y     ; check item usage flags
        and     $38
        beq     @581c
        lda     $2686,y     ; item id
        sta     $4005,x
        lda     $2689,y     ; item qty
        sta     $4006,x
        lda     $2688,y     ; item targeting flags
        sta     $4007,x
        inx3
@581c:  inc     $39         ; next item
        iny5
        cpy     $36
        bne     @5800
        stx     $7b9f
        sty     $7ba1
        inc     $7b9e
        lda     $39
        sta     $7ba3
        rts

; ------------------------------------------------------------------------------

; [ generate item list for tools and throw ]

; check items 0-63
MakeToolsList_00:
@5836:  lda     #$40        ; tools flag
        bra     _583c

MakeThrowList_00:
@583a:  lda     #$20        ; throw flag
_583c:  sta     $7ba4
        clr_ax
        stx     $7b9f       ; reset item buffer
        stx     $7ba1
        stz     $7ba3
        ldx     #$0140
        jmp     _c157ee

; check items 64-127
MakeToolsList_01:
MakeThrowList_01:
@5850:  ldx     #$0280
        jmp     _c157ee

; check items 128-191
MakeToolsList_02:
MakeThrowList_02:
@5856:  ldx     #$03c0
        jmp     _c157ee

; check items 192-255
MakeToolsList_03:
MakeThrowList_03:
@585c:  ldx     #$0500
        jsr     _c157ee
        lda     #$ff
@5864:  cpx     #$0300      ; trim item buffer to 256 items
        beq     @5874
        sta     $4005,x
        stz     $4006,x
        inx3
        bra     @5864
@5874:  rts

; ------------------------------------------------------------------------------

; [ update menu state $2b: open throw window ]

UpdateMenuState_2b:
OpenThrowWindow:
@5875:  lda     #$2b
        sta     $7bc2
        lda     $7b9e
        asl
        tax
        jmp     (.loword(MakeThrowListTbl),x)

; ------------------------------------------------------------------------------

; [  ]

MakeThrowList_04:
@5882:  lda     $7ba5
        bmi     @5898
        jsr     _c15a17
        ldx     $62ca
        lda     $8953,x
        sta     $7ba6
        lda     #$80
        sta     $7ba5
@5898:  lda     $7ba6
        jsr     DrawThrowListText
        jsr     _c15729
        bcc     @58b0
        stz     $7b9e
        lda     #$1d
        sta     $7bf0
        lda     #$0e
        jmp     _c15a2c
@58b0:  rts

; ------------------------------------------------------------------------------

; [ update menu state $2e: open tools window ]

UpdateMenuState_2e:
OpenToolsWindow:
@58b1:  lda     #$2e
        sta     $7bc2
        lda     $7b9e
        asl
        tax
        jmp     (.loword(MakeToolsListTbl),x)

; ------------------------------------------------------------------------------

; [  ]

MakeToolsList_04:
@58be:  lda     $7ba5
        bmi     @58d4
        jsr     _c15a17
        ldx     $62ca
        lda     $895f,x
        sta     $7ba6
        lda     #$80
        sta     $7ba5
@58d4:  lda     $7ba6
        jsr     DrawToolsListText
        jsr     _c15729
        bcc     @58ec
        stz     $7b9e
        lda     #$20
        sta     $7bf0
        lda     #$0f
        jmp     _c15a2c
@58ec:  rts

; ------------------------------------------------------------------------------

; [ update menu state $19: open lore window ]

UpdateMenuState_19:
OpenLoreWindow:
@58ed:  lda     #$19
        sta     $7bc2
        lda     $7ba5
        bmi     @5911
        jsr     _c183f7
        lda     $216d,x
        sta     $6178
        jsr     _c15a17
        ldx     $62ca
        lda     $891f,x
        sta     $7ba6
        lda     #$80
        sta     $7ba5
@5911:  lda     $7ba6
        jsr     DrawLoreListText
        jsr     _c15729
        bcc     @5926
        lda     #$11
        sta     $7bf0
        lda     #$07
        jmp     _c15a2c
@5926:  rts

; ------------------------------------------------------------------------------

; [ update menu state $1c: open rage window ]

UpdateMenuState_1c:
OpenRageWindow:
@5927:  lda     #$1c
        sta     $7bc2
        lda     $7ba5
        bmi     @5942
        jsr     _c15a17
        ldx     $62ca
        lda     $892b,x
        sta     $7ba6
        lda     #$80
        sta     $7ba5
@5942:  lda     $7ba6
        jsr     DrawRageListText
        jsr     _c15729
        bcc     @5957
        lda     #$13
        sta     $7bf0
        lda     #$09
        jmp     _c15a2c
@5957:  rts

; ------------------------------------------------------------------------------

; [ update menu state $1f: open dance window ]

UpdateMenuState_1f:
OpenDanceWindow:
@5958:  lda     #$1f
        sta     $7bc2
        lda     $7ba5
        bmi     @596d
        jsr     _c15a17
        stz     $7ba6
        lda     #$80
        sta     $7ba5
@596d:  lda     $7ba6
        jsr     DrawDanceListText
        jsr     _c15729
        bcc     @5982
        lda     #$15
        sta     $7bf0
        lda     #$0a
        jmp     _c15a2c
@5982:  rts

; ------------------------------------------------------------------------------

; [ update menu state $28: open magitek window ]

UpdateMenuState_28:
OpenMagitekWindow:
@5983:  lda     #$28
        sta     $7bc2
        lda     $7ba5
        bmi     @5998
        jsr     _c15a17
        stz     $7ba6
        lda     #$80
        sta     $7ba5
@5998:  lda     $7ba6
        jsr     _c14d2e
        jsr     _c15729
        bcc     @59ad
        lda     #$1b
        sta     $7bf0
        lda     #$0d
        jmp     _c15a2c
@59ad:  rts

; ------------------------------------------------------------------------------

; [ update menu state $06: open slot window ]

UpdateMenuState_06:
OpenSlotWindow:
@59ae:  jsr     _c1411e
        lda     #$06
        sta     $7bc2
        lda     $7ba5
        bmi     @59c6
        jsr     _c15a17
        stz     $7ba6
        lda     #$80
        sta     $7ba5
@59c6:  jsr     _c15729
        bcc     @59d5
        lda     #$04
        sta     $7bf0
        lda     #$01
        jmp     _c15a2c
@59d5:  rts

; ------------------------------------------------------------------------------

; [ update menu state $04: open command window ]

UpdateMenuState_04:
@59d6:  lda     f:$001d4e               ; cursor setting
        and     #$40
        bne     @59e9
        clr_ax
@59e0:  stz     $890f,x                 ; clear saved cursor settings
        inx
        cpx     #$005c
        bne     @59e0
@59e9:  lda     #$01
        sta     $632f
        lda     #$29                    ; $29: get command window setting
        sta     $7bf0
        lda     #$03                    ; $03: open command window
        sta     $7bf1
        lda     #$1f                    ; $1f:
        sta     $7bf2
        clr_a
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [ open summon window ]

OpenSummonWindow:
@5a01:  jsr     DrawSummonMagicListText
        ldx     #$7b80
        stx     $7baa
        inc     $7ba9
        lda     #$0d
        sta     $7bf0
        lda     #$06
        jmp     _c15a2c

; ------------------------------------------------------------------------------

; [  ]

_c15a17:
scr_line_tfr_buf_clr:
@5a17:  longa
        ldx     $00
        lda     #$01ff
@5a1e:  sta     $5e4d,x
        inx2
        cpx     #$0080
        bne     @5a1e
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

; $00: command window
; $01: slot window
; $02: item window
; $03: equip window
; $04: magic window
; $05:
; $06: summon window
; $07: lore window
; $08: return to item menu ???
; $09: rage window
; $0a: dance window
; $0d: control window ???
; $0e: throw window

_c15a2c:
nmi2jmp_data_set:
@5a2c:  asl2
        tax
        ldy     $00
@5a31:  lda     f:_c2e348,x   ; menu state data
        sta     $7bc2,y
        inx
        iny
        cpy     #4
        bne     @5a31
        rts

; ------------------------------------------------------------------------------

; [ unused battle cursor menu state ]

UpdateMenuState_00:
UpdateMenuState_03:
UpdateMenuState_11:
@5a40:  rts

; ------------------------------------------------------------------------------

; [ update menu state $01:  ]

UpdateMenuState_01:
@5a41:  lda     $7bf0
        jeq     GoToNextMenuState
        rts

; ------------------------------------------------------------------------------

; [ update menu state $02: go to next menu state ]

UpdateMenuState_02:
GoToNextMenuState:
@5a4a:  clr_ax
        sta     $7bc9
@5a4f:  lda     $7bc3,x
        sta     $7bc2,x
        inx
        cpx     #7
        bne     @5a4f
        rts

; ------------------------------------------------------------------------------

; [ update menu text ]

_c15a5c:
main_window_open:
@5a5c:  lda     $7bdd
        beq     @5ad0
        lda     $7bbb
        bne     @5ad0
        lda     $7bee
        bne     @5acd
        lda     $7beb
        bne     @5a81
        inc     $7beb
        longa
        ldx     $7be9
        ldy     #$55d5
        lda     $7bec
        mvn     #$7e,#$7e
@5a81:  longa
        lda     $7bde
        tax
        sec
        sbc     #$0010
        sta     $7bde
        lda     $7be0
        tay
        sec
        sbc     #$0010
        sta     $7be0
        lda     #$000f
        mvn     #$7e,#$7e
        ldx     $7be2
        ldy     $7be4
        lda     #$000f
        mvn     #$7e,#$7e
        stx     $7be2
        sty     $7be4
        shorta0
        dec     $7be6
        bne     @5acd
        stz     $7bdd
        longa
        ldx     #$55d5
        ldy     $7be7
        lda     $7bec
        mvn     #$7e,#$7e
        shorta0
@5acd:  stz     $7bee
@5ad0:  rts

; ------------------------------------------------------------------------------

; [  ]

_c15ad1:
one_back_buffer_set:
@5ad1:  lda     $7bdb
        bne     @5af5
        lda     $7bd2
        sta     $4775,x
        sta     $4779,x
        sta     $477d,x
        sta     $4781,x
        lda     $7bd4
        sta     $4777,x
        sta     $477b,x
        sta     $477f,x
        sta     $4783,x
        rts
@5af5:  lda     $7bd2
        sta     $43f5,x
        sta     $43f9,x
        sta     $43fd,x
        sta     $4401,x
        lda     $7bd4
        sta     $43f7,x
        sta     $43fb,x
        sta     $43ff,x
        sta     $4403,x
        rts

; ------------------------------------------------------------------------------

; [ update menu windows ]

_c15b14:
back_window_open:
@5b14:  lda     $7bd1
        beq     @5b4b
        lda     $7bbb
        bne     @5b4b
        longa
        ldx     $7bd7
        jsr     _c15ad1
        ldx     $7bd9
        jsr     _c15ad1
        lda     $7bd7
        sec
        sbc     #$0010
        sta     $7bd7
        lda     $7bd9
        clc
        adc     #$0010
        sta     $7bd9
        shorta0
        dec     $7bd6
        bne     @5b4b
        stz     $7bd1
@5b4b:  rts

; ------------------------------------------------------------------------------

; [ update menu state $3e:  ]

UpdateMenuState_3e:
@5b4c:  lda     $7baf
        beq     @5b62
        lda     $7ba8
        cmp     #$01
        beq     @5b62
        ldx     $7bb1
        dex4
        stx     $7bb1
@5b62:  shorti
        clr_ax
        longa
        lda     #$0100      ; nonzero dp
        pha
        pld
        lda     $02,x
        sta     $7afe
@5b72:  lda     $12,x
        clc
        adc     #$0004
        sta     $02,x
        sta     $06,x
        sta     $0a,x
        sta     $0e,x
        txa
        clc
        adc     #$0010
        tax
        cpx     #$f0
        bne     @5b72
        lda     $7afe
        sec
        sbc     #$003c
        jmp     _5d5c

; ------------------------------------------------------------------------------

; [  ]

_c15b94:
@5b94:  dec     $7ba8
        dec     $7ba8
        dec     $7ba8
        lda     $7baf
        beq     @5bae
        longa
        lda     $7bb1
        clc
        adc     #$0008
        sta     $7bb1
@5bae:  shorti
        ldx     #$90
        longa
        lda     #$0100      ; nonzero dp
        pha
        pld
        lda     $32,x
        sta     $7afe
@5bbe:  lda     $02,x
        sec
        sbc     #$000c
        sta     $5e,x
        sta     $5a,x
        sta     $56,x
        sta     $52,x
        sta     $4e,x
        sta     $4a,x
        sta     $46,x
        sta     $42,x
        sta     $3e,x
        sta     $3a,x
        sta     $36,x
        sta     $32,x
        txa
        sec
        sbc     #$0030
        tax
        cpx     #$d0
        bne     @5bbe
        ldx     #$00
        lda     $7afe
        clc
        adc     #$0030
        bra     _5c4a

; ------------------------------------------------------------------------------

; [  ]

_c15bf1:
@5bf1:  dec     $7ba8
        dec     $7ba8
        dec     $7ba8
        lda     $7baf
        beq     @5c0b
        longa
        lda     $7bb1
        sec
        sbc     #$0008
        sta     $7bb1
@5c0b:  shorti
        clr_ax
        longa
        lda     #$0100      ; nonzero dp
        pha
        pld
        lda     $02,x
        sta     $7afe
@5c1b:  lda     $32,x
        clc
        adc     #$000c
        sta     $02,x
        sta     $06,x
        sta     $0a,x
        sta     $0e,x
        sta     $12,x
        sta     $16,x
        sta     $1a,x
        sta     $1e,x
        sta     $22,x
        sta     $26,x
        sta     $2a,x
        sta     $2e,x
        txa
        clc
        adc     #$0030
        tax
        cpx     #$c0
        bne     @5c1b
        lda     $7afe
        sec
        sbc     #$0030
_5c4a:  sta     $02,x
        sta     $06,x
        sta     $0a,x
        sta     $0e,x
        sta     $12,x
        sta     $16,x
        sta     $1a,x
        sta     $1e,x
        sta     $22,x
        sta     $26,x
        sta     $2a,x
        sta     $2e,x
        ldx     #$00
@5c64:  lda     $02,x
        sta     $4d83,x
        lda     $06,x
        sta     $4d87,x
        lda     $0a,x
        sta     $4d8b,x
        lda     $0e,x
        sta     $4d8f,x
        txa
        clc
        adc     #$0010
        tax
        cpx     #$c0
        bne     @5c64
        lda     #$0000
        pha
        pld
        shorta
        longi
        jsr     GoToNextMenuState
        jmp     UpdateMenuState

; ------------------------------------------------------------------------------

; [ update menu state $17:  ]

UpdateMenuState_17:
@5c91:  lda     $06
        and     #$10
        beq     @5caf
        lda     $7ba8
        cmp     #$03
        bne     @5caf
        lda     $0b
        and     #$0f
        sta     $36
        lda     $05
        and     #$f0
        ora     $36
        sta     $05
        jmp     _c15bf1
@5caf:  lda     $7baf
        beq     @5cc5
        lda     $7ba8
        cmp     #$01
        beq     @5cc5
        ldx     $7bb1
        dex4
        stx     $7bb1
@5cc5:  shorti
        clr_ax
        longa
        lda     #$0100      ; nonzero dp
        pha
        pld
        lda     $02,x
        sta     $7afe
@5cd5:  lda     $12,x
        clc
        adc     #$0004
        sta     $02,x
        sta     $06,x
        sta     $0a,x
        sta     $0e,x
        txa
        clc
        adc     #$0010
        tax
        cpx     #$e0
        bne     @5cd5
        lda     $7afe
        sec
        sbc     #$0038
        jmp     _5d5c

; ------------------------------------------------------------------------------

; [ update menu state $18:  ]

UpdateMenuState_18:
        .a8
@5cf7:  lda     $06
        and     #$10
        beq     @5d15
        lda     $7ba8
        cmp     #$03
        bne     @5d15
        lda     $0b
        and     #$0f
        sta     $36
        lda     $05
        and     #$f0
        ora     $36
        sta     $05
        jmp     _c15b94
@5d15:  lda     $7baf
        beq     @5d2b
        lda     $7ba8
        cmp     #$01
        beq     @5d2b
        ldx     $7bb1
        inx4
        stx     $7bb1
@5d2b:  shorti
        ldx     #$dc
        longa
        lda     #$0100      ; nonzero dp
        pha
        pld
        lda     $06,x
        sta     $7afe
@5d3b:  lda     $02,x
        sec
        sbc     #$0004
        sta     $12,x
        sta     $0e,x
        sta     $0a,x
        sta     $06,x
        txa
        sec
        sbc     #$0010
        tax
        cpx     #$fc
        bne     @5d3b
        ldx     #$00
        lda     $7afe
        clc
        adc     #$0038
_5d5c:  sta     $0e,x
        sta     $0a,x
        sta     $06,x
        sta     $02,x
        ldx     #$00
@5d66:  lda     $02,x
        sta     $4d83,x
        lda     $06,x
        sta     $4d87,x
        lda     $0a,x
        sta     $4d8b,x
        lda     $0e,x
        sta     $4d8f,x
        txa
        clc
        adc     #$0010
        tax
        cpx     #$c0
        bne     @5d66
        lda     #$0000
        pha
        pld
        shorta
        longi
        dec     $7ba8
        bne     @5d98
        jsr     GoToNextMenuState
        jmp     UpdateMenuState
@5d98:  rts

; ------------------------------------------------------------------------------

; [ copy menu text tile data to vram ]

_c15d99:
@5d99:  lda     $7ba9       ;
        beq     @5db1
        ldx     #$0080      ; size = #$80
        stx     $36
        ldy     $7baa       ; vram destination
        ldx     #$5e4d      ; source = $7e5e4d
        lda     #$7e
        jsr     TfrVRAM
        stz     $7ba9
@5db1:  lda     $6285       ;
        bmi     @5dba
        jsl     _c2ab8a
@5dba:  rts

; ------------------------------------------------------------------------------

; [ clear dialogue text graphics buffer ]

ClearDlgGfxBuf:
@5dbb:  longa
        clr_ax
@5dbf:  sta     $e33f,x
        sta     $e43f,x
        sta     $e53f,x
        sta     $e63f,x
        inx2
        cpx     #$0100
        bne     @5dbf
        shorta
        rts

; ------------------------------------------------------------------------------

; [ draw dialogue text ]

DrawDlgText:
@5dd5:  stz     $e9f5
        stz     $7a
        ldx     $88d7
        stx     $48
        lda     $88d9
        sta     $4a
        stz     $4b
@5de6:  lda     [$48]
        beq     @5dfe
        cmp     #$20
        bcc     @5df6
        jsr     DrawDlgLetter
        jsr     IncTextPtr
        bra     @5de6
@5df6:  jsr     DlgTextCmd
        jsr     IncTextPtr
        bra     @5de6
@5dfe:  jsr     WaitDlgTfr
        rts

; ------------------------------------------------------------------------------

; [ wait for dialogue transfer to VRAM ]

WaitDlgTfr:
@5e02:  ldx     $48
        phx
        ldx     $4a
        phx
        lda     $7a
        pha
        clr_a
        jsr     WaitA       ; wait 0 frames
        jsr     TfrDlgTextGfx
        pla
        sta     $7a
        plx
        stx     $4a
        plx
        stx     $48
        rts

; ------------------------------------------------------------------------------

; [ wait for dialogue text to scroll ]

WaitDlgScroll:
@5e1c:  ldx     $48
        phx
        ldx     $4a
        phx
        lda     $7a
        pha
        jsr     WaitFrame
        pla
        sta     $7a
        plx
        stx     $4a
        plx
        stx     $48
        rts

; ------------------------------------------------------------------------------

; [ pause during dialogue display ]

WaitDlg:
@5e32:  sta     $22
        ldx     $48
        phx
        ldx     $4a
        phx
        lda     $7a
        pha
        lda     $22
        jsr     WaitA
        jsr     TfrDlgTextGfx
        pla
        sta     $7a
        plx
        stx     $4a
        plx
        stx     $48
        rts

; ------------------------------------------------------------------------------

; [ write message text special string ]

DlgTextCmd:
@5e4f:  asl
        tax
        jmp     (.loword(DlgTextCmdTbl),x)

; ------------------------------------------------------------------------------

; dialog text special string jump table
DlgTextCmdTbl:
@5e54:  .addr   TextCmdUnused
        .addr   DlgTextCmd_01
        .addr   DlgTextCmd_02
        .addr   TextCmdUnused
        .addr   DlgTextCmd_04
        .addr   DlgTextCmd_05
        .addr   DlgTextCmd_06
        .addr   DlgTextCmd_07
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   DlgTextCmd_0c
        .addr   TextCmdUnused
        .addr   DlgTextCmd_0e
        .addr   DlgTextCmd_0f
        .addr   DlgTextCmd_10
        .addr   DlgTextCmd_11
        .addr   DlgTextCmd_12
        .addr   DlgTextCmd_13
        .addr   DlgTextCmd_14
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   DrawDlgLetter
        .addr   DrawDlgLetter
        .addr   DrawDlgLetter
        .addr   DrawDlgLetter

; ------------------------------------------------------------------------------

; [ dialog special string $07: wait for keypress ]

DlgTextCmd_07:
@5e94:  inc     $e9f5
        jsr     WaitDlgTfr
        lda     $04
        bpl     @5e94
        rts

; ------------------------------------------------------------------------------

; [ dialog special string $06: wait ]

; b0: number of frames to wait

DlgTextCmd_06:
@5e9f:  jsr     IncTextPtr
        lda     [$48]
        jmp     WaitDlg

; ------------------------------------------------------------------------------

; [ dialog special string $05: wait 60 frames ]

DlgTextCmd_05:
@5ea7:  lda     #$3c
        jmp     WaitDlg

; ------------------------------------------------------------------------------

; [ dialog special string $02: character name ]

; b0: character name

DlgTextCmd_02:
@5eac:  jsr     IncTextPtr
        lda     [$48]
        sta     $22
        clr_ax
@5eb5:  lda     f:$001600,x
        cmp     $22
        beq     @5ecf
        longa
        txa
        clc
        adc     #$0025
        tax
        shorta0
        cpx     #$0250
        beq     @5ee5
        bra     @5eb5
@5ecf:  lda     #$06
        sta     $616d       ; 6 letter string length
@5ed4:  lda     f:$001602,x
        cmp     #$ff
        beq     @5ee5
        jsr     DrawDlgLetter
        inx
        dec     $616d
        bne     @5ed4
@5ee5:  rts

; ------------------------------------------------------------------------------

; [ dialog special string $12: string from variable ]

; b0: string type

DlgTextCmd_12:
@5ee6:  jsr     IncTextPtr
        lda     [$48]
        asl
        tax
        jmp     (.loword(_c15ef0),x)

; ------------------------------------------------------------------------------

; jump table for string type
_c15ef0:
@5ef0:  .addr   _c15f40,_c15f06,_c15f00,_c15f13

; ------------------------------------------------------------------------------

; pointers to character names
CharNamePtrs:
@5ef8:  .word   $2eae,$2ece,$2eee,$2f0e

; ------------------------------------------------------------------------------

; $02: attack name

_c15f00:
@5f00:  lda     $2f35       ; variable 0
        jmp     _c15fb8       ; write attack name

; ------------------------------------------------------------------------------

; $01: item name

_c15f06:
@5f06:  lda     $2f35       ; variable 0
        jmp     _c16048       ; write item name

; ------------------------------------------------------------------------------

; [ dialog special string $0c: battle command name ]

DlgTextCmd_0c:
@5f0c:  jsr     IncTextPtr
        lda     [$48]
        bra     _5f16

; ------------------------------------------------------------------------------

; $03: battle command name

_c15f13:
@5f13:  lda     $2f35       ; variable 0
_5f16:  cmp     #$ff
        bne     @5f1b
        rts
@5f1b:  xba
        lda     #$07
        sta     $616d
        jsr     MultAB
        longa
        lda     f:hRDMPYL
        tax
        shorta0
@5f2e:  lda     f:BattleCmdName,x
        cmp     #$ff
        beq     @5f3f
        jsr     DrawDlgLetter
        inx
        dec     $616d
        bne     @5f2e
@5f3f:  rts

; ------------------------------------------------------------------------------

; $00: character name

_c15f40:
@5f40:  lda     $2f38       ; variable 1
        asl
        tax
        longa
        lda     f:CharNamePtrs,x
        tax
        shorta0
        lda     #$06
        sta     $616d
@5f54:  lda     a:$0001,x
        cmp     #$ff
        beq     @5f64
        jsr     DrawDlgLetter
        inx
        dec     $616d
        bne     @5f54
@5f64:  rts

; ------------------------------------------------------------------------------

; [ dialog special string $14: variable 3 ]

DlgTextCmd_14:
@5f65:  ldx     $2f3e       ; variable 3
        lda     $2f40
        bra     _5f83

; ------------------------------------------------------------------------------

; [ dialog special string $13: variable 2 ]

DlgTextCmd_13:
@5f6d:  ldx     $2f3b       ; variable 2
        lda     $2f3d
        bra     _5f83

; ------------------------------------------------------------------------------

; [ dialog special string $10: variable 0 ]

DlgTextCmd_10:
@5f75:  ldx     $2f35       ; variable 0
        lda     $2f37
        bra     _5f83

; ------------------------------------------------------------------------------

; [ dialog special string $11: variable 1 ]

DlgTextCmd_11:
@5f7d:  ldx     $2f38       ; variable 1
        lda     $2f3a
_5f83:  stx     $10
        sta     $12
        lda     #$b4
        sta     $68
        jsr     HexToDec8
        clr_ax
@5f90:  lda     $69,x
        cmp     #$b4
        bne     @5f9c
        inx
        cpx     #7
        bne     @5f90
@5f9c:  lda     $69,x
        jsr     DrawDlgLetter
        inx
        cpx     #8
        bne     @5f9c
        rts

; ------------------------------------------------------------------------------

; [  ]

_c15fa8:
@5fa8:  pha
        lda     #$ff
        jsr     DrawDlgLetter
        pla
        dec
        bne     @5fa8
        rts

; ------------------------------------------------------------------------------

; [ dialog special string $0f: attack name ]

DlgTextCmd_0f:
@5fb3:  jsr     IncTextPtr
        lda     [$48]

_c15fb8:
@5fb8:  cmp     #$ff
        bne     @5fbd
        rts
@5fbd:  cmp     #$36
        bcc     @6019       ; branch if a spell
        cmp     #$51
        bcc     @5fef       ; branch if an esper attack

; attack name
        sec
        sbc     #$51
        xba
        lda     #ATTACK_NAME_SIZE
        sta     $10
        sta     $616d
        jsr     MultAB
        longa
        lda     f:hRDMPYL
        tax
        shorta0
@5fdd:  lda     f:AttackName,x
        cmp     #$ff
        beq     @5fee
        jsr     DrawDlgLetter
        inx
        dec     $616d
        bne     @5fdd
@5fee:  rts

; esper attack name
@5fef:  sec
        sbc     #$36
        xba
        lda     #GENJU_NAME_SIZE
        sta     $10
        sta     $616d
        jsr     MultAB
        longa
        lda     f:hRDMPYL
        tax
        shorta0
@6007:  lda     f:GenjuName,x
        cmp     #$ff
        beq     @6018
        jsr     DrawDlgLetter
        inx
        dec     $616d
        bne     @6007
@6018:  rts

; spell name
@6019:  xba
        lda     #MAGIC_NAME_SIZE
        sta     $10
        sta     $616d
        jsr     MultAB
        longa
        lda     f:hRDMPYL
        tax
        shorta0
        dec     $616d       ; skip symbol byte
@6031:  lda     f:MagicName+1,x   ; spell name (skips symbol byte)
        cmp     #$ff
        beq     @6042
        jsr     DrawDlgLetter
        inx
        dec     $616d
        bne     @6031
@6042:  rts

; ------------------------------------------------------------------------------

; [ dialog special string $0e: item name ]

DlgTextCmd_0e:
@6043:  jsr     IncTextPtr
        lda     [$48]

_c16048:
@6048:  cmp     #$ff
        bne     @6051
        lda     #ITEM_NAME_SIZE
        jmp     _c15fa8
@6051:  xba
        lda     #ITEM_NAME_SIZE
        sta     $10
        sta     $616d
        jsr     MultAB
        longa
        lda     f:hRDMPYL
        tax
        shorta0
        dec     $616d
@6069:  lda     f:ItemName+1,x   ; item name
        cmp     #$ff
        beq     @607a
        jsr     DrawDlgLetter
        inx
        dec     $616d
        bne     @6069
@607a:  rts

; ------------------------------------------------------------------------------

; [ dialog special string $04: toggle text color ]

DlgTextCmd_04:
@607b:  lda     $4b
        eor     #1
        sta     $4b
        rts

; ------------------------------------------------------------------------------

_c16082:
@6082:  .word   $5a00,$5c00,$5e00,$5800,$5800

; ------------------------------------------------------------------------------

; [ dialog special string $01: new line ]

DlgTextCmd_01:
@608c:  stz     $7a
        lda     $e9c3
        bpl     @60d8
        jsr     ClearDlgGfxBuf
        lda     $e9c1
        cmp     #$04
        bne     @60a0
        stz     $e9c1
@60a0:  lda     $e9c1
        and     #$03
        asl
        tax
        longa
        lda     f:_c16082,x
        sta     $e9bf
        shorta0
        inc     $e9c1
        jsr     WaitDlgTfr
        lda     $e9c2
        cmp     #$02
        bne     @60d4
        lda     #$04
        sta     $7ba8
        lda     #$3e
        sta     $7bc2
@60ca:  lda     $7bc2
        beq     @60d7
        jsr     WaitDlgScroll
        bra     @60ca
@60d4:  inc     $e9c2
@60d7:  rts
@60d8:  lda     #$10
@60da:  pha
        clr_ax
        longa
        lda     #$0020
        sta     $24
@60e4:  lda     #$000f
        sta     $22
@60e9:  lda     $e341,x
        sta     $e33f,x
        inx2
        dec     $22
        bne     @60e9
        stz     $e33f,x
        inx2
        dec     $24
        bne     @60e4
        shorta0
        jsr     WaitDlgTfr
        pla
        dec
        bne     @60da
        rts

; ------------------------------------------------------------------------------

_c16109:
@6109:  .word   4,3,2,1

; ------------------------------------------------------------------------------

; [ draw dialogue text letter (large font) ]

DrawDlgLetter:
@6111:  sta     $ecf0
        sec
        sbc     #$80
        phy
        phx
        sta     $22
        lda     #$16
        sta     $24
        jsr     Mult8
        lda     $4b
        jne     _c16256                 ; alt. text color
        lda     $7a
        and     #$f8
        longa
        asl2
        tay
        lda     #$000b
        sta     $1c
        lda     $7a
        and     #$0004
        jeq     @61c4
        lda     $7a
        and     #$0003
        sta     $1a
        ldx     $26
@614a:  stz     $12
        lda     $1a
        sta     $18
        bne     @6158
        lda     f:LargeFontGfx,x
        bra     @6163
@6158:  lda     f:LargeFontGfx,x
@615c:  lsr
        ror     $12
        dec     $18
        bne     @615c
@6163:  sta     $22
        shorta
        ora     $e367,y
        sta     $e367,y
        lda     $22
        ora     $e368,y
        sta     $e368,y
        xba
        ora     $e347,y
        sta     $e347,y
        lda     $23
        ora     $e348,y
        sta     $e348,y
        lda     $13
        ora     $e387,y
        sta     $e387,y
        lda     $13
        ora     $e388,y
        sta     $e388,y
        longa
        lda     $22
        lsr
        ror     $12
        sta     $22
        shorta
        ora     $e369,y
        sta     $e369,y
        xba
        ora     $e349,y
        sta     $e349,y
        lda     $13
        ora     $e389,y
        sta     $e389,y
        longa
        iny2
        inx2
        dec     $1c
        jne     @614a
        jmp     @622e

@61c4:  lda     $7a
        and     #$0003
        asl
        tax
        lda     f:_c16109,x
        sta     $1a
        ldx     $26
@61d3:  lda     $1a
        sta     $18
        stz     $12
        lda     f:LargeFontGfx,x
@61dd:  asl
        dec     $18
        bne     @61dd
        sta     $22
        shorta
        ora     $e367,y
        sta     $e367,y
        lda     $22
        ora     $e368,y
        sta     $e368,y
        lda     $23
        ora     $e347,y
        sta     $e347,y
        lda     $23
        ora     $e348,y
        sta     $e348,y
        longa
        lda     $22
        lsr
        ror     $12
        sta     $22
        shorta
        ora     $e369,y
        sta     $e369,y
        xba
        ora     $e349,y
        sta     $e349,y
        lda     $12
        ora     $e389,y
        sta     $e389,y
        longa
        iny2
        inx2
        dec     $1c
        bne     @61d3
@622e:  shorta0
        phx
        lda     $ecf0
        sec
        sbc     #$60
        tax
        lda     f:FontWidth,x
        plx
        clc
        adc     $7a
        sta     $7a
        lda     $62ac
        bne     @624b
        jsr     WaitDlgTfr
@624b:  plx
        ply
        rts

; ------------------------------------------------------------------------------

_c1624e:
@624e:  .byte   $00,$80,$c0,$e0,$f0,$f8,$fc,$fe

; ------------------------------------------------------------------------------

; [ draw text with alt. text color ]

_c16256:
@6256:  lda     $7a
        and     #$07
        tax
        lda     f:_c1624e,x
        sta     $28
        lda     $7a
        and     #$f8
        longa
        asl2
        tay
        lda     #$000b
        sta     $1c
        lda     $7a
        and     #$0004
        jeq     @6307
        lda     $7a
        and     #$0003
        sta     $1a
        ldx     $26
@6282:  stz     $12
        lda     $1a
        sta     $18
        bne     @6290
        lda     f:LargeFontGfx,x
        bra     @629b
@6290:  lda     f:LargeFontGfx,x
@6294:  lsr
        ror     $12
        dec     $18
        bne     @6294
@629b:  sta     $22
        shorta
        ora     $e368,y
        sta     $e368,y
        and     $e367,y
        eor     #$ff
        and     $e367,y
        sta     $e367,y
        xba
        ora     $e348,y
        sta     $e348,y
        and     $e347,y
        eor     #$ff
        ora     $28
        and     $e347,y
        sta     $e347,y
        lda     $13
        ora     $e388,y
        sta     $e388,y
        and     $e387,y
        eor     #$ff
        and     $e387,y
        sta     $e387,y
        longa
        lda     $22
        lsr
        ror     $12
        sta     $22
        shorta
        ora     $e369,y
        sta     $e369,y
        xba
        ora     $e349,y
        sta     $e349,y
        lda     $13
        ora     $e389,y
        sta     $e389,y
        longa
        iny2
        inx2
        dec     $1c
        jne     @6282
        jmp     @637b

@6307:  lda     $7a
        and     #$0003
        asl
        tax
        lda     f:_c16109,x
        sta     $1a
        ldx     $26
@6316:  lda     $1a
        sta     $18
        stz     $12
        lda     f:LargeFontGfx,x
@6320:  asl
        dec     $18
        bne     @6320
        sta     $22
        shorta
        ora     $e368,y
        sta     $e368,y
        and     $e367,y
        eor     #$ff
        and     $e367,y
        sta     $e367,y
        xba
        ora     $e348,y
        sta     $e348,y
        and     $e347,y
        eor     #$ff
        ora     $28
        and     $e347,y
        sta     $e347,y
        longa
        lda     $22
        lsr
        ror     $12
        sta     $22
        shorta
        ora     $e369,y
        sta     $e369,y
        xba
        ora     $e349,y
        sta     $e349,y
        lda     $13
        ora     $e389,y
        sta     $e389,y
        longa
        iny2
        inx2
        dec     $1c
        jne     @6316
@637b:  shorta0
        phx
        lda     $ecf0
        sec
        sbc     #$60
        tax
        lda     f:FontWidth,x
        plx
        clc
        adc     $7a
        sta     $7a
        lda     $62ac
        bne     @6398
        jsr     WaitDlgTfr
@6398:  plx
        ply
        rts

; ------------------------------------------------------------------------------

; [ transfer dialogue text graphics to vram ]

TfrDlgTextGfx:
@639b:  ldx     #$0400      ; size = $0400
        stx     $10
        ldx     #$e33f      ; source = $7ee33f
        lda     #$7e
        ldy     $e9bf       ; destination (vram)
        jmp     WaitTfrVRAM

; ------------------------------------------------------------------------------

; [ write menu list text ]

DrawListText:
@63ab:  lda     $88e2
        sta     $56
        sta     $58
        sta     $5a
        xba
        asl     $88e1
        stz     $2d
        ldx     $88dd
        stx     $4f
        ldx     $88df
        stx     $51
        lda     $51
        clc
        adc     $88e1
        sta     $53
        lda     $52
        adc     #$00
        sta     $54
        ldy     $00
@63d4:  lda     ($4f)
        beq     @63f4
        cmp     #$20
        bcc     @63e8
        jsr     DrawListLetter
        inc     $4f
        bne     @63d4
        inc     $50
        jmp     @63d4
@63e8:  jsr     ListTextCmd
        inc     $4f
        bne     @63d4
        inc     $50
        jmp     @63d4
@63f4:  clr_a
        xba
        rts

; ------------------------------------------------------------------------------

; [ increment pointer to list text ]

IncListTextPtr:
@63f7:  inc     $4f
        bne     @63fd
        inc     $50
@63fd:  rts

; ------------------------------------------------------------------------------

; [ draw one letter (menu list) ]

DrawListLetter:
@63fe:  longa
        sta     ($53),y     ; tile id
        lda     $55
        sta     ($51),y
        shorta
        iny2
        rts

; ------------------------------------------------------------------------------

; [ write menu list text special string ]

ListTextCmd:
@640b:  sta     $2c
        asl     $2c
        ldx     $2c
        jmp     (.loword(ListTextCmdTbl),x)

; ------------------------------------------------------------------------------

; menu list text special string jump table
ListTextCmdTbl:
@6414:  .addr   TextCmdUnused
        .addr   ListTextCmd_01
        .addr   ListTextCmd_02
        .addr   ListTextCmd_03
        .addr   ListTextCmd_04
        .addr   ListTextCmd_05
        .addr   ListTextCmd_06
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   ListTextCmd_0e
        .addr   ListTextCmd_0f
        .addr   TextCmdUnused
        .addr   ListTextCmd_11
        .addr   ListTextCmd_12
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   ListTextCmd_16
        .addr   ListTextCmd_17
        .addr   ListTextCmd_18
        .addr   ListTextCmd_19
        .addr   ListTextCmd_1a

; ------------------------------------------------------------------------------

ListTextCmd_16:
@644a:  jsr     IncListTextPtr
        stz     $40
        stz     $41
        lda     ($4f)
@6453:  sec
        sbc     #$64
        bcc     @645c
        inc     $40
        bra     @6453
@645c:  clc
        adc     #$64
@645f:  sec
        sbc     #$0a
        bcc     @6468
        inc     $41
        bra     @645f
@6468:  clc
        adc     #$0a
        pha
        lda     $40
        bne     @6472
        lda     #$4b
@6472:  clc
        adc     #$b4
        jsr     DrawListLetter
        lda     $41
        ora     $40
        bne     @6485
        lda     #$ff
        jsr     DrawListLetter
        bra     @648d
@6485:  lda     $41
        clc
        adc     #$b4
        jsr     DrawListLetter
@648d:  pla
        clc
        adc     #$b4
        jmp     DrawListLetter

; ------------------------------------------------------------------------------

; [ menu list text special string $02: number ]

ListTextCmd_02:
@6494:  jsr     IncListTextPtr
        stz     $40                     ; tens digit
        lda     ($4f)
@649b:  sec
        sbc     #$0a
        bcc     @64a5
        inc     $40
        jmp     @649b
@64a5:  clc
        adc     #$0a
        sta     $41                     ; ones digit
        lda     $40
        bne     @64b0
        lda     #$4b                    ; $4b + $b4 = $ff " "
@64b0:  clc
        adc     #$b4                    ; $b4 "0"
        jsr     DrawListLetter
        lda     $41
        ora     $40
        bne     @64c1
        lda     #$ff
        jmp     DrawListLetter
@64c1:  lda     $41
        clc
        adc     #$b4
        jmp     DrawListLetter

; ------------------------------------------------------------------------------

ListTextCmd_03:
@64c9:  jsr     IncListTextPtr
        lda     ($4f)
        jmp     DrawListLetter

; ------------------------------------------------------------------------------

ListTextCmd_04:
@64d1:  jsr     IncListTextPtr
        lda     ($4f)
        sta     $56
        sta     $58
        sta     $5a
        xba
        rts

; ------------------------------------------------------------------------------

ListTextCmd_05:
@64de:  jsr     IncListTextPtr
        lda     ($4f)
        sta     $40
@64e5:  lda     #$ff
        jsr     DrawListLetter
        dec     $40
        bne     @64e5
        rts

; ------------------------------------------------------------------------------

; [ menu list text special string $06: magitek attack name ]

ListTextCmd_06:
@64ef:  jsr     IncListTextPtr
        lda     ($4f)
        cmp     #$ff
        bne     @64fd
        lda     #$0a
        jmp     _c166a5
@64fd:  sta     $2c
        lda     #$0a
        sta     $2e
        sta     $40
        jsr     Mult8NoHW
        ldx     $30
@650a:  lda     f:AttackName+500,x   ; magitek attack name
        jsr     DrawListLetter
        inx
        dec     $40
        bne     @650a
        rts

; ------------------------------------------------------------------------------

; [ menu list text special string $12: item type name ]

ListTextCmd_12:
@6517:  jsr     IncListTextPtr
        lda     ($4f)
        cmp     #$ff
        bne     @6525
@6520:  lda     #$07
        jmp     _c166a5
@6525:  sta     $2c
        lda     #ITEM_NAME_SIZE
        sta     $2e
        jsr     Mult8NoHW
        ldx     $30
        lda     f:ItemName,x   ; item name
        cmp     #$ff
        beq     @6520
        sec
        sbc     #$d8
        sta     $2c
        lda     #ITEM_TYPE_NAME_SIZE
        sta     $2e
        sta     $40
        jsr     Mult8NoHW
        ldx     $30
        lda     $56
        xba
@654b:  lda     f:ItemTypeName,x
        jsr     DrawListLetter
        inx
        dec     $40
        bne     @654b
        rts

; ------------------------------------------------------------------------------

; [ menu list text special string $0e: item name ]

ListTextCmd_0e:
@6558:  jsr     IncListTextPtr
        lda     ($4f)
        cmp     #$ff
        bne     @6566
        lda     #ITEM_NAME_SIZE
        jmp     _c166a5
@6566:  sta     $2c
        lda     #ITEM_NAME_SIZE
        sta     $2e
        jsr     Mult8NoHW
        ldx     $30
        lda     $56
        xba
        lda     #ITEM_NAME_SIZE
        sta     $40
@6578:  lda     f:ItemName,x   ; item name
        jsr     DrawListLetter
        inx
        dec     $40
        bne     @6578
        rts

; ------------------------------------------------------------------------------

ListTextCmd_11:
@6585:  jsr     ListTextCmd_0f
        lda     ($4f)
        cmp     #$ff
        beq     @6593
        cmp     #$36
        bcc     @6593
        rts
@6593:  lda     #$03
        jmp     _c166a5

; ------------------------------------------------------------------------------

; [ menu list text special string $0f: attack name ]

ListTextCmd_0f:
@6598:  jsr     IncListTextPtr
        lda     ($4f)
        sta     $2c
        cmp     #$ff
        bne     @65a8
        lda     #$07
        jmp     _c166a5
@65a8:  cmp     #$36
        bcc     @65e8
        cmp     #$51
        bcc     @65cc
        sec
        sbc     #$51
        xba
        lda     #ATTACK_NAME_SIZE
        sta     $2e
        sta     $40
        jsr     Mult8NoHW
        ldx     $30
@65bf:  lda     f:AttackName,x
        jsr     DrawListLetter
        inx
        dec     $40
        bne     @65bf
        rts

; ------------------------------------------------------------------------------

@65cc:  sec
        sbc     #$36
        xba
        lda     #GENJU_NAME_SIZE
        sta     $2e
        sta     $40
        jsr     Mult8NoHW
        ldx     $30
@65db:  lda     f:GenjuName,x
        jsr     DrawListLetter
        inx
        dec     $40
        bne     @65db
        rts

; ------------------------------------------------------------------------------

@65e8:  lda     #MAGIC_NAME_SIZE
        sta     $2e
        sta     $40
        jsr     Mult8NoHW
        ldx     $30
@65f3:  lda     f:MagicName,x   ; spell name
        jsr     DrawListLetter
        inx
        dec     $40
        bne     @65f3
        rts

; ------------------------------------------------------------------------------

ListTextCmd_17:
@6600:  jsr     IncListTextPtr
        lda     ($4f)
        sta     $2c
        cmp     #$ff
        bne     @6610
        lda     #$0c
        jmp     _c166a5
@6610:  lda     #$0c
        sta     $2e
        sta     $40
        jsr     Mult8NoHW
        ldx     $30
@661b:  lda     f:DanceName,x
        jsr     DrawListLetter
        inx
        dec     $40
        bne     @661b
        rts

; ------------------------------------------------------------------------------

ListTextCmd_18:
@6628:  jsr     IncListTextPtr
        lda     ($4f)
        sta     $2c
        cmp     #$ff
        bne     @6638
        lda     #$0b
        jmp     _c166a5
@6638:  lda     #$0a
        sta     $2e
        sta     $40
        jsr     Mult8NoHW
        ldx     $30
@6643:  lda     f:MonsterName,x
        jsr     DrawListLetter
        inx
        dec     $40
        bne     @6643
        lda     #$ff
        jsr     DrawListLetter
        rts

; ------------------------------------------------------------------------------

ListTextCmd_19:
@6655:  jsr     IncListTextPtr
        lda     ($4f)
        sta     $2c
        cmp     #$ff
        bne     @6665
        lda     #$0a
        jmp     _c166a5
@6665:  lda     #$0a
        sta     $2e
        sta     $40
        jsr     Mult8NoHW
        ldx     $30
@6670:  lda     f:AttackName+580,x   ; lore name
        jsr     DrawListLetter
        inx
        dec     $40
        bne     @6670
        rts

; ------------------------------------------------------------------------------

ListTextCmd_1a:
@667d:  jsr     IncListTextPtr
        lda     ($4f)
        sta     $2c
        cmp     #$ff
        bne     @668d
        lda     #$08
        jmp     _c166a5
@668d:  lda     #$08
        sta     $2e
        sta     $40
        jsr     Mult8NoHW
        ldx     $30
@6698:  lda     f:GenjuName,x
        jsr     DrawListLetter
        inx
        dec     $40
        bne     @6698
        rts

; ------------------------------------------------------------------------------

; [  ]

_c166a5:
@66a5:  sta     $40
@66a7:  lda     #$ff
        jsr     DrawListLetter
        dec     $40
        bne     @66a7
        rts

; ------------------------------------------------------------------------------

; [ draw menu text ]

DrawMenuText:
@66b1:  lda     $88dc
        sta     $4e
        asl     $88db
        ldx     $88d7
        stx     $48
        ldx     $88d9
        stx     $4a
        lda     $4a
        clc
        adc     $88db
        sta     $4c
        lda     $4b
        adc     #$00
        sta     $4d
        ldy     $00
@66d3:  lda     ($48)       ; get next letter
        beq     @66eb       ; return if end of string
        cmp     #$20
        bcc     @66e3       ; branch if special string
        jsr     DrawMenuLetter
        jsr     IncTextPtr
        bra     @66d3
@66e3:  jsr     MenuTextCmd
        jsr     IncTextPtr
        bra     @66d3
@66eb:  rts

; ------------------------------------------------------------------------------

; [ increment text pointer ]

IncTextPtr:
@66ec:  inc     $48
        bne     @66f2
        inc     $49
@66f2:  rts

; ------------------------------------------------------------------------------

; [ write letter (menu text) ]

;    A: letter
; +$4a:
; +$4c:
;  $4e:

DrawMenuLetter:
@66f3:  sta     ($4c),y
        lda     #$ff
        sta     ($4a),y
        iny
        lda     $4e
        sta     ($4c),y
        sta     ($4a),y
        iny
        rts

; ------------------------------------------------------------------------------

; [ write special string (menu text) ]

MenuTextCmd:
print_code_chg:
@6702:  asl
        tax
        jmp     (.loword(MenuTextCmdTbl),x)

; ------------------------------------------------------------------------------

; menu text special string jump table
MenuTextCmdTbl:
@6707:  .addr   TextCmdUnused
        .addr   MenuTextCmd_01
        .addr   MenuTextCmd_02
        .addr   MenuTextCmd_03
        .addr   MenuTextCmd_04
        .addr   MenuTextCmd_05
        .addr   TextCmdUnused
        .addr   MenuTextCmd_07
        .addr   MenuTextCmd_08
        .addr   MenuTextCmd_09
        .addr   MenuTextCmd_0a
        .addr   MenuTextCmd_0b
        .addr   MenuTextCmd_0c
        .addr   MenuTextCmd_0d
        .addr   MenuTextCmd_0e
        .addr   MenuTextCmd_0f
        .addr   MenuTextCmd_10
        .addr   MenuTextCmd_11
        .addr   MenuTextCmd_12
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused
        .addr   TextCmdUnused

; ------------------------------------------------------------------------------

; [ unused menu text special string ]

TextCmdUnused:
@6747:  rts

; ------------------------------------------------------------------------------

; [ menu text special string $01: next line ]

ListTextCmd_01:
MenuTextCmd_01:
mess_ret:
@6748:  lda     $88db
        longa
        pha
        asl
        clc
        adc     $4a
        sta     $4a
        pla
        clc
        adc     $4a
        sta     $4c
        clr_ay
        shorta
        rts

; ------------------------------------------------------------------------------

; [ menu text special string $02: character name ]

MenuTextCmd_02:
@675f:  jsr     IncTextPtr
        stz     $10
        lda     ($48)
@6766:  sec
        sbc     #$0a
        bcc     @6770
        inc     $10
        jmp     @6766
@6770:  clc
        adc     #$0a
        sta     $11
        lda     $10
        bne     @677b
        lda     #$4b
@677b:  clc
        adc     #$b4
        jsr     DrawMenuLetter
        lda     $11
        ora     $10
        bne     @678c
        lda     #$ff
        jmp     DrawMenuLetter
@678c:  lda     $11
        clc
        adc     #$b4
        jmp     DrawMenuLetter

; ------------------------------------------------------------------------------

; [ menu text special string $03: normal letter ]

MenuTextCmd_03:
@6794:  jsr     IncTextPtr
        lda     ($48)
        jmp     DrawMenuLetter

; ------------------------------------------------------------------------------

; [ menu text special string $04: set tile data ]

MenuTextCmd_04:
@679c:  jsr     IncTextPtr
        lda     ($48)
        sta     $4e
        rts

; ------------------------------------------------------------------------------

; [ menu text special string $05: spaces ]

; b1: number of spaces

MenuTextCmd_05:
@67a4:  jsr     IncTextPtr
        lda     ($48)
        sta     $10
@67ab:  lda     #$ff
        jsr     DrawMenuLetter
        dec     $10
        bne     @67ab
        rts

; ------------------------------------------------------------------------------

; [ menu text special string $07: character 1 info text ]

MenuTextCmd_07:
@67b5:  clr_a
        bra     _67c2

; ------------------------------------------------------------------------------

; [ menu text special string $08: character 2 info text ]

MenuTextCmd_08:
@67b8:  lda     #$01
        bra     _67c2

; ------------------------------------------------------------------------------

; [ menu text special string $09: character 3 info text ]

MenuTextCmd_09:
@67bc:  lda     #$02
        bra     _67c2

; ------------------------------------------------------------------------------

; [ menu text special string $0a: character 4 info text ]

MenuTextCmd_0a:
@67c0:  lda     #$03
; fall through

_67c2:  tax
        lda     $64d6,x
        cmp     #$ff
        beq     @67cf       ; branch if character slot is empty
        asl
        tax
        jmp     (.loword(DrawCharSlotInfoTbl),x)
@67cf:  jsr     IncTextPtr
        lda     ($48)       ; info type
        tax
        lda     f:_c167dc,x   ; text length
        jmp     _c16825       ; clear text

; ------------------------------------------------------------------------------

; character info text length (for clearing)
_c167dc:
@67dc:  .byte   $06,$04,$06,$03,$03,$06,$06

; character info text jump table (for each character)
DrawCharSlotInfoTbl:
@67e3:  .addr   DrawCharSlot1Info
        .addr   DrawCharSlot2Info
        .addr   DrawCharSlot3Info
        .addr   DrawCharSlot4Info

; ------------------------------------------------------------------------------

; character 1

DrawCharSlot1Info:
@67eb:  ldx     #$2eae
        lda     #$00
        bra     _6805

; ------------------------------------------------------------------------------

; character 2

DrawCharSlot2Info:
@67f2:  ldx     #$2ece
        lda     #$01
        bra     _6805

; ------------------------------------------------------------------------------

; character 3

DrawCharSlot3Info:
@67f9:  ldx     #$2eee
        lda     #$02
        bra     _6805

; ------------------------------------------------------------------------------

; character 4

DrawCharSlot4Info:
@6800:  ldx     #$2f0e
        lda     #$03
; fall through

_6805:  sta     $18
        stx     $10         ; ++$10 = pointer to character graphics data
        lda     #$7e
        sta     $12
        jsr     IncTextPtr
        lda     ($48)       ; info type
        asl
        tax
        jmp     (.loword(DrawCharInfoTbl),x)

; ------------------------------------------------------------------------------

; character info text jump table (for each info type)
DrawCharInfoTbl:
@6817:  .addr   DrawCharInfo_00
        .addr   DrawCharInfo_01
        .addr   DrawCharInfo_02
        .addr   DrawCharInfo_03
        .addr   DrawCharInfo_04
        .addr   DrawCharInfo_05
        .addr   DrawCharInfo_06

; ------------------------------------------------------------------------------

; clear text
_c16825:
@6825:  tax
@6826:  lda     #$ff
        jsr     DrawMenuLetter
        dex
        bne     @6826
        rts

; ------------------------------------------------------------------------------

; character info text $00: name
DrawCharInfo_00:
@682f:  ldx     $10
        lda     #$06        ; 6 letters
        sta     $14
@6835:  lda     a:$0001,x     ; character name
        jsr     DrawMenuLetter
        inx
        dec     $14
        bne     @6835
        rts

; ------------------------------------------------------------------------------

; character info text $01: current hp
DrawCharInfo_01:
@6841:  lda     #$07        ; $2eb5 (current hp)
        jmp     DrawNum4

; ------------------------------------------------------------------------------

; character info text $06: condemned gauge
DrawCharInfo_06:
@6846:  lda     $18
        tax
        lda     $61a6,x     ; condemned number
        bra     DrawGaugeText

; ------------------------------------------------------------------------------

; character info text $05: morph gauge
DrawCharInfo_05:
@684e:  lda     $18
        tax
        lda     $61a2,x     ; morph gauge value
; fall through

; ------------------------------------------------------------------------------

; [ write gauge text ]

DrawGaugeText:
@6854:  lsr
        and     #$fc        ; get pointer to appropriate gauge text
        tax
        lda     #$f9        ; left end of gauge
        jsr     DrawMenuLetter
        lda     #$04        ; 4 bytes of text
        sta     $1a
@6861:  lda     f:GaugeTextTbl,x
        jsr     DrawMenuLetter
        inx
        dec     $1a
        bne     @6861
        lda     #$fa        ; right end of gauge
        jmp     DrawMenuLetter

; ------------------------------------------------------------------------------

; character info text $02: atb gauge or max hp
DrawCharInfo_02:
@6872:  lda     $2021       ; atb gauge setting
        and     #$01
        beq     @6898       ; branch if off

; draw ATB gauge
        lda     $4e
        pha
        lda     $18
        tax
        lda     $619e,x     ; atb gauge
        cmp     #$ff
        bne     @688a       ; branch if not full

; ATB gauge full
        lda     #$29        ; palette 2
        bra     @688c

; ATB gauge filling
@688a:  lda     #$35        ; palette 7
@688c:  sta     $4e
        lda     $619e,x     ; atb gauge
        jsr     DrawGaugeText
        pla
        sta     $4e
        rts

; draw max hp (gauge off)
@6898:  lda     #$ce        ; '~'
        jsr     DrawMenuLetter
        lda     #$09        ; $2eb7 (max hp)
        jsr     DrawNum4
        lda     #$ff
        jmp     DrawMenuLetter

; ------------------------------------------------------------------------------

; character info text $03: current mp
DrawCharInfo_03:
@68a7:  lda     #$0b        ; $2eb9 (current mp)
        jmp     DrawNum3

; ------------------------------------------------------------------------------

; atb/morph/swdtech gauge text
GaugeTextTbl:
@68ac:  .byte   $f1,$f0,$f0,$f0
        .byte   $f2,$f0,$f0,$f0
        .byte   $f3,$f0,$f0,$f0
        .byte   $f4,$f0,$f0,$f0
        .byte   $f5,$f0,$f0,$f0
        .byte   $f6,$f0,$f0,$f0
        .byte   $f7,$f0,$f0,$f0
        .byte   $f8,$f0,$f0,$f0
        .byte   $f8,$f1,$f0,$f0
        .byte   $f8,$f2,$f0,$f0
        .byte   $f8,$f3,$f0,$f0
        .byte   $f8,$f4,$f0,$f0
        .byte   $f8,$f5,$f0,$f0
        .byte   $f8,$f6,$f0,$f0
        .byte   $f8,$f7,$f0,$f0
        .byte   $f8,$f8,$f0,$f0
        .byte   $f8,$f8,$f1,$f0
        .byte   $f8,$f8,$f2,$f0
        .byte   $f8,$f8,$f3,$f0
        .byte   $f8,$f8,$f4,$f0
        .byte   $f8,$f8,$f5,$f0
        .byte   $f8,$f8,$f6,$f0
        .byte   $f8,$f8,$f7,$f0
        .byte   $f8,$f8,$f8,$f0
        .byte   $f8,$f8,$f8,$f1
        .byte   $f8,$f8,$f8,$f2
        .byte   $f8,$f8,$f8,$f3
        .byte   $f8,$f8,$f8,$f4
        .byte   $f8,$f8,$f8,$f5
        .byte   $f8,$f8,$f8,$f6
        .byte   $f8,$f8,$f8,$f7
        .byte   $f8,$f8,$f8,$f8

; ------------------------------------------------------------------------------

; character info text $04: max mp
DrawCharInfo_04:
_c1692c:
@692c:  lda     #$0d        ; $2ebb (max mp)
        jmp     DrawNum3

; ------------------------------------------------------------------------------

; [ convert 4 digit number to text ]

HexToDec4:
@6931:  phy
        tay
        longa
        lda     [$10],y
        tax
        shorta0
        lda     #$b4        ; '0'
        sta     $68
        jsr     HexToDec
        jsr     TrimZeroes4
        ldx     $00
        ply
        rts

; ------------------------------------------------------------------------------

; [ convert 3 digit number to text ]

HexToDec3:
@6949:  phy
        tay
        longa
        lda     [$10],y
        tax
        shorta0
        lda     #$b4        ; '0'
        sta     $68
        jsr     HexToDec
        jsr     TrimZeroes3
        ldx     $00
        ply
        rts

; ------------------------------------------------------------------------------

; [ clear leading zeroes (3 digit number) ]

TrimZeroes3:
@6961:  ldx     $00
@6963:  lda     $69,x       ; digit text
        sec
        sbc     $68
        bne     @6974       ; return if digit is not zero
        lda     #$c8        ; ' ' (for bg1 text)
        sta     $69,x
        inx                 ; next digit
        cpx     #3
        bne     @6963
@6974:  rts

; ------------------------------------------------------------------------------

; [ write 4 digit number text ]

DrawNum4:
@6975:  jsr     HexToDec4
@6978:  lda     $69,x
        jsr     DrawMenuLetter
        inx
        cpx     #4
        bne     @6978
        rts

; ------------------------------------------------------------------------------

; [ write 3 digit number text ]

DrawNum3:
@6984:  jsr     HexToDec3
@6987:  lda     $6a,x
        jsr     DrawMenuLetter
        inx
        cpx     #3
        bne     @6987
        rts

; ------------------------------------------------------------------------------

; [ menu text special string $0b: monster name ]

MenuTextCmd_0b:
@6993:  jsr     IncTextPtr
        lda     #$0a        ; 10 letters
        sta     $10
        lda     ($48)
        asl
        tax
        longa
        lda     $200d,x     ; monster name (bank c2 manages this data)
        cmp     #$ffff
        bne     @69b8
        shorta0
        inc     $10
@69ad:  lda     #$ff
        jsr     DrawMenuLetter
        inx
        dec     $10
        bne     @69ad
        rts
@69b8:  longa
        sta     $24
        lda     #10      ; 10 letters
        sta     $22
        jsr     Mult816
        shorta0
        ldx     $26
@69c9:  lda     f:MonsterName,x
        jsr     DrawMenuLetter
        inx                 ; next letter
        dec     $10
        bne     @69c9
        lda     #$ff        ; space
        jmp     DrawMenuLetter

; ------------------------------------------------------------------------------

; [ menu text special string $0c: unused ]

MenuTextCmd_0c:
@69da:  jsr     IncTextPtr
        rts

; ------------------------------------------------------------------------------

; [ menu text special string $0d: battle command name ]

MenuTextCmd_0d:
@69de:  jsr     IncTextPtr
        lda     ($48)
        cmp     #$ff
        bne     @69ec       ; branch if command slot is empty
        lda     #7
        jmp     DrawSpaces
@69ec:  xba
        lda     #$07
        sta     $10
        jsr     MultAB
        longa
        lda     f:hRDMPYL
        tax
        shorta0
@69fe:  lda     f:BattleCmdName,x   ; battle command name
        jsr     DrawMenuLetter
        inx
        dec     $10
        bne     @69fe
        rts

; ------------------------------------------------------------------------------

; [ menu text special string $10: status name ]

MenuTextCmd_10:
@6a0b:  jsr     IncTextPtr
        lda     ($48)
        cmp     #$ff
        bne     @6a19
        lda     #10
        jmp     DrawSpaces
@6a19:  xba
        lda     #$0a
        sta     $10
        jsr     MultAB
        longa
        lda     f:hRDMPYL
        tax
        shorta0
@6a2b:  lda     f:StatusName,x
        jsr     DrawMenuLetter
        inx
        dec     $10
        bne     @6a2b
        rts

; ------------------------------------------------------------------------------

; [ menu text special string $12: item symbol name ]

MenuTextCmd_12:
@6a38:  jsr     IncTextPtr
        lda     ($48)
        cmp     #$ff
        bne     @6a46
@6a41:  lda     #7
        jmp     DrawSpaces
@6a46:  xba
        lda     #ITEM_NAME_SIZE
        sta     $10
        jsr     MultAB
        longa
        lda     f:hRDMPYL
        tax
        shorta0
        lda     f:ItemName,x   ; item name (first character)
        cmp     #$ff
        beq     @6a41       ; branch if no symbol
        sec
        sbc     #$d8
        xba
        lda     #ITEM_TYPE_NAME_SIZE
        sta     $10
        jsr     MultAB
        longa
        lda     f:hRDMPYL
        tax
        shorta0
@6a75:  lda     f:ItemTypeName,x
        jsr     DrawMenuLetter
        inx
        dec     $10
        bne     @6a75
        rts

; ------------------------------------------------------------------------------

; [ menu text special string $0e: item name ]

MenuTextCmd_0e:
@6a82:  jsr     IncTextPtr
        lda     ($48)
        cmp     #$ff
        bne     @6a90
        lda     #ITEM_NAME_SIZE
        jmp     DrawSpaces
@6a90:  xba
        lda     #ITEM_NAME_SIZE
        sta     $10
        jsr     MultAB
        longa
        lda     f:hRDMPYL
        tax
        shorta0
@6aa2:  lda     f:ItemName,x
        jsr     DrawMenuLetter
        inx
        dec     $10
        bne     @6aa2
        rts

; ------------------------------------------------------------------------------

; [ menu text special string $11:  ]

MenuTextCmd_11:
@6aaf:  jsr     MenuTextCmd_0f
        lda     ($48)
        cmp     #$ff
        beq     @6abd
        cmp     #$36
        bcc     @6abd
        rts
@6abd:  lda     #3
        jmp     DrawSpaces

; ------------------------------------------------------------------------------

; [ menu text special string $0f: attack name ]

MenuTextCmd_0f:
@6ac2:  jsr     IncTextPtr
        lda     ($48)
        cmp     #$ff
        bne     @6ad0
        lda     #7
        jmp     DrawSpaces
@6ad0:  cmp     #$36
        bcc     @6b1c       ; branch if a spell
        cmp     #$51
        bcc     @6afa       ; branch if an esper attack

; normal attack
        sec
        sbc     #$51
        xba
        lda     #ATTACK_NAME_SIZE
        sta     $10
        jsr     MultAB
        longa
        lda     f:hRDMPYL
        tax
        shorta0
@6aed:  lda     f:AttackName,x
        jsr     DrawMenuLetter
        inx
        dec     $10
        bne     @6aed
        rts

; esper attack
@6afa:  sec
        sbc     #$36
        xba
        lda     #GENJU_NAME_SIZE
        sta     $10
        jsr     MultAB
        longa
        lda     f:hRDMPYL
        tax
        shorta0
@6b0f:  lda     $e6f675,x   ; esper attack name (bad pointer, carryover from ff6j?)
        jsr     DrawMenuLetter
        inx
        dec     $10
        bne     @6b0f
        rts

; spell
@6b1c:  xba
        lda     #MAGIC_NAME_SIZE
        sta     $10
        jsr     MultAB
        longa
        lda     f:hRDMPYL
        tax
        shorta0
@6b2e:  lda     f:MagicName,x   ; spell name
        jsr     DrawMenuLetter
        inx
        dec     $10
        bne     @6b2e
        rts

; ------------------------------------------------------------------------------

; [ draw spaces (tab) ]

; A: number of spaces

DrawSpaces:
@6b3b:  sta     $1a
@6b3d:  lda     #$ff
        jsr     DrawMenuLetter
        dec     $1a
        bne     @6b3d
        rts

; ------------------------------------------------------------------------------

; [ init ??? ]

_c16b47:
sin_init:
@6b47:  ldy     $00
@6b49:  clr_a
        sta     $5f6d,y
        sta     $5f8d,y
        sta     $5f9d,y
        lda     #$40
        sta     $5f7d,y
        iny
        cpy     #$0010
        bne     @6b49
        rts

; ------------------------------------------------------------------------------

; [  ]

; unused ???

sin_p_add:
@6b5f:  pha
        clc
        adc     $5f6d,y
        sta     $5f6d,y
        pla
        clc
        adc     $5f7d,y
        sta     $5f7d,y
        rts

; ------------------------------------------------------------------------------

; [  ]

; unused ???

_c16b70:
r_add:
@6b70:  pha
        clc
        adc     $5f8d,y
        sta     $5f8d,y
        pla
        clc
        adc     $5f9d,y
        sta     $5f9d,y
        rts

; ------------------------------------------------------------------------------

; [ get sine of vector ]

; unused ???

_c16b81:
sin_data_get:
@6b81:  lda     $5f8d,y
        asl
        sta     $24
        lda     $5f6d,y
        jmp     CalcSine8

; ------------------------------------------------------------------------------

; [ get cosine of vector ]

; unused ???

_c16b8d:
cos_get:
@6b8d:  lda     $5f9d,y
        asl
        sta     $24
        lda     $5f7d,y
        jmp     CalcSine8

; ------------------------------------------------------------------------------

; [ A = $24 * sin (A) ]

CalcSine8:
@6b99:  tax
        lda     f:SineTbl8,x
        bpl     @6bba
        eor     #$ff
        sta     f:hWRMPYA
        lda     $24
        sta     f:hWRMPYB
        lda     #$ff
        sta     $67
        sta     $67
        lda     f:hRDMPYH
        eor     #$ff
        inc
        rts
@6bba:  sta     f:hWRMPYA
        lda     $24
        sta     f:hWRMPYB
        lda     #$00
        sta     $67
        sta     $67
        lda     f:hRDMPYH
        rts

; ------------------------------------------------------------------------------

; [ +++$26 = +$22 * $24 * 2 ]

SineMult:
@6bcf:  shortai
        phb
        lda     #$00
        pha
        plb
        ldx     $24
        stx     hWRMPYA
        lda     $22
        sta     hWRMPYB
        longa
        ldy     $23
        nop
        lda     hRDMPYL       ; +$26 = $22 * $24
        stx     hWRMPYA
        sty     hWRMPYB
        sta     $26
        stz     $28
        longi
        lda     hRDMPYL       ; +a = $24 * $23
        clc
        adc     $27
        sta     $27
        asl     $26
        rol     $28
        plb
        rts

; ------------------------------------------------------------------------------

; [  ]

_c16c02:
sin_data_get_w2:
@6c02:  longi
        lda     $16
        and     #$01ff
        tax
        lda     f:SineTbl16,x
        bpl     @6c3f
        shorti
        eor     #$ffff
        ldx     $24
        stx     hWRMPYA
        tax
        stx     hWRMPYB
        sta     $22
        xba
        tax
        lda     hRDMPYL
        stx     hWRMPYB
        sta     $26
        stz     $28
        clc
        lda     hRDMPYL
        adc     $27
        sta     $27
        asl     $26
        rol     $28
        lda     $28
        eor     #$ffff
        inc
        rts
@6c3f:  shorti
        ldx     $24
        stx     hWRMPYA
        tax
        stx     hWRMPYB
        sta     $22
        xba
        tax
        lda     hRDMPYL
        stx     hWRMPYB
        sta     $26
        stz     $28
        clc
        lda     hRDMPYL
        adc     $27
        sta     $27
        asl     $26
        rol     $28
        lda     $28
        rts

; ------------------------------------------------------------------------------

; [ +$28 = +$24 * sin (a) ]

CalcSine16:
        .i16
@6c67:  longa
        and     #$00ff
        asl
        tax
        lda     f:SineTbl16,x
        bpl     @6c88
        eor     #$ffff
        sta     $22
        jsr     SineMult
        lda     $28
        eor     #$ffff
        inc
        sta     $28
        shorta0
        rts
@6c88:  sta     $22
        jsr     SineMult
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ calculate hypotenuse & angle ]

;  $7d: x_1
;  $7e: y_1
;  $7f: x_2
;  $80: y_2
;  $85: angle (out)
; +$86: hypotenuse length (out)
; +$88: dx (out)
; +$8a: dy (out)

CalcVector:
@6c91:  lda     $7d
        sec
        sbc     $7f
        sta     $81
        lda     #$00
        sbc     #$00
        sta     $82
        lda     $7e
        sec
        sbc     $80
        sta     $83
        lda     #$00
        sbc     #$00
        sta     $84
        lda     $81
        eor     $82
        sec
        sbc     $82
        sta     $88
        stz     $89
        lda     $83
        eor     $84
        sec
        sbc     $84
        sta     $8a
        stz     $8b
        longa
        lda     $88
        lsr3
        sta     $86
        lda     $8a
        and     #$fff8
        asl2
        clc
        adc     $86
        sta     $8c
        asl
        tax
        lda     $f800,x
        sta     $86
        shorta0
        ldx     $8c
        lda     f:_c2c945,x
        sta     $85
        lda     $82
        bmi     @6d00
        lda     $84
        bmi     @6cf8
        lda     #$80
        clc
        adc     $85
        sta     $85
        rts
@6cf8:  lda     #$80
        sec
        sbc     $85
        sta     $85
        rts
@6d00:  lda     $84
        bmi     @6d0b
        lda     #$00
        sec
        sbc     $85
        sta     $85
@6d0b:  rts

; ------------------------------------------------------------------------------

; [ init ??? ]

_c16d0c:
length_init:
@6d0c:  ldx     #.loword(_c2cd45)      ; source = $c2cd45
        stx     $f3
        lda     #^_c2cd45
        sta     $f5
        ldx     #$a400      ; destination = $7fa400
        stx     $f6
        lda     #$7f
        sta     $f8
        jsl     Decompress_ext
        ldx     #$f800
        stx     $10
        longa
        clr_ax
@6d2b:  clr_a
        sta     $12
        tay
@6d2f:  lda     $7fa400,x
        and     #$00ff
        clc
        adc     $12
        sta     $12
        sta     ($10),y
        iny2
        inx
        cpy     #$0040
        bne     @6d2f
        lda     $10
        clc
        adc     #$0040
        sta     $10
        cpx     #$0400
        bne     @6d2b
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ get pointer to current character slot data (battle menu) ]

_c16d56:
get_buf_input_poi:
@6d56:  lda     $7b80
        and     #$03
        asl3
        tay
        rts

; ------------------------------------------------------------------------------

; unused ???

_c16d60:
@6d60:  .byte   $01,$00,$ff,$ff,$ff,$00,$01,$ff,$01,$00,$01,$ff,$ff,$00,$01,$00

; ------------------------------------------------------------------------------

; [ validate selected target group ]

; return clear carry if no valid targets in group

ValidateSelTargetGrp:
@6d70:  and     #$03
        pha
        tax
        and     #$01
        beq     @6d86                   ; branch if monster targets
        lda     $201d
        and     $61ac
        and     $61ad
        and     $6193
        bra     @6d88
@6d86:  lda     $92
@6d88:  beq     @6d8d
        pla
        sec
        rts
@6d8d:  pla
        clc
        rts

; ------------------------------------------------------------------------------

; [ update menu state $38: target select ]

UpdateMenuState_38:
@6d90:  lda     $7bcb
        jne     @6f57                   ; branch if closing menu
        lda     $7a84
        and     #TARGET::AUTO_CONFIRM
        jne     @6f25                   ; branch if auto-confirm
        lda     $201d
        and     $61ac
        and     $61ad
        and     $6193
        and     $7b7d
        bne     @6dbd                   ; branch if any characters are valid
        lda     $92
        and     $7b7e
        jeq     @6f57                   ; branch if no monsters are valid
@6dbd:  lda     $7a84                   ; copy targeting flags
        sta     $36
        bpl     @6dd1                   ; branch if not roulette cursor

; roulette cursor
        lda     $62b4
        beq     @6dd4
        dec     $62b2
        bne     @6e3d
        jmp     @6f25
@6dd1:  jmp     @6e40
@6dd4:  lda     $62b1
        beq     @6df6
        lda     $0e
        and     #$07
        bne     @6e3d                   ;  every 8 frames
        dec     $62b2
        bne     @6dfc
        lda     #$01
        sta     $62b4
        lda     #$20
        sta     $62b2
        lda     #$01
        sta     $7b7f
        jmp     @6f69
@6df6:  lda     $0e
        and     #$03
        bne     @6e3d
@6dfc:  inc     $94
        inc     $62b3
        lda     $62b3
        and     #$08
        beq     @6e29
        lda     $62b3
        and     #$07
        tax
        lda     $201d
        and     $61ac
        and     $61ad
        and     $6193
        and     f:BitOrTbl,x
        beq     @6dfc
        sta     $7b7d
        stz     $7b7e
        jmp     @6f05
@6e29:  lda     $62b3
        and     #$07
        tax
        lda     f:BitOrTbl,x
        and     $92
        beq     @6dfc
        sta     $7b7e
        stz     $7b7d
@6e3d:  jmp     @6f05

; one target group (seems to be bugged)
@6e40:  lda     $36
        andflg  TARGET, {INIT_MASK, MANUAL}
        cmp     #TARGET::INIT_GROUP
        bne     @6e82
        lda     $05
        and     #$03
        beq     @6e82                   ; left or right not pressed
        inc     $94                     ; play sound effect
        lda     $05
        and     #$02
        bne     @6e6c

; right button
        lda     $7ace
        and     #$02
        bne     @6e82
        lda     $7ace
        inc2
        jsr     ValidateSelTargetGrp
        bcc     @6e82                   ; branch if no valid targets
        sta     $7ace
        bra     @6e9a

; left button
@6e6c:  lda     $7ace
        and     #$02
        beq     @6e82
        lda     $7ace
        dec2
        jsr     ValidateSelTargetGrp
        bcc     @6e82                   ; branch if no valid targets
        sta     $7ace
        bra     @6e9a

; check if player can move target cursor manually
@6e82:  lda     $36
        and     #TARGET::MANUAL
        beq     @6f05

; check L and R buttons
        lda     $04
        and     #$30
        beq     @6ed3
        cmp     #$30
        beq     @6ed3                   ; branch if running away
        inc     $94                     ; play sound effect
        lda     $36
        and     #TARGET::MULTI_TARGET
        beq     @6ed3                   ; branch if no multi-target
@6e9a:  lda     $7ace
        and     #$01
        beq     @6ebf                   ; branch if targeting monsters

; select all characters in target group
        lda     $7ace
        tax
        lda     $201d
        and     $61ac
        and     $61ad
        and     $6193
        and     $7b79,x
        sta     $7b7d                   ; set characters with cursors shown
        lda     #$01
        sta     $7b7f
        jmp     @6f05

; select all monsters in target group
@6ebf:  lda     $7ace
        tax
        lda     $92
        and     $7b79,x
        sta     $7b7e                   ; set monsters with cursors shown
        lda     #$01
        sta     $7b7f
        jmp     @6f05

; check directions
@6ed3:  lda     $05
        and     #$0f
        beq     @6edb
        inc     $94                     ; play sound effect
@6edb:  lda     $05
        cmp     #$08
        bne     @6ee7
        jsr     TargetSelectUp
        jmp     @6f05
@6ee7:  cmp     #$04
        bne     @6ef1
        jsr     TargetSelectDown
        jmp     @6f05
@6ef1:  cmp     #$02
        bne     @6efb
        jsr     TargetSelectLeft
        jmp     @6f05
@6efb:  cmp     #$01
        bne     @6f05
        jsr     TargetSelectRight
        jmp     @6f05

; check A button
@6f05:  lda     $04
        bpl     @6f4c
        inc     $96                     ; play sound effect
        lda     $7a84
        bpl     @6f25                   ; branch if not roulette
        lda     $62b1
        bne     @6f4c
        inc     $62b1
        jsr     Rand                    ; random [8..15]
        and     #$07
        clc
        adc     #$08
        sta     $62b2
        bra     @6f4c

; confirm the selected target
@6f25:  jsr     _c17096
        stz     $7b7d
        stz     $7b7e
        stz     $7b7f
        lda     $7a83
        sta     $7bc2
        lda     $7ae8
        beq     @6f45
        lda     $7ae9
        bne     @6f45
        inc     $7ae9
        rts

;
@6f45:  inc     $7bcb
        inc     $7b80
        rts

; check if selection cancelled
@6f4c:  lda     $09
        bpl     @6f69                   ; check B button
        lda     $62b1
        bne     @6f69
        inc     $96                     ; play sound effect

; close menu
@6f57:  stz     $7b7d
        stz     $7b7e
        stz     $7b7f
        lda     $7a83
        sta     $7bc2
        stz     $7ae9
@6f69:  rts

; ------------------------------------------------------------------------------

; blitz code button masks
BlitzButtonMaskTbl:
@6f6a:  .word   $ffff                   ; BLITZ_CODE_NONE
        .word   $0080                   ; BLITZ_CODE_A_BUTTON
        .word   $8000                   ; BLITZ_CODE_B_BUTTON
        .word   $0040                   ; BLITZ_CODE_X_BUTTON
        .word   $4000                   ; BLITZ_CODE_Y_BUTTON
        .word   $0020                   ; BLITZ_CODE_L_BUTTON
        .word   $0010                   ; BLITZ_CODE_R_BUTTON
        .word   $0600                   ; BLITZ_CODE_DOWN_LEFT
        .word   $0400                   ; BLITZ_CODE_DOWN
        .word   $0500                   ; BLITZ_CODE_DOWN_RIGHT
        .word   $0100                   ; BLITZ_CODE_RIGHT
        .word   $0900                   ; BLITZ_CODE_UP_RIGHT
        .word   $0800                   ; BLITZ_CODE_UP
        .word   $0a00                   ; BLITZ_CODE_UP_LEFT
        .word   $0200                   ; BLITZ_CODE_LEFT

; ------------------------------------------------------------------------------

; [ blitz code data format (12 bytes each) ]

;   0-10: button inputs (including A button at the end)
;   11: number of buttons * 2

; ------------------------------------------------------------------------------

.macro begin_blitz_code _id
        ; save where the blitz starts
        .ident(.sprintf("BlitzCode_%04x", _id)) := *
.endmac

.macro end_blitz_code _id
        ; add padding
        .local _blitz_length
        _blitz_length = * - .ident(.sprintf("BlitzCode_%04x", _id))
        .res 11 - _blitz_length, BLITZ_CODE_NONE
        ; define the number of buttons
        .byte _blitz_length * 2
.endmac

; ------------------------------------------------------------------------------

.pushseg
.segment "blitz_code"

; c4/7a40
BlitzCode:

; ------------------------------------------------------------------------------

; 0: pummel
        begin_blitz_code 0
        .byte   BLITZ_CODE_LEFT
        .byte   BLITZ_CODE_RIGHT
        .byte   BLITZ_CODE_LEFT
        .byte   BLITZ_CODE_A_BUTTON
        end_blitz_code 0

; ------------------------------------------------------------------------------

; 1: aura bolt
        begin_blitz_code 1
        .byte   BLITZ_CODE_DOWN
        .byte   BLITZ_CODE_DOWN_LEFT
        .byte   BLITZ_CODE_LEFT
        .byte   BLITZ_CODE_A_BUTTON
        end_blitz_code 1

; ------------------------------------------------------------------------------

; 2: suplex
        begin_blitz_code 2
        .byte   BLITZ_CODE_X_BUTTON
        .byte   BLITZ_CODE_Y_BUTTON
        .byte   BLITZ_CODE_DOWN
        .byte   BLITZ_CODE_UP
        .byte   BLITZ_CODE_A_BUTTON
        end_blitz_code 2

; ------------------------------------------------------------------------------

; 3: fire dance
        begin_blitz_code 3
        .byte   BLITZ_CODE_LEFT
        .byte   BLITZ_CODE_DOWN_LEFT
        .byte   BLITZ_CODE_DOWN
        .byte   BLITZ_CODE_DOWN_RIGHT
        .byte   BLITZ_CODE_RIGHT
        .byte   BLITZ_CODE_A_BUTTON
        end_blitz_code 3

; ------------------------------------------------------------------------------

; 4: matra
        begin_blitz_code 4
        .byte   BLITZ_CODE_R_BUTTON
        .byte   BLITZ_CODE_L_BUTTON
        .byte   BLITZ_CODE_R_BUTTON
        .byte   BLITZ_CODE_L_BUTTON
        .byte   BLITZ_CODE_X_BUTTON
        .byte   BLITZ_CODE_Y_BUTTON
        .byte   BLITZ_CODE_A_BUTTON
        end_blitz_code 4

; ------------------------------------------------------------------------------

; 5: air blade
        begin_blitz_code 5
        .byte   BLITZ_CODE_UP
        .byte   BLITZ_CODE_UP_RIGHT
        .byte   BLITZ_CODE_RIGHT
        .byte   BLITZ_CODE_DOWN_RIGHT
        .byte   BLITZ_CODE_DOWN
        .byte   BLITZ_CODE_DOWN_LEFT
        .byte   BLITZ_CODE_LEFT
        .byte   BLITZ_CODE_A_BUTTON
        end_blitz_code 5

; ------------------------------------------------------------------------------

; 6: spiraler
        begin_blitz_code 6
        .byte   BLITZ_CODE_R_BUTTON
        .byte   BLITZ_CODE_L_BUTTON
        .byte   BLITZ_CODE_X_BUTTON
        .byte   BLITZ_CODE_Y_BUTTON
        .byte   BLITZ_CODE_RIGHT
        .byte   BLITZ_CODE_LEFT
        .byte   BLITZ_CODE_A_BUTTON
        end_blitz_code 6

; ------------------------------------------------------------------------------

; 7: bum rush
        begin_blitz_code 7
        .byte   BLITZ_CODE_LEFT
        .byte   BLITZ_CODE_UP_LEFT
        .byte   BLITZ_CODE_UP
        .byte   BLITZ_CODE_UP_RIGHT
        .byte   BLITZ_CODE_RIGHT
        .byte   BLITZ_CODE_DOWN_RIGHT
        .byte   BLITZ_CODE_DOWN
        .byte   BLITZ_CODE_DOWN_LEFT
        .byte   BLITZ_CODE_LEFT
        .byte   BLITZ_CODE_A_BUTTON
        end_blitz_code 7

; ------------------------------------------------------------------------------

.popseg

; pointers to blitz codes
BlitzCodePtrs:
@6f88:
.repeat BLITZ_CODE_ARRAY_LENGTH, i
        .byte   i * BLITZ_CODE_SIZE
.endrep

; ------------------------------------------------------------------------------

; [ check blitz code ]

CheckBlitzCode:
@6f90:  stz     $36                     ; current blitz index being checked
@6f92:  lda     $36
        tax
        lda     f:BlitzCodePtrs,x
        tax
        lda     f:BlitzCode+11,x        ; length of code
        dec2
        longa
        sta     $38
        clr_ay
@6fa6:  lda     f:BlitzCode,x           ; blitz codes
        and     #$00ff
        asl
        phx
        tax
        lda     f:BlitzButtonMaskTbl,x
        sta     $ea1e,y
        plx
        iny2
        inx
        cpy     #$0014
        bne     @6fa6
        clr_ay
@6fc2:  lda     $ea1e,y
        sta     $2c
        lda     $e9fe,y
        and     $2c
        beq     @6fea                   ; branch if button masks don't match
        iny2
        cpy     $38
        bne     @6fc2                   ; branch if this was not the last button
        lda     $e9fc,y
        and     #$0080
        bne     @6fe4                   ; branch if the A button was not pressed
        lda     $e9fe,y
        and     #$0080
        beq     @6fea
@6fe4:  clr_a                           ; success, use this blitz code
        shorta
        lda     $36
        rts
@6fea:  clr_a                           ; next blitz code
        shorta
        inc     $36
        lda     $36
        cmp     #$08
        bne     @6f92
        lda     #$ff                    ; no codes matched
        rts

; ------------------------------------------------------------------------------

; [ update menu state $3d: blitz ]

UpdateMenuState_3d:
@6ff8:  lda     $7bcb
        beq     @7000
        jmp     @7083
@7000:  ldx     $0a
        beq     @702c       ; branch if no buttons are pressed
        ldx     $0a
        cpx     $e9e2
        beq     @7034       ; branch if buttons didn't change from last frame
        lda     #$40
        sta     $e9e4       ; reset blitz code counter to 64 frames
        lda     $e9e1
        and     #$0f
        asl
        tax
        inc     $e9e1       ; increment blitz button input pointer
        longa
        lda     $0a
        sta     $e9e2       ; combine buttons pressed this frame and buttons pressed last frame
        ora     $e9fe,x
        sta     $e9fe,x     ; save button input
        shorta0
        bra     @7034
@702c:  stx     $e9e2
        lda     #$01
        sta     $e9e5
@7034:  dec     $e9e4       ; decrement blitz code counter
        bne     @703e       ; branch if it didn't expire
        clr_ax
        stx     $e9fe       ; clear the first button input to invalidate the entire combo
@703e:  lda     $6268
        bpl     @707c       ; branch if a button is not pressed
        inc     $96         ; play cursor sound effect (select)
        jsr     CheckBlitzCode
        sta     $6168
        jsr     _c16d56
        lda     $6168
        sta     $2bb0,y     ; attack
        lda     $7b7d
        sta     $2bb1,y     ; character targets
        lda     $7b7e
        sta     $2bb2,y     ; monster targets
        lda     $62ca
        sta     $2bae,y     ; character slot
        stz     $7b7d
        stz     $7b7e
        stz     $7b7f
        lda     $7a83
        sta     $7bc2
        inc     $7bcb
        inc     $7b80
        rts
@707c:  lda     $6269
        bpl     @7095       ; branch if b button is not pressed
        inc     $96
@7083:  stz     $7b7d
        stz     $7b7e
        stz     $7b7f
        lda     $7a83
        sta     $7bc2
        stz     $7ae9
@7095:  rts

; ------------------------------------------------------------------------------

; [  ]

_c17096:
set_target_data:
@7096:  jsr     _c16d56
        lda     $7ae9
        beq     @70d3
        lda     $7a85
        sta     $2bb3,y
        lda     $2f47
        beq     @70c0
        lda     $7b7e
        and     #$20
        beq     @70b3
        lda     $2f47
@70b3:  ora     $7b7d
        sta     $2bb4,y
        lda     $7b7e
        and     #$1f
        bra     @70c9
@70c0:  lda     $7b7d
        sta     $2bb4,y
        lda     $7b7e
@70c9:  sta     $2bb5,y
        lda     $62ca
        sta     $2bae,y
        rts
@70d3:  lda     $7a85
        sta     $2bb0,y
        lda     $2f47
        beq     @70f5
        lda     $7b7e
        and     #$20
        beq     @70e8
        lda     $2f47
@70e8:  ora     $7b7d
        sta     $2bb1,y
        lda     $7b7e
        and     #$1f
        bra     @70fe
@70f5:  lda     $7b7d
        sta     $2bb1,y
        lda     $7b7e
@70fe:  sta     $2bb2,y
        lda     $7ae8
        bne     @710c
        lda     $62ca
        sta     $2bae,y
@710c:  lda     $2baf,y
        cmp     #$08
        beq     @7117
        cmp     #$01
        bne     @7133
@7117:  lda     $7a1e
        beq     @7167
        jsr     _c18e48
        ldy     $62ca
        lda     $894b,y
        and     #$01
        beq     @7148
        lda     $2b9d,x
        cmp     #$02
        bcc     @7134
        dec     $2b9d,x
@7133:  rts
@7134:  lda     #$ff
        sta     $2b9a,x
        lda     #$80
        sta     $2b9b,x
        stz     $2b9c,x
        stz     $2b9d,x
        stz     $2b9e,x
        rts
@7148:  lda     $2b89,x
        cmp     #$02
        bcc     @7153
        dec     $2b89,x
        rts
@7153:  lda     #$ff
        sta     $2b86,x
        lda     #$80
        sta     $2b87,x
        stz     $2b88,x
        stz     $2b89,x
        stz     $2b8a,x
        rts
@7167:  clr_ax
        lda     $2bb0,y
@716c:  cmp     $2686,x
        beq     @717c
        inx5
        cpx     #$0500
        bne     @716c
        rts
@717c:  lda     $2689,x
        cmp     #$02
        bcc     @7187
        dec     $2689,x
        rts
@7187:  lda     #$ff
        sta     $2686,x
        lda     #$80
        sta     $2687,x
        stz     $2688,x
        stz     $2689,x
        stz     $268a,x
        rts

; ------------------------------------------------------------------------------

; [  ]

GetAttackerCursorPosition:
@719b:  lda     #$ff
        sta     $73
        sta     $74
        sta     $75
        jsr     _c17372
        asl
        tax
        longa
        lda     $800f,x
        lsr3
        sta     $36
        lda     $801b,x
        lsr3
        sta     $38
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

GetTargetCursorPosition:
@71be:  lda     $7ace
        tax
        lda     $7b79,x
        pha
        tya
        clc
        adc     f:_c17767,x
        tax
        lda     $7a86,x
        tax
        pla
        and     $92
        and     f:MonsterMaskTbl,x
        beq     @71ea
        lda     $7ace
        tax
        tya
        clc
        adc     f:_c17767,x
        tax
        lda     $7a86,x
        bpl     @71ec
@71ea:  clc
        rts
@71ec:  asl
        tax
        longa
        lda     $800f,x
        lsr3
        sta     $3a
        lda     $801b,x
        lsr3
        sta     $3c
        lda     $3a
        sec
        sbc     $36
        sta     $3e
        lda     $3c
        sec
        sbc     $38
        sta     $40
        shorta0
        sec
        rts

; ------------------------------------------------------------------------------

; [ get index of last monster ??? ]

_c17213:
get_mon_length:
@7213:  longa
        lda     $3e
        bpl     @721f
        eor     #$ffff
        inc
        sta     $3e
@721f:  lda     $40
        bpl     @7229
        eor     #$ffff
        inc
        sta     $40
@7229:  shorta0
        lda     $3e
        sta     $2c
        sta     $2e
        jsr     Mult8NoHW
        ldx     $30
        phx
        lda     $40
        sta     $2c
        sta     $2e
        jsr     Mult8NoHW
        longa
        pla
        clc
        adc     $30
        cmp     $73
        bcs     @7254
        sta     $73
        shorta0
        tya
        sta     $75
        rts
@7254:  shorta0
        rts

; ------------------------------------------------------------------------------

; [ select the next monster up ]

SelectMonsterUp:
@7258:  jsr     GetAttackerCursorPosition
        clr_ay
@725d:  jsr     GetTargetCursorPosition
        bcs     @726c
@7262:  shorta0
        iny
        cpy     #6
        bne     @725d
        rts
@726c:  longa
        lda     $40
        bpl     @7262
        lda     $3e
        bpl     @7280
        lda     $40
        cmp     $3e
        beq     @7289
        bcc     @7289
        bra     @7262
@7280:  lda     $40
        clc
        adc     $3e
        beq     @7289
        bpl     @7262
@7289:  shorta0
        jsr     _c17213
        jmp     @7262

; ------------------------------------------------------------------------------

; [ select the next monster down ]

SelectMonsterDown:
@7292:  jsr     GetAttackerCursorPosition
        clr_ay
@7297:  jsr     GetTargetCursorPosition
        bcs     @72a6
@729c:  shorta0
        iny
        cpy     #6
        bne     @7297
        rts
@72a6:  longa
        lda     $40
        beq     @729c
        bmi     @729c
        lda     $3e
        bmi     @72bc
        lda     $3e
        cmp     $40
        bcc     @72c5
        beq     @72c5
        bra     @729c
@72bc:  lda     $40
        clc
        adc     $3e
        beq     @72c5
        bmi     @729c
@72c5:  shorta0
        jsr     _c17213
        jmp     @729c

; ------------------------------------------------------------------------------

; [ select the next monster to the left ]

SelectMonsterLeft:
@72ce:  jsr     GetAttackerCursorPosition
        clr_ay
@72d3:  jsr     GetTargetCursorPosition
        bcs     @72e2
@72d8:  shorta0
        iny
        cpy     #6
        bne     @72d3
        rts
@72e2:  longa
        lda     $3e
        bpl     @72d8
        lda     $40
        bpl     @72f6
        lda     $3e
        cmp     $40
        bcc     @72ff
        beq     @72ff
        bra     @72d8
@72f6:  lda     $40
        clc
        adc     $3e
        beq     @72ff
        bpl     @72d8
@72ff:  shorta0
        jsr     _c17213
        jmp     @72d8

; ------------------------------------------------------------------------------

; [ select the next monster to the right ]

SelectMonsterRight:
@7308:  jsr     GetAttackerCursorPosition
        clr_ay
@730d:  jsr     GetTargetCursorPosition
        bcs     @731c
@7312:  shorta0
        iny
        cpy     #6
        bne     @730d
        rts
@731c:  longa
        lda     $3e
        beq     @7312
        bmi     @7312
        lda     $40
        bmi     @7332
        lda     $40
        cmp     $3e
        beq     @733b
        bcc     @733b
        bra     @7312
@7332:  lda     $40
        clc
        adc     $3e
        beq     @733b
        bmi     @7312
@733b:  shorta0
        jsr     _c17213
        jmp     @7312

; ------------------------------------------------------------------------------

; [ select the next character down ]

SelectCharDown:
@7344:  lda     $7acf
        inc
        and     #$03
        sta     $7acf
        bne     @7359
        lda     $7ace
        inc2
        and     #$03
        sta     $7ace
@7359:  rts

; ------------------------------------------------------------------------------

; [ select next character up ]

SelectCharUp:
@735a:  lda     $7acf
        dec
        and     #$03
        sta     $7acf
        cmp     #$03
        bne     @7371
        lda     $7ace
        dec2
        and     #$03
        sta     $7ace
@7371:  rts

; ------------------------------------------------------------------------------

; [  ]

_c17372:
get_no:
@7372:  lda     $7ace
        tay
        tax
        lda     f:_c17767,x
        clc
        adc     $7acf
        tax
        lda     $7a86,x
        rts

; ------------------------------------------------------------------------------

; [  ]

TargetSelectUp:
@7384:  lda     $7ace
        and     #$01
        beq     @73b3
@738b:  jsr     SelectCharUp
        jsr     _c17372
        bmi     @738b
        tax
        lda     $7b79,y
        and     f:MonsterMaskTbl,x
        and     $201d
        and     $61ac
        and     $61ad
        and     $6193
        beq     @738b
        sta     $7b7d
        stz     $7b7e
        stz     $7b7f
        rts
@73b3:  jsr     SelectMonsterUp
        lda     $75
        cmp     #$ff
        beq     @73d5
        sta     $7acf
        jsr     _c17372
        tax
        lda     $7b79,y
        and     $92
        and     f:MonsterMaskTbl,x
        sta     $7b7e
        stz     $7b7d
        stz     $7b7f
@73d5:  rts

; ------------------------------------------------------------------------------

; [  ]

TargetSelectDown:
@73d6:  lda     $7ace
        and     #$01
        beq     @7405
@73dd:  jsr     SelectCharDown
        jsr     _c17372
        bmi     @73dd
        tax
        lda     $7b79,y
        and     f:MonsterMaskTbl,x
        and     $201d
        and     $61ac
        and     $61ad
        and     $6193
        beq     @73dd
        sta     $7b7d
        stz     $7b7e
        stz     $7b7f
        rts
@7405:  jsr     SelectMonsterDown
        lda     $75
        cmp     #$ff
        beq     @7427
        sta     $7acf
        jsr     _c17372
        tax
        lda     $7b79,y
        and     $92
        and     f:MonsterMaskTbl,x
        sta     $7b7e
        stz     $7b7d
        stz     $7b7f
@7427:  rts

; ------------------------------------------------------------------------------

; move character target left jump table (1 per battle type)
_c17428:
@7428:  .addr   _c174bf,_c174e9,_c174bf,_c174ea

; move character target right jump table (1 per battle type)
_c17430:
@7430:  .addr   _c17438,_c17439,_c17439,_c17463

; ------------------------------------------------------------------------------

; [ move character target right (normal battle) ]

_c17438:
@7438:  rts

; ------------------------------------------------------------------------------

; [ move character target right (back/pincer attack) ]

_c17439:
@7439:  lda     $7a84
        and     #TARGET::ONE_SIDE
        bne     @745d                   ; branch if can't target opposite side
        lda     $7b7b
        and     $92
        beq     @745d
        inc     $7ace                   ; next target group to the right
        jsr     _c17934
        bcc     @745d
        sta     $7b7e
        stz     $7b7d
        stz     $7b7f
        txa
        sta     $7acf
        rts
@745d:  lda     #$01                    ; go to character target group
        sta     $7ace
        rts

; ------------------------------------------------------------------------------

; [ move character target right (side attack) ]

_c17463:
@7463:  lda     $7ace
        cmp     #$03
        beq     @74be
        lda     $7a84
        and     #TARGET::ONE_SIDE
        bne     @7490
        lda     $7b7b
        and     $92
        beq     @7490
        lda     #$02
        sta     $7ace
        jsr     _c17934
        bcc     @74b9
        sta     $7b7e
        stz     $7b7d
        stz     $7b7f
        txa
        sta     $7acf
        rts
@7490:  lda     $7b7c
        and     $201d
        and     $61ac
        and     $61ad
        and     $6193
        beq     @74b9
        lda     #$03
        sta     $7ace
        jsr     _c17958
        bcc     @74b9
        sta     $7b7d
        stz     $7b7e
        stz     $7b7f
        txa
        sta     $7acf
        rts
@74b9:  lda     #$01
        sta     $7ace
@74be:  rts

; ------------------------------------------------------------------------------

; [ move character target left (normal/pincer attack) ]

_c174bf:
@74bf:  lda     $7a84
        and     #TARGET::ONE_SIDE
        bne     @74e3
        lda     $7b79
        and     $92
        beq     @74e3
        dec     $7ace
        jsr     _c17922
        bcc     @74e3
        sta     $7b7e
        stz     $7b7d
        stz     $7b7f
        txa
        sta     $7acf
        rts
@74e3:  lda     #$01
        sta     $7ace
        rts

; ------------------------------------------------------------------------------

; [ move character target left (back attack) ]
_c174e9:
@74e9:  rts

; ------------------------------------------------------------------------------

; [ move character target left (side attack) ]

_c174ea:
@74ea:  lda     $7ace
        cmp     #$01
        beq     @7543                   ; return if on left side characters
        lda     $7a84
        and     #TARGET::ONE_SIDE
        bne     @7515
        lda     $7b7b
        and     $92
        beq     @7515
        dec     $7ace
        jsr     _c1793a
        bcc     @753e
        sta     $7b7e
        stz     $7b7d
        stz     $7b7f
        txa
        sta     $7acf
        rts
@7515:  lda     $7b7a
        and     $201d
        and     $61ac
        and     $61ad
        and     $6193
        beq     @753e
        lda     #$01                    ; target characters on the left
        sta     $7ace
        jsr     _c17940
        bcc     @753e
        sta     $7b7d
        stz     $7b7e
        stz     $7b7f
        txa
        sta     $7acf
        rts
@753e:  lda     #$03                    ; target characters on the right
        sta     $7ace
@7543:  rts

; ------------------------------------------------------------------------------

; normal, back, side, pincer

; move monster target left jump table (1 per battle type)
_c17544:
@7544:  .addr   _c17666,_c17669,_c176a7,_c176fe

; move monster target right jump table (1 per battle type)
_c1754c:
@754c:  .addr   _c175a3,_c175a0,_c175d8,_c17631

; ------------------------------------------------------------------------------

; [  ]

_c17554:
get_r_mon_set:
@7554:  jsr     SelectMonsterRight
        lda     $75
        cmp     #$ff
        beq     @7578
        sta     $7acf
        jsr     _c17372
        tax
        lda     $7b79,y
        and     f:MonsterMaskTbl,x
        and     $92
        sta     $7b7e
        stz     $7b7d
        stz     $7b7f
        sec
        rts
@7578:  clc
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1757a:
get_l_mon_set:
@757a:  jsr     SelectMonsterLeft
        lda     $75
        cmp     #$ff
        beq     @759e
        sta     $7acf
        jsr     _c17372
        tax
        lda     $7b79,y
        and     f:MonsterMaskTbl,x
        and     $92
        sta     $7b7e
        stz     $7b7d
        stz     $7b7f
        sec
        rts
@759e:  clc
        rts

; ------------------------------------------------------------------------------

; [ move monster target right (back attack) ]

_c175a0:
@75a0:  jmp     _c17554

; ------------------------------------------------------------------------------

; [ move monster target right (normal battle) ]

_c175a3:
@75a3:  jsr     _c17554
        bcs     @75d7
        lda     $7a84
        and     #TARGET::ONE_SIDE
        bne     @75d7                   ; branch if can't change target group
        lda     $7b7a
        and     $201d
        and     $61ac
        and     $61ad
        and     $6193
        beq     @75d7
        jsr     _c17940
        bcc     @75d7
        sta     $7b7d
        stz     $7b7e
        stz     $7b7f
        lda     #$01
        sta     $7ace
        txa
        sta     $7acf
@75d7:  rts

; ------------------------------------------------------------------------------

; [ move monster target right (side attack) ]

_c175d8:
@75d8:  jsr     _c17554
        bcs     @7630
        lda     $7ace
        bne     @7630
        lda     $7a84
        and     #TARGET::ONE_SIDE
        bne     @7612
        lda     $7b7a
        and     $201d
        and     $61ac
        and     $61ad
        and     $6193
        beq     @7612
        jsr     _c17940
        bcc     @7612
        sta     $7b7d
        stz     $7b7e
        stz     $7b7f
        lda     #$01
        sta     $7ace
        txa
        sta     $7acf
        rts
@7612:  lda     $7b7b
        and     $92
        beq     @7630
        jsr     _c17934
        bcc     @7630
        sta     $7b7e
        stz     $7b7d
        stz     $7b7f
        txa
        sta     $7acf
        lda     #$02
        sta     $7ace
@7630:  rts

; ------------------------------------------------------------------------------

; [ move monster target right (pincer attack) ]

_c17631:
@7631:  jsr     _c17554
        bcs     @7665
        lda     $7a84
        and     #TARGET::ONE_SIDE
        bne     @7665
        lda     $7b7c
        and     $201d
        and     $61ac
        and     $61ad
        and     $6193
        beq     @7665
        jsr     _c17958
        bcc     @7665
        sta     $7b7d
        stz     $7b7e
        stz     $7b7f
        lda     #$03
        sta     $7ace
        txa
        sta     $7acf
@7665:  rts

; ------------------------------------------------------------------------------

; [ move monster target left (normal battle) ]

_c17666:
@7666:  jmp     _c1757a

; ------------------------------------------------------------------------------

; [ move monster target left (back attack) ]

_c17669:
@7669:  jsr     _c1757a
        bcs     @76a1
        lda     $7a84
        and     #TARGET::ONE_SIDE
        bne     @76a1
        lda     $7b7a
        and     $201d
        and     $61ac
        and     $61ad
        and     $6193
        beq     @76a1
        dec     $7ace
        jsr     _c17940
        bcc     @76a1
        sta     $7b7d
        stz     $7b7e
        stz     $7b7f
        lda     #$01
        sta     $7ace
        txa
        sta     $7acf
        rts
@76a1:  lda     #$02
        sta     $7ace
        rts

; ------------------------------------------------------------------------------

; [ move monster target left (side attack) ]

_c176a7:
@76a7:  jsr     _c1757a
        bcs     @76fd
        lda     $7ace
        beq     @76fd
        lda     $7a84
        and     #TARGET::ONE_SIDE
        bne     @76e1
        lda     $7b7a
        and     $201d
        and     $61ac
        and     $61ad
        and     $6193
        beq     @76e1
        jsr     _c17940
        bcc     @76e1
        sta     $7b7d
        stz     $7b7e
        stz     $7b7f
        lda     #$01
        sta     $7ace
        txa
        sta     $7acf
        rts
@76e1:  lda     $7b79
        and     $92
        beq     @76fd
        jsr     _c17922
        bcc     @76fd
        sta     $7b7e
        stz     $7b7d
        stz     $7b7f
        stz     $7ace
        txa
        sta     $7acf
@76fd:  rts

; ------------------------------------------------------------------------------

; [ move monster target left (pincer attack) ]

_c176fe:
@76fe:  jsr     _c1757a
        bcs     @7732
        lda     $7a84
        and     #TARGET::ONE_SIDE
        bne     @7732
        lda     $7b7a
        and     $201d
        and     $61ac
        and     $61ad
        and     $6193
        beq     @7732
        jsr     _c17940
        bcc     @7732
        sta     $7b7d
        stz     $7b7e
        stz     $7b7f
        lda     #$01
        sta     $7ace
        txa
        sta     $7acf
@7732:  rts

; ------------------------------------------------------------------------------

; [  ]

TargetSelectLeft:
key_target_left:
@7733:  lda     $7ace
        and     #$01
        beq     @7742
        lda     $201f       ; battle type
        asl
        tax
        jmp     (.loword(_c17428),x)
@7742:  lda     $201f
        asl
        tax
        jmp     (.loword(_c17544),x)

; ------------------------------------------------------------------------------

; [  ]

TargetSelectRight:
key_target_right:
@774a:  lda     $7ace
        and     #$01
        beq     @7759
        lda     $201f       ; battle type
        asl
        tax
        jmp     (.loword(_c17430),x)
@7759:  lda     $201f
        asl
        tax
        jmp     (.loword(_c1754c),x)

; ------------------------------------------------------------------------------

; bit mask for each monster
MonsterMaskTbl:
@7761:  .byte   $01,$02,$04,$08,$10,$20

;
_c17767:
@7767:  .byte   0,6,12,18

; ------------------------------------------------------------------------------

; [ init blitz input ]

_c1776b:
@776b:  ldx     $0a
        stx     $e9e2
        lda     #$ff
        sta     $e9e4
        stz     $e9e5
        clr_ax
@777a:  stz     $e9fe,x                 ; clear blitz inputs
        inx
        cpx     #$0020
        bne     @777a
        stz     $e9e1
        stz     $6168
        lda     #TARGET::SELF
        sta     $7a84
        lda     #$3d                    ; go to blitz menu state
        bra     _7797

; ------------------------------------------------------------------------------

; [ init target cursor select ]

_c17792:
@7792:  stz     $2f41       ; start battle time

key_target:
_c17795:
@7795:  lda     #$38                    ; menu cursor state to go to next

key_target_2:
_7797:  pha
        inc     $7b6b
        lda     $7bc2
        sta     $7a83
        stz     $7b7d
        stz     $7b7e
        stz     $7b7f
        stz     $7ace
        stz     $7acf
        stz     $62b1
        stz     $62b2
        stz     $62b4
        lda     $7a84
        bmi     @77c4                   ; branch if roulette cursor
        sta     $36
        cmp     #TARGET::SELF
        bne     @77d1

; self-target or roulette
@77c4:  ldx     $62ca                   ; set target to active character
        lda     f:MonsterMaskTbl,x
        sta     $7b7d
        jmp     @7901

; init all characters or monsters
@77d1:  lda     $36
        and     #$0c
        cmp     #TARGET::INIT_HALF
        bne     @77ff
        lda     $36
        and     #TARGET::ENEMY
        beq     @77ea
        lda     $92
        sta     $7b7e                   ; target all monsters
        inc     $7b7f
        jmp     @7901
@77ea:  lda     $201d
        and     $61ac
        and     $61ad
        and     $6193
        sta     $7b7d                   ; target all characters
        inc     $7b7f
        jmp     @7901

; init all characters and all monsters
@77ff:  cmp     #TARGET::INIT_ALL
        bne     @781d
        lda     $201d
        and     $61ac
        and     $61ad
        and     $6193
        sta     $7b7d
        lda     $92
        sta     $7b7e
        inc     $7b7f
        jmp     @7901

; init single target group
@781d:  lda     $36
        and     #$0c
        cmp     #TARGET::INIT_GROUP
        bne     @789b
        lda     $36
        and     #TARGET::ENEMY
        bne     @7875                   ; branch if target monsters by default
        clr_ax
        lda     $62ca
@7830:  cmp     $7a8c,x
        beq     @7858
        inx
        cpx     #4
        bne     @7830
        lda     $201d
        and     $61ac
        and     $61ad
        and     $6193
        and     $7b7c
        sta     $7b7d
        inc     $7b7f
        lda     #$03
        sta     $7ace
        jmp     @7901
@7858:  lda     $201d
        and     $61ac
        and     $61ad
        and     $6193
        and     $7b7a
        sta     $7b7d
        inc     $7b7f
        lda     #$01
        sta     $7ace
        jmp     @7901
@7875:  lda     $92
        and     $7b79
        beq     @7888
        sta     $7b7e
        inc     $7b7f
        stz     $7ace
        jmp     @7901
@7888:  lda     $92
        and     $7b7b
        sta     $7b7e
        inc     $7b7f
        lda     #$02
        sta     $7ace
        jmp     @7901

; init single target
@789b:  lda     $36
        and     #TARGET::ENEMY
        bne     @78dd
        clr_ax
        lda     $62ca
@78a6:  cmp     $7a8c,x                 ; find character on the left
        beq     @78c7
        inx
        cpx     #4
        bne     @78a6
        ldx     $62ca
        lda     f:MonsterMaskTbl,x
        sta     $7b7d
        lda     #$03
        sta     $7ace
        txa
        sta     $7acf
        jmp     @7901
@78c7:  ldx     $62ca
        lda     f:MonsterMaskTbl,x
        sta     $7b7d
        lda     #$01                    ; target group is characters on the left
        sta     $7ace
        txa
        sta     $7acf
        jmp     @7901

; single monster target
@78dd:  jsr     _c17922
        bcs     @78f4
        jsr     _c17934
        sta     $7b7e
        lda     #$02
        sta     $7ace
        txa
        sta     $7acf
        jmp     @7901
@78f4:  sta     $7b7e
        stz     $7ace
        txa
        sta     $7acf
        jmp     @7901

@7901:  lda     $7a84
        and     #TARGET::AUTO_CONFIRM
        beq     @790b
        stz     $7b7f
@790b:  pla
        sta     $7bc2
        rts

; ------------------------------------------------------------------------------

; unused
get_gr0_up_bit:
@7910:  ldx     #$7aaa
        jmp     _c17970

; ------------------------------------------------------------------------------

; unused
get_gr0_down_bit:
@7916:  ldx     #$7ab0
        jmp     _c17970

; ------------------------------------------------------------------------------

; unused
get_gr0_left_bit:
@791c:  ldx     #$7a9e
        jmp     _c17970

; ------------------------------------------------------------------------------

; [  ]

_c17922:
get_gr0_right_bit:
@7922:  ldx     #$7aa4
        jmp     _c17970

; ------------------------------------------------------------------------------

; unused
get_gr2_up_bit:
@7928:  ldx     #$7aaa
        jmp     _c1799c

; ------------------------------------------------------------------------------

; unused
get_gr2_down_bit:
@792e:  ldx     #$7ab0
        jmp     _c1799c

; ------------------------------------------------------------------------------

; [  ]

_c17934:
get_gr2_left_bit:
@7934:  ldx     #$7a9e
        jmp     _c1799c

; ------------------------------------------------------------------------------

; [  ]

_c1793a:
get_gr2_right_bit:
@793a:  ldx     #$7aa4
        jmp     _c1799c

; ------------------------------------------------------------------------------

; [  ]

_c17940:
get_gr1_up_bit:
@7940:  ldx     #$7ac2
        jmp     _c179c8

; ------------------------------------------------------------------------------

; unused
get_gr1_down_bit:
@7946:  ldx     #$7ac8
        jmp     _c179c8

; ------------------------------------------------------------------------------

; unused
get_gr1_left_bit:
@794c:  ldx     #$7ab6
        jmp     _c179c8

; ------------------------------------------------------------------------------

; unused
get_gr1_right_bit:
@7952:  ldx     #$7ab6                  ; i think this should be $7abc
        jmp     _c179c8

; ------------------------------------------------------------------------------

; [  ]

_c17958:
get_gr3_up_bit:
@7958:  ldx     #$7ac2
        jmp     _c17a00

; ------------------------------------------------------------------------------

; unused
get_gr3_down_bit:
@795e:  ldx     #$7ac8
        jmp     _c17a00

; ------------------------------------------------------------------------------

; unused
get_gr3_left_bit:
@7964:  ldx     #$7ab6
        jmp     _c17a00

; ------------------------------------------------------------------------------

; unused
get_gr3_right_bit:
@796a:  ldx     #$7ab6                  ; i think this should be $7abc
        jmp     _c17a00

; ------------------------------------------------------------------------------

; [  ]

_c17970:
get_gr0:
@7970:  stx     $3a
        clr_ay
@7974:  clr_ax
        lda     ($3a),y
        bmi     @7985
@797a:  cmp     $7a86,x
        beq     @798d
@797f:  inx
        cpx     #6
        bne     @797a
@7985:  iny
        cpy     #6
        bne     @7974
        clc
        rts
@798d:  stx     $36
        tax
        lda     $92
        and     f:MonsterMaskTbl,x
        beq     @797f
        ldx     $36
        sec
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1799c:
get_gr2:
@799c:  stx     $3a
        clr_ay
@79a0:  clr_ax
        lda     ($3a),y
        bmi     @79b1
@79a6:  cmp     $7a92,x
        beq     @79b9
@79ab:  inx
        cpx     #6
        bne     @79a6
@79b1:  iny
        cpy     #6
        bne     @79a0
        clc
        rts
@79b9:  stx     $36
        tax
        lda     $92
        and     f:MonsterMaskTbl,x
        beq     @79ab
        ldx     $36
        sec
        rts

; ------------------------------------------------------------------------------

; [  ]

_c179c8:
get_gr1:
@79c8:  stx     $3a
        clr_ay
@79cc:  clr_ax
        lda     ($3a),y
        bmi     @79df
@79d2:  cmp     $7a8c,x
        beq     @79e7
@79d7:  asl     $38
        inx
        cpx     #6
        bne     @79d2
@79df:  iny
        cpy     #6
        bne     @79cc
        clc
        rts
@79e7:  stx     $36
        tax
        lda     $201d
        and     $61ac
        and     $61ad
        and     $6193
        and     f:MonsterMaskTbl,x
        beq     @79d7
        ldx     $36
        sec
        rts

; ------------------------------------------------------------------------------

; [  ]

_c17a00:
get_gr3:
@7a00:  stx     $3a
        clr_ay
@7a04:  clr_ax
        lda     ($3a),y
        bmi     @7a15
@7a0a:  cmp     $7a98,x
        beq     @7a1d
@7a0f:  inx
        cpx     #6
        bne     @7a0a
@7a15:  iny
        cpy     #6
        bne     @7a04
        clc
        rts
@7a1d:  stx     $36
        tax
        lda     $201d
        and     $61ac
        and     $61ad
        and     $6193
        and     f:MonsterMaskTbl,x
        beq     @7a0f
        ldx     $36
        sec
        rts

; ------------------------------------------------------------------------------

_c17a36:
@7a36:  .word   $a008,$ac08,$b808,$c408

_c17a3e:
@7a3e:  .word   $a010,$ac10,$b810,$c410

_c17a46:
@7a46:  .word   $a030,$ac10,$ac58,$b830

; ------------------------------------------------------------------------------

; [  ]

_c17a4e:
check_command:
@7a4e:  phx
        lda     $890f,x
        and     #$03
        sta     $890f,x
        sta     $2c
        lda     #$03
        sta     $2e
        jsr     Mult8NoHW
        tya
        clc
        adc     $30
        tax
        lda     $202f,x
        bmi     @7a6d
        plx
        clc
        rts
@7a6d:  plx
        sec
        rts

; ------------------------------------------------------------------------------

; [  ]

_c17a70:
check_command_mon:
@7a70:  phx
        lda     $890f,x
        and     #$03
        sta     $890f,x
        sta     $2c
        lda     #$03
        sta     $2e
        jsr     Mult8NoHW
        tya
        clc
        adc     $30
        tax
        lda     $205f,x
        bmi     @7a8f
        plx
        clc
        rts
@7a8f:  plx
        sec
        rts

; ------------------------------------------------------------------------------

; [ update menu state $05: command select ]

UpdateMenuState_05:
@7a92:  stz     $2f41                   ; start battle time
        stz     $88e3
        lda     $7bcb
        beq     @7aa3
        lda     #$0f
        sta     $7bc2
        rts
@7aa3:  stz     $7ae8
        stz     $7ae9
        lda     $04
        cmp     #$40
        bne     @7aba
        inc     $94
        inc     $7bcb
        lda     #$01
        sta     $7bcc
        rts
@7aba:  lda     $05
        cmp     #$40
        bne     @7acb
        inc     $94
        inc     $7bcb
        lda     #$02
        sta     $7bcc
        rts
@7acb:  lda     $62ca
        tax
        lda     $62cc,x
        bne     @7adf
        lda     $2f2e
        jne     @7ae2
        jmp     @7bce
@7adf:  jmp     @7c3f
@7ae2:  ldx     $62ca
        lda     f:CharCmdPtrs,x
        tay
        jsr     _c17a4e
        bcc     @7af7
@7aef:  inc     $890f,x
        jsr     _c17a4e
        bcs     @7aef
@7af7:  lda     $05
        and     #$08
        beq     @7b1b
        lda     $890f,x
        sta     $36
        clr_a
        sta     $890f,x
        jsr     _c17a4e
        bcc     @7b12
        lda     $36
        sta     $890f,x
        bra     @7b1b
@7b12:  lda     $890f,x
        cmp     $36
        beq     @7b1b
        inc     $94
@7b1b:  lda     $05
        and     #$04
        beq     @7b40
        lda     $890f,x
        sta     $36
        lda     #$03
        sta     $890f,x
        jsr     _c17a4e
        bcc     @7b37
        lda     $36
        sta     $890f,x
        bra     @7b40
@7b37:  lda     $890f,x
        cmp     $36
        beq     @7b40
        inc     $94
@7b40:  lda     $05
        and     #$02
        beq     @7b65
        lda     $890f,x
        sta     $36
        lda     #$01
        sta     $890f,x
        jsr     _c17a4e
        bcc     @7b5c
        lda     $36
        sta     $890f,x
        bra     @7b65
@7b5c:  lda     $890f,x
        cmp     $36
        beq     @7b65
        inc     $94
@7b65:  lda     $05
        and     #$01
        beq     @7b8a
        lda     $890f,x
        sta     $36
        lda     #$02
        sta     $890f,x
        jsr     _c17a4e
        bcc     @7b81
        lda     $36
        sta     $890f,x
        bra     @7b8a
@7b81:  lda     $890f,x
        cmp     $36
        beq     @7b8a
        inc     $94
@7b8a:  lda     $04
        and     #$30
        cmp     #$20
        bne     @7b9a
        inc     $94
        jsr     _c17ca9
        jmp     UpdateMenuState_22
@7b9a:  cmp     #$10
        bne     @7ba6
        inc     $94
        jsr     _c17ca9
        jmp     UpdateMenuState_25

; A button
@7ba6:  lda     $04
        bpl     @7bb2
        inc     $96
        inc     $2f41                   ; stop battle time
        jmp     OpenCmdMenu
@7bb2:  ldx     $62ca
        lda     $890f,x
        asl
        tax
        lda     f:_c17a46,x
        sta     $88e4
        lda     f:_c17a46+1,x
        sta     $88e5
        lda     #$01
        sta     $88e3
        rts
@7bce:  ldx     $62ca
        lda     f:CharCmdPtrs,x
        tay
        jsr     _c17a4e
        bcs     @7bf3
        lda     $05
        and     #$0c
        beq     @7bfb
        inc     $94
        lda     $05
        and     #$08
        beq     @7bf3
@7be9:  dec     $890f,x
        jsr     _c17a4e
        bcs     @7be9
        bra     @7bfb
@7bf3:  inc     $890f,x
        jsr     _c17a4e
        bcs     @7bf3

; A button
@7bfb:  lda     $04
        bpl     @7c07
        inc     $96
        inc     $2f41                   ; stop battle time
        jmp     OpenCmdMenu
@7c07:  lda     $05
        and     #$0f
        cmp     #$02
        bne     @7c17
        inc     $94
        jsr     _c17ca9
        jmp     UpdateMenuState_22
@7c17:  cmp     #$01
        bne     @7c23
        inc     $94
        jsr     _c17ca9
        jmp     UpdateMenuState_25
@7c23:  ldx     $62ca
        lda     $890f,x
        asl
        tax
        lda     f:_c17a3e,x
        sta     $88e4
        lda     f:_c17a3e+1,x
        sta     $88e5
        lda     #$01
        sta     $88e3
        rts
@7c3f:  ldx     $62ca
        lda     f:CharCmdPtrs,x
        tay
        jsr     _c17a70
        bcs     @7c64
        lda     $05
        and     #$0c
        beq     @7c6c
        inc     $94
        lda     $05
        and     #$08
        beq     @7c64
@7c5a:  dec     $890f,x
        jsr     _c17a70
        bcs     @7c5a
        bra     @7c6c
@7c64:  inc     $890f,x
        jsr     _c17a70
        bcs     @7c64
@7c6c:  lda     $04
        bpl     @7c8c
        inc     $96
        jsr     _c184ab
        jsr     _c17ca9
        lda     $2060,x                 ; copy targeting flags
        sta     $7a84
        lda     #$0e
        sta     $2baf,y
        lda     $205e,x
        sta     $7a85
        jmp     _c17795
@7c8c:  ldx     $62ca
        lda     $890f,x
        asl
        tax
        lda     f:_c17a36,x
        sta     $88e4
        lda     f:_c17a36+1,x
        sta     $88e5
        lda     #$01
        sta     $88e3
        rts
        rts

; ------------------------------------------------------------------------------

; [  ]

_c17ca9:
init_buf_input:
@7ca9:  jsr     _c16d56
        lda     #$ff
        sta     $7a85
        sta     $2baf,y
        sta     $2bb0,y
        sta     $2bb3,y
        clr_a
        sta     $2bb1,y
        sta     $2bb2,y
        sta     $2bb4,y
        sta     $2bb5,y
        rts

; ------------------------------------------------------------------------------

; [ open menu window for selected command (or select target) ]

OpenCmdMenu:
@7cc8:  jsr     _c184ab
        jsr     _c17ca9
        lda     $2030,x                 ; copy targeting flags
        sta     $7a84
        lda     $202e,x
        sta     $2baf,y
        and     #$7f
        asl
        tax
        jmp     (.loword(OpenCmdMenuTbl),x)

; ------------------------------------------------------------------------------

; [  ]

_c17ce1:
@7ce1:  lda     #$01
        sta     $7ae8
        jmp     OpenMagicWindow

; ------------------------------------------------------------------------------

OpenCmdMenuTbl:
@7ce9:  .addr   _c17792
        .addr   OpenItemWindow
        .addr   OpenMagicWindow
        .addr   _c17795
        .addr   _c17795
        .addr   _c17795
        .addr   _c17795
        .addr   UpdateMenuState_35
        .addr   OpenThrowWindow
        .addr   OpenToolsWindow
        .addr   _c1776b
        .addr   _c17795
        .addr   OpenLoreWindow
        .addr   _c17795
        .addr   _c17795
        .addr   OpenSlotWindow
        .addr   OpenRageWindow
        .addr   _c17795
        .addr   _c17795
        .addr   OpenDanceWindow
        .addr   UpdateMenuState_22
        .addr   UpdateMenuState_25
        .addr   _c17795
        .addr   _c17ce1
        .addr   _c17795
        .addr   _c17795
        .addr   _c17795
        .addr   _c17795
        .addr   _c17795
        .addr   OpenMagitekWindow

; ------------------------------------------------------------------------------

; [ update menu state $37: swdtech ]

UpdateMenuState_37:
@7d25:  stz     $2f41       ; start battle time
        stz     $88e3
        lda     $7bcb
        beq     @7d35       ; branch if menu is not closing
        lda     #$36        ; menu cursor state $36 (close swdtech menu)
        sta     $7bc2
@7d35:  lda     $04
        bpl     @7d56       ; branch if a button is not pressed
        inc     $96         ; play cursor sound effect (select)
        jsr     _c16d56       ; get pointer to current character slot data (battle menu)
        lda     $7b82       ; swdtech bar counter / 32
        lsr5
        sta     $2bb0,y     ; attack index
        lda     $62ca
        sta     $2bae,y     ; character slot
        inc     $7b80       ; increment character slot
        inc     $7bcb       ; close menu
        rts
@7d56:  lda     $09
        bpl     @7d5f       ; branch if b button is not pressed
        inc     $96         ; play cursor sound effect (select)
        jmp     CloseBushidoWindow
@7d5f:  ldx     $62ca       ; active character
        phx
        lda     #$07
        sec
        sbc     $2020       ; number of swdtechs known - 1
        tax
        clr_ay
@7d6c:  lda     f:_c2a860,x   ; palette data for swdtech menu
        sta     $5dda,y
        inx
        iny2
        cpy     #$0010
        bne     @7d6c
        plx
        clr_ay
        lda     $2020
        inc
        sta     $36
        lda     $0e         ; frame counter
        and     #$03
        bne     @7d8d       ; branch every 4 frames
        inc     $7b82       ; increment swdtech bar counter
@7d8d:  lda     $7b82
        lsr5
        cmp     $36
        bne     @7d9d       ; branch if it hasn't reached the max value
        clr_a
        sta     $7b82       ; reset the swdtech bar counter
@7d9d:  inc
        sta     $36
        clr_ax
        lda     #$29
@7da4:  sta     $5dda,x
        inx2
        dec     $36
        bne     @7da4
        lda     $7b82
        bpl     @7dbf
        lda     #$f8
        jsr     DrawBushidoGaugeRepeat
        lda     $7b82
        jsr     DrawBushidoGauge
        bra     @7dca
@7dbf:  lda     $7b82
        jsr     DrawBushidoGauge
        lda     #$f0
        jsr     DrawBushidoGaugeRepeat
@7dca:  inc     $7b81
        rts

; ------------------------------------------------------------------------------

; [ draw swdtech bar (section that is filling) ]

DrawBushidoGauge:
@7dce:  and     #$7f
        lsr2
        asl2
        tax
        lda     #$04
        sta     $36
@7dd9:  lda     f:GaugeTextTbl,x
        sta     $7a73,y
        lda     #$35
        sta     $7a74,y
        inx
        iny2
        dec     $36
        bne     @7dd9
        rts

; ------------------------------------------------------------------------------

; [ draw swdtech bar (empty or full sections) ]

; A: value to repeat 4 times

DrawBushidoGaugeRepeat:
@7ded:  sta     $36
        lda     #$04
        sta     $38
@7df3:  lda     $36
        sta     $7a73,y
        lda     #$35
        sta     $7a74,y
        inx
        iny2
        dec     $38
        bne     @7df3
        rts

; ------------------------------------------------------------------------------

; [ update menu state $27: def. ]

UpdateMenuState_27:
@7e05:  stz     $88e3
        lda     $7bcb
        beq     @7e13
        lda     #$26
        sta     $7bc2
        rts
@7e13:  lda     $04
        bpl     @7e2e       ; branch if a button is not pressed
        inc     $94         ; play cursor sound effect (select)
        jsr     _c16d56       ; get pointer to current character slot data (battle menu)
        lda     #$15        ; command $15 (def.)
        sta     $2baf,y
        lda     $62ca       ; character slot
        sta     $2bae,y
        inc     $7b80       ; increment character slot
        inc     $7bcb       ; close menu
        rts
@7e2e:  lda     $2f2e
        beq     @7e3d
        lda     $06
        and     #$30
        cmp     #$10
        bne     @7e41
        bra     @7e4a
@7e3d:  lda     $09
        bpl     @7e46       ; branch if b button is not pressed
@7e41:  inc     $94
        jmp     CloseDefendWindow
@7e46:  cmp     #$02
        beq     @7e41
@7e4a:  ldx     $62ca       ; character slot
        lda     $890f,x     ; cursor position
        asl
        tax
        lda     $2f2e
        beq     @7e63
        lda     #$70
        sta     $88e4
        lda     #$a0
        sta     $88e5
        bra     @7e6f
@7e63:  lda     #$38
        sta     $88e4       ; main cursor x position
        lda     f:_c17a3e+1,x
        sta     $88e5       ; main cursor y position
@7e6f:  inc     $88e3       ; activate main cursor
        rts

; ------------------------------------------------------------------------------

; [ update menu state $24: row ]

UpdateMenuState_24:
@7e73:  stz     $88e3
        lda     $7bcb
        beq     @7e81
        lda     #$23
        sta     $7bc2
        rts
@7e81:  lda     $04
        bpl     @7e9c
        inc     $94
        jsr     _c16d56       ; get pointer to current character slot data (battle menu)
        lda     #$14        ; command $14 (row)
        sta     $2baf,y
        lda     $62ca
        sta     $2bae,y
        inc     $7b80
        inc     $7bcb
        rts
@7e9c:  lda     $2f2e
        beq     @7eab
        lda     $06
        and     #$30
        cmp     #$20
        bne     @7eaf
        bra     @7eb8
@7eab:  lda     $09
        bpl     @7eb4
@7eaf:  inc     $94
        jmp     CloseRowWindow
@7eb4:  cmp     #$01
        beq     @7eaf
@7eb8:  ldx     $62ca
        lda     $890f,x
        asl
        tax
        lda     $2f2e
        beq     @7ed1
        lda     #$10
        sta     $88e4
        lda     #$a0
        sta     $88e5
        bra     @7edd
@7ed1:  lda     #$08
        sta     $88e4
        lda     f:_c17a3e+1,x
        sta     $88e5
@7edd:  inc     $88e3
        rts

; ------------------------------------------------------------------------------

SlotRateTbl:
@7ee1:  .byte   $1f,$03,$01,$01,$00,$00

; ------------------------------------------------------------------------------

GetSlotReel1:
@7ee7:  lsr4
        asl
        tax
        lda     f:SlotReelTbl,x
        rts

; ------------------------------------------------------------------------------

GetSlotReel2:
@7ef2:  lsr4
        asl
        tax
        lda     f:SlotReelTbl+$20,x
        rts

; ------------------------------------------------------------------------------

GetSlotReel3:
@7efd:  lsr4
        asl
        tax
        lda     f:SlotReelTbl+$40,x
        rts

; ------------------------------------------------------------------------------

; [ update menu state $08: slot ]

UpdateMenuState_08:
@7f08:  stz     $88e3
        lda     $7bcb
        beq     @7f16
        lda     #$07
        sta     $7bc2
        rts

; A button
@7f16:  lda     $04
        bpl     @7f6d       ; branch if A button is not pressed
        inc     $96         ; play cursor sound effect (select)
        lda     $7b92
        bne     @7f3a
        lda     $2f49
        and     #$04
        beq     @7f2f       ; branch if joker doom is enabled
        jsr     Rand
        ora     #$3c
        bra     @7f32
@7f2f:  jsr     Rand
@7f32:  sta     $6179
        inc     $7b92
        bra     @7f6d
@7f3a:  lda     $7b93
        bne     @7f6f
        lda     $7b8f
        bne     @7f47
        jmp     @7fec

; set reel 1
@7f47:  lda     $7b8c
        jsr     GetSlotReel1
        sta     $617b
        tax
        lda     f:SlotRateTbl,x
        sta     $36
        lda     $6179
        and     $36
        bne     @7f65
        lda     #$04
        sta     $617d
        bra     @7f6a
@7f65:  lda     #$ff
        sta     $617b
@7f6a:  inc     $7b93
@7f6d:  bra     @7fec

; set reel 2
@7f6f:  lda     $7b94
        bne     @7fb6
        lda     $7b90
        beq     @7fec
        lda     $7b8c
        jsr     GetSlotReel1
        sta     $38
        lda     $7b8d
        jsr     GetSlotReel2
        sta     $3a
        cmp     $38
        bne     @7fac
        lda     $38
        tax
        lda     f:SlotRateTbl,x
        sta     $36
        lda     $6179
        and     $36
        bne     @7fa6
        lda     #$04
        sta     $617d
        lda     $3a
        bra     @7fae
@7fa6:  lda     $3a
        ora     #$80
        bra     @7fae
@7fac:  lda     #$ff
@7fae:  sta     $617c
        inc     $7b94
        bra     @7fec

; set reel 3
@7fb6:  lda     $7b91
        beq     @7fec
        lda     $7b8c
        jsr     GetSlotReel1
        sta     $36
        lda     $7b8d
        jsr     GetSlotReel2
        sta     $37
        lda     $7b8e
        jsr     GetSlotReel3
        sta     $38
        jsl     _c2b4a3
        pha
        jsr     _c16d56       ; get pointer to current character slot data (battle menu)
        pla
        sta     $2bb0,y     ; attack
        lda     $62ca
        sta     $2bae,y     ; character slot
        inc     $7b80       ; increment character slot
        inc     $7bcb       ; close menu
        rts

; B button
@7fec:  lda     $09
        bpl     @8000       ; branch if b button is not pressed
        lda     $7b92
        ora     $7b93
        ora     $7b94
        bne     @8000
        inc     $96
        jmp     UpdateMenuState_07
@8000:  lda     $7b8c
        clc
        adc     #$4c
        sta     $5ffd
        sta     $5fff
        sta     $6001
        sta     $6003
        lda     $7b8d
        clc
        adc     #$4c
        sta     $6007
        sta     $6009
        sta     $600b
        sta     $600d
        lda     $7b8e
        clc
        adc     #$4c
        sta     $6011
        sta     $6013
        sta     $6015
        sta     $6017
        lda     $7b8f
        bne     @8053
        lda     $7b8c
        sec
        sbc     #$04
        sta     $7b8c
        lda     $7b92
        beq     @8053
        lda     $7b8c
        and     #$0f
        bne     @8053
        inc     $7b8f
@8053:  lda     $7b90
        bne     @808c
        lda     $7b8d
        sec
        sbc     #$04
        sta     $7b8d
        lda     $7b93
        beq     @808c
        lda     $7b8d
        and     #$0f
        bne     @808c
        lda     $617b
        cmp     #$ff
        beq     @8089
        lda     $7b8d
        jsr     GetSlotReel2
        cmp     $617b
        beq     @8089
        lda     $617d
        beq     @8089
        dec     $617d
        bra     @808c
@8089:  inc     $7b90
@808c:  lda     $7b91
        bne     @80da
        lda     $7b8e
        sec
        sbc     #$04
        sta     $7b8e
        lda     $7b94
        beq     @80da
        lda     $7b8e
        and     #$0f
        bne     @80da
        lda     $617c
        cmp     #$ff
        beq     @80d7
        and     #$80
        bne     @80c6
        lda     $7b8e
        jsr     GetSlotReel3
        cmp     $617c
        beq     @80d7
        lda     $617d
        beq     @80d7
        dec     $617d
        bra     @80da
@80c6:  lda     $7b8e
        jsr     GetSlotReel3
        sta     $36
        lda     $617c
        and     #$7f
        cmp     $36
        beq     @80da
@80d7:  inc     $7b91
@80da:  rts

; ------------------------------------------------------------------------------

; [ process player's controller input for moving the menu cursor ]

GetCursorInput:
@80db:  ldx     $36
        stx     $3a
        stz     $3c
        lda     $05
        and     #$0f
        beq     @8144       ; return if no direction buttons pressed

; up
        cmp     #$08
        bne     @80f4
        lda     $37
        beq     @813e
        inc     $94
        dec     $37
        rts

; down
@80f4:  cmp     #$04
        bne     @8103
        lda     $37
        cmp     #$03
        beq     @8141
        inc     $94
        inc     $37
        rts

; left
@8103:  cmp     #$02
        bne     @811d
        lda     $36
        bne     @8118
        lda     $39
        sta     $36
        lda     $37
        beq     @8139
        inc     $94
        dec     $37
        rts
@8118:  inc     $94
        dec     $36
        rts

; right
@811d:  cmp     #$01
        bne     @8144
        lda     $36
        cmp     $39
        bne     @8134
        stz     $36
        lda     $37
        cmp     #$03
        beq     @8141
        inc     $94
        inc     $37
        rts
@8134:  inc     $94
        inc     $36
        rts
@8139:  lda     #$bf
        sta     $3c
        rts

; scroll up
@813e:  dec     $3c
        rts

; scroll down
@8141:  inc     $3c
        rts
@8144:  rts

; ------------------------------------------------------------------------------

; [ update menu state $0e: spell select ]

UpdateMenuState_0e:
@8145:  stz     $88ef
        stz     $88e3
        lda     $7bcb
        beq     @8156
        lda     #$14
        sta     $7bc2
        rts
@8156:  ldy     $62ca
        lda     $8917,y
        sta     $36
        lda     $891b,y
        sta     $37
        lda     $8913,y
        sta     $38
        lda     #$01
        sta     $39         ; 2 columns
        jsr     GetCursorInput
        lda     $3c
        beq     @81a4
        bmi     @8187

; scroll list down
        lda     $8913,y
        cmp     #$17
        beq     @81ae
        inc
        sta     $8913,y
        inc     $94
        jsr     ScrollMagicListDown
        bra     @81a4

; scroll list up
@8187:  lda     $8913,y
        bne     @819b
        inc     $94
        lda     $7ae8
        bne     @81a4
        jsr     CheckHasGenju
        bcs     @81a4
        jmp     OpenSummonWindow
@819b:  dec
        sta     $8913,y
        inc     $94
        jsr     ScrollMagicListUp
@81a4:  lda     $36
        sta     $8917,y
        lda     $37
        sta     $891b,y

; A button
@81ae:  lda     $04
        bpl     @81ed       ; branch if A button is not pressed
        jsr     _c18414
        lda     $2093,x
        bmi     @81eb
        inc     $96
        jsr     _c16d56
        lda     $7ae8
        beq     @81c8       ; branch if x-magic is not enabled
        lda     #$17        ; command $17 (x-magic)
        bra     @81ca
@81c8:  lda     #$02        ; command $02 (magic)
@81ca:  sta     $2baf,y
        jsr     _c18414
        lda     $2092,x
        sta     $7a85
        lda     #$01        ; curative menu type 1 (spell)
        sta     $ecba
        lda     $2094,x                 ; copy targeting flags
        sta     $7a84
        and     #TARGET::ENEMY
        jeq     UpdateMenuState_3f
        jmp     _c17795
@81eb:  inc     $95         ; play error sound effect

; B button
@81ed:  lda     $09
        bpl     @81f6       ; branch if b button is not pressed
        inc     $96
        jmp     CloseMagicWindow
@81f6:  jsr     _c18414
        lda     $2095,x
        sta     $6178
        lda     #$17
        sta     $36
        ldx     #$0190
        stx     $2e
        lda     $8913,y
        jsr     _c1898f
        lda     $8917,y
        tax
        lda     f:_c18280,x
        sta     $88e4
        lda     $891b,y
        tax
        lda     f:ListCursorYPosTbl,x
        sta     $88e5
        inc     $88e3
        rts

; ------------------------------------------------------------------------------

; [  ]

ScrollMagicListDown:
@8228:  clc
        adc     #$03
        jsr     DrawMagicListText
        lda     #$17
        sta     $7bc2
        jsr     _c18269
        lda     $7afd
        cmp     #$04
        beq     @8240
        inc
        bra     @8241
@8240:  clr_a
@8241:  sta     $7afd
        bra     _825e

; ------------------------------------------------------------------------------

; [  ]

ScrollMagicListUp:
@8246:  jsr     DrawMagicListText
        lda     #$18
        sta     $7bc2
        jsr     _c18269
        lda     $7afd
        beq     @8259
        dec
        bra     @825b
@8259:  lda     #$04
@825b:  sta     $7afd

magic_one_scr:
_825e:  lda     #$03
        sta     $7ba8
        lda     #$0e
        sta     $7bc3
        rts

; ------------------------------------------------------------------------------

; [  ]

_c18269:
set_scr_line_tfr_poi:
@8269:  lda     $7afd
        asl
        tax
        lda     f:_c18291,x   ; vram destination
        sta     $7baa
        lda     f:_c18291+1,x
        sta     $7bab
        inc     $7ba9
        rts

; ------------------------------------------------------------------------------

_c18280:
@8280:  .byte   $08,$50,$70

; ------------------------------------------------------------------------------

; equip window cursor x positions
EquipCursorXPosTbl:
@8283:  .byte   $00,$78

; tools list cursor x positions
ToolsCursorXPosTbl:
@8285:  .byte   $00,$78

; dance/throw/item list cursor x positions
ItemCursorXPosTbl:
@8287:  .byte   $10,$80

; rage/magitek list cursor x positions
RageCursorXPosTbl:
@8289:  .byte   $10,$78

; lore list cursor x positions
LoreCursorXPosTbl:
@828b:  .byte   $08,$58

; list cursor y positions
ListCursorYPosTbl:
@828d:  .byte   $a4,$b0,$bc,$c8

scr_line_vram_poi:
_c18291:
@8291:  .word   $7c00, $7c40, $7c80, $7cc0, $7d00

; ------------------------------------------------------------------------------

; [ check if character has an esper equipped ]

CheckHasGenju:
@829b:  lda     $62ca       ; character slot
        asl
        tax
        longa
        lda     f:CharSpellListPtrs,x
        tax
        shorta0
        lda     $208f,x     ; equipped esper
        bmi     @82b1
        clc
        rts
@82b1:  sec
        rts

; ------------------------------------------------------------------------------

; [ update menu state $16: esper select ]

UpdateMenuState_16:
@82b3:  stz     $88e3
        lda     $7bcb
        beq     @82c1
        lda     #$15
        sta     $7bc2
        rts
@82c1:  lda     $05
        and     #$05
        beq     @82d6       ; branch if down or right is not pressed
        inc     $94
        and     #$01
        beq     @82d3       ; if right was pressed, reset the cursor x position
        ldx     $62ca
        stz     $8917,x
@82d3:  jmp     CloseSummonWindow
@82d6:  lda     $04
        bpl     @82fa       ; branch if a button is pressed
        jsr     CheckHasGenju
        bcs     @82f8
        inc     $96
        jsr     _c16d56
        lda     #$19        ; command $19 (summon)
        sta     $2baf,y
        lda     $208e,x
        sta     $7a85
        lda     $2090,x                 ; copy targeting flags
        sta     $7a84
        jmp     _c17795
@82f8:  inc     $95         ; play cursor sound effect (select)
@82fa:  lda     #$38        ; set main cursor position
        sta     $88e4
        lda     #$a8
        sta     $88e5
        inc     $88e3       ; activate main cursor
        rts

; ------------------------------------------------------------------------------

; [ update menu state $1b: lore select ]

UpdateMenuState_1b:
@8308:  stz     $88e3
        stz     $88ef
        lda     $7bcb
        beq     @8319
        lda     #$1a
        sta     $7bc2
        rts
@8319:  ldy     $62ca
        stz     $36
        lda     $8927,y
        sta     $37
        lda     $891f,y
        sta     $38
        stz     $39         ; 1 column
        jsr     GetCursorInput
        lda     $3c
        beq     @8353
        bmi     @8345
        lda     $891f,y
        cmp     #$14
        beq     @835d
        inc
        sta     $891f,y
        inc     $94
        jsr     ScrollLoreListDown
        bra     @8353
@8345:  lda     $891f,y
        beq     @835d
        dec
        sta     $891f,y
        inc     $94
        jsr     ScrollLoreListUp
@8353:  lda     $36
        sta     $8923,y
        lda     $37
        sta     $8927,y
@835d:  lda     $04
        bpl     @837c
        jsr     _c183f7
        lda     $216b,x
        bmi     @837a
        inc     $94
        lda     $216a,x
        sta     $7a85
        lda     $216c,x                 ; copy targeting flags
        sta     $7a84
        jmp     _c17795
@837a:  inc     $95
@837c:  lda     $09
        bpl     @8386
        inc     $96
        jsr     CloseLoreWindow
        rts
@8386:  jsr     _c183f7
        lda     $216d,x
        sta     $6178
        lda     #$08
        sta     $36
        ldx     #$01cd
        stx     $2e
        lda     $891f,y
        jsr     _c1898f
        clr_ax
        lda     f:LoreCursorXPosTbl,x
        sta     $88e4
        lda     $8927,y
        tax
        lda     f:ListCursorYPosTbl,x
        sta     $88e5
        inc     $88e3
        rts

; ------------------------------------------------------------------------------

; [  ]

ScrollLoreListDown:
@83b6:  clc
        adc     #$03
        jsr     DrawLoreListText
        lda     #$17
        sta     $7bc2
        jsr     _c18269
        lda     $7afd
        cmp     #$04
        beq     @83ce
        inc
        bra     @83cf
@83ce:  clr_a
@83cf:  sta     $7afd
        bra     _83ec

; ------------------------------------------------------------------------------

; [  ]

ScrollLoreListUp:
@83d4:  jsr     DrawLoreListText
        lda     #$18
        sta     $7bc2
        jsr     _c18269
        lda     $7afd
        beq     @83e7
        dec
        bra     @83e9
@83e7:  lda     #$04
@83e9:  sta     $7afd

learning_one_scr:
_83ec:  lda     #$03
        sta     $7ba8
        lda     #$1b
        sta     $7bc3
        rts

; ------------------------------------------------------------------------------

; [  ]

_c183f7:
get_learning_poi:
@83f7:  phy
        lda     $62ca
        tay
        asl
        tax
        lda     $891f,y
        clc
        adc     $8927,y
        longa
        asl2
        clc
        adc     f:CharSpellListPtrs,x
        tax
        shorta0
        ply
        rts

; ------------------------------------------------------------------------------

; [  ]

_c18414:
get_magic_poi:
@8414:  phy
        lda     $62ca
        tay
        asl
        tax
        lda     $8913,y
        clc
        adc     $891b,y
        sta     $40
        asl
        clc
        adc     $8917,y
        longa
        asl2
        clc
        adc     f:CharSpellListPtrs,x
        tax
        shorta0
        ply
        rts

; ------------------------------------------------------------------------------

; [ get cursor position in rage menu ]

_c18438:
get_riot_poi:
@8438:  ldx     $62ca
        lda     $892f,x
        sta     $40
        stz     $41
        lda     $892b,x
        clc
        adc     $8933,x
        longa
        asl
        clc
        adc     $40
        tax
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

_c18454:
get_throw_poi:
@8454:  phy
        lda     $62ca
        tay
        asl
        tax
        lda     $8953,y
        clc
        adc     $895b,y
        longa
        sta     $40
        asl
        clc
        adc     $40
        tax
        shorta0
        ply
        rts

; ------------------------------------------------------------------------------

; [  ]

_c18470:
get_machine_poi:
@8470:  phy
        lda     $62ca
        tay
        asl
        tax
        lda     $895f,y       ; scroll position
        clc
        adc     $8967,y       ; y position
        asl
        clc
        adc     $8963,y       ; x position
        longa
        sta     $40           ; multiply by 3
        asl
        clc
        adc     $40
        tax
        shorta0
        ply
        rts

; ------------------------------------------------------------------------------

; [  ]

_c18491:
get_madou_poi:
@8491:  ldx     $62ca
        lda     $8943,x
        asl
        clc
        adc     $893f,x
        tax
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1849e:
@849e:  ldx     $62ca
        lda     $893b,x
        asl
        clc
        adc     $8937,x
        tax
        rts

; ------------------------------------------------------------------------------

; [  ]

_c184ab:
get_command_poi:
@84ab:  ldx     $62ca
        lda     $890f,x
        sta     $2c
        lda     #$03
        sta     $2e
        jsr     Mult8NoHW
        ldx     $62ca
        lda     f:CharCmdPtrs,x
        clc
        adc     $30
        tax
        rts

; ------------------------------------------------------------------------------

; [ update menu state $1e: rage ]

UpdateMenuState_1e:
@84c6:  stz     $88e3
        stz     $88ef
        lda     $7bcb
        beq     @84d7
        lda     #$1d
        sta     $7bc2
        rts
@84d7:  ldy     $62ca
        lda     $892f,y
        sta     $36
        lda     $8933,y
        sta     $37
        lda     $892b,y
        sta     $38
        lda     #$01
        sta     $39         ; 2 columns
        jsr     GetCursorInput
        lda     $3c
        beq     @8516
        bmi     @8508
        lda     $892b,y
        cmp     #$7c
        beq     @8520
        inc
        sta     $892b,y
        inc     $94
        jsr     ScrollRageListDown
        bra     @8516
@8508:  lda     $892b,y
        beq     @8520
        dec
        sta     $892b,y
        inc     $94
        jsr     ScrollRageListUp
@8516:  lda     $36
        sta     $892f,y
        lda     $37
        sta     $8933,y
@8520:  lda     $09
        bpl     @852a
        inc     $96
        jsr     CloseRageWindow
        rts
@852a:  lda     $04
        bpl     @854a
        jsr     _c18438
        lda     $257e,x
        cmp     #$ff
        beq     @8548
        inc     $96
        lda     $257e,x
        sta     $7a85
        lda     #$02                    ; self-target
        sta     $7a84
        jmp     _c17795
@8548:  inc     $95
@854a:  lda     #$7c
        sta     $36
        ldx     #$004b
        stx     $2e
        lda     $892b,y
        jsr     _c1898f
        lda     $892f,y
        tax
        lda     f:RageCursorXPosTbl,x
        sta     $88e4
        lda     $8933,y
        tax
        lda     f:ListCursorYPosTbl,x
        sta     $88e5
        inc     $88e3
        rts

; ------------------------------------------------------------------------------

; [  ]

ScrollRageListDown:
@8573:  clc
        adc     #$03
        jsr     DrawRageListText
        lda     #$17
        sta     $7bc2
        jsr     _c18269
        lda     $7afd
        cmp     #$04
        beq     @858b
        inc
        bra     @858c
@858b:  clr_a
@858c:  sta     $7afd
        bra     _85a9

ScrollRageListUp:
@8591:  jsr     DrawRageListText
        lda     #$18
        sta     $7bc2
        jsr     _c18269
        lda     $7afd
        beq     @85a4
        dec
        bra     @85a6
@85a4:  lda     #$04
@85a6:  sta     $7afd

riot_one_scr:
_85a9:  lda     #$03
        sta     $7ba8
        lda     #$1e
        sta     $7bc3
        rts

; ------------------------------------------------------------------------------

; [ update menu state $21: dance ]

UpdateMenuState_21:
@85b4:  stz     $88e3
        lda     $7bcb
        beq     @85c2
        lda     #$20
        sta     $7bc2
        rts
@85c2:  ldy     $62ca
        lda     $8937,y
        sta     $36
        lda     $893b,y
        sta     $37
        stz     $38
        lda     #$01
        sta     $39         ; 2 columns
        jsr     GetCursorInput
        lda     $3c
        bne     @85e6
        lda     $36
        sta     $8937,y
        lda     $37
        sta     $893b,y
@85e6:  lda     $09
        bpl     @85f0
        inc     $96
        jsr     CloseDanceWindow
        rts
@85f0:  lda     $04
        bpl     @860b
        jsr     _c1849e
        lda     $267e,x
        bmi     @8609
        inc     $96
        sta     $7a85
        lda     #$02                    ; self-target
        sta     $7a84
        jmp     _c17795
@8609:  inc     $95
@860b:  lda     $8937,y
        tax
        lda     f:ItemCursorXPosTbl,x
        sta     $88e4
        lda     $893b,y
        tax
        lda     f:ListCursorYPosTbl,x
        sta     $88e5
        inc     $88e3
        rts

; ------------------------------------------------------------------------------

; [ update menu state $2a: magitek attack select ]

UpdateMenuState_2a:
@8625:  stz     $88e3
        lda     $7bcb
        beq     @8633
        lda     #$29
        sta     $7bc2
        rts
@8633:  ldy     $62ca
        lda     $893f,y
        sta     $36
        lda     $8943,y
        sta     $37
        stz     $38
        lda     #$01
        sta     $39         ; 2 columns
        jsr     GetCursorInput
        lda     $3c
        bne     @8657
        lda     $36
        sta     $893f,y
        lda     $37
        sta     $8943,y
@8657:  lda     $09
        bpl     @8661
        inc     $96
        jsr     CloseMagitekWindow
        rts
@8661:  sty     $36
        lda     $04
        bpl     @8699
        jsr     _c18491
        lda     $62ca
        asl5
        tay
        lda     $2eae,y
        bne     @8680
        lda     f:TerraMagitekAttackTbl,x
        bmi     @8697
        bra     @8686
@8680:  lda     f:DefaultMagitekAttackTbl,x
        bmi     @8697
@8686:  inc     $96
        sta     $7a85
        ldy     $36
        lda     f:MagitekAttackTargetFlags,x
        sta     $7a84
        jmp     _c17795
@8697:  inc     $95
@8699:  ldy     $36
        lda     $893f,y
        tax
        lda     f:RageCursorXPosTbl,x
        sta     $88e4
        lda     $8943,y
        tax
        lda     f:ListCursorYPosTbl,x
        sta     $88e5
        inc     $88e3
        rts

; ------------------------------------------------------------------------------

; [ update menu state $2d: throw (item select) ]

UpdateMenuState_2d:
@86b5:  stz     $88e3
        stz     $88ef
        lda     $7bcb
        beq     @86c6
        lda     #$2c
        sta     $7bc2
        rts
@86c6:  ldy     $62ca
        stz     $36
        lda     $895b,y
        sta     $37
        lda     $8953,y
        sta     $38
        clr_a
        sta     $39         ; 1 column
        jsr     GetCursorInput
        lda     $3c
        beq     @8701
        bmi     @86f3
        lda     $8953,y
        cmp     #$fb        ; max scroll position
        beq     @870b
        inc
        sta     $8953,y
        inc     $94
        jsr     ScrollThrowListDown
        bra     @8701
@86f3:  lda     $8953,y
        beq     @870b
        dec
        sta     $8953,y
        inc     $94
        jsr     ScrollThrowListUp
@8701:  lda     $36
        sta     $8957,y
        lda     $37
        sta     $895b,y
@870b:  lda     $04
        bpl     @872b
        inc     $96
        jsr     _c18454
        lda     $4005,x
        cmp     #$ff
        bne     @871f
        inc     $95
        bra     @872b
@871f:  sta     $7a85
        lda     $4007,x                 ; copy targeting flags
        sta     $7a84
        jmp     _c17795
@872b:  lda     $09
        bpl     @8735
        inc     $96
        jsr     CloseThrowWindow
        rts
@8735:  lda     #$fb
        sta     $36
        ldx     #$0025
        stx     $2e
        lda     $8953,y
        jsr     _c1898f
        clr_ax
        lda     f:ItemCursorXPosTbl,x
        sta     $88e4
        lda     $895b,y
        tax
        lda     f:ListCursorYPosTbl,x
        sta     $88e5
        inc     $88e3
        rts

; ------------------------------------------------------------------------------

; [  ]

ScrollThrowListDown:
@875c:  clc
        adc     #$03
        jsr     DrawThrowListText
        lda     #$17
        sta     $7bc2
        jsr     _c18269
        lda     $7afd
        cmp     #$04
        beq     @8774
        inc
        bra     @8775
@8774:  clr_a
@8775:  sta     $7afd
        bra     _8792

; ------------------------------------------------------------------------------

ScrollThrowListUp:
@877a:  jsr     DrawThrowListText
        lda     #$18
        sta     $7bc2
        jsr     _c18269
        lda     $7afd
        beq     @878d
        dec
        bra     @878f
@878d:  lda     #$04
@878f:  sta     $7afd

throw_one_scr:
_8792:  lda     #$03
        sta     $7ba8
        lda     #$2d
        sta     $7bc3
        rts

; ------------------------------------------------------------------------------

; [ update menu state $30: tools select ]

UpdateMenuState_30:
@879d:  stz     $88e3
        stz     $88ef
        lda     $7bcb
        beq     @87ae       ; branch if not forcing menu to close
        lda     #$2f
        sta     $7bc2
        rts
@87ae:  ldy     $62ca
        lda     $8963,y
        sta     $36
        lda     $8967,y
        sta     $37
        lda     $895f,y
        sta     $38
        lda     #$01
        sta     $39         ; 2 columns
        jsr     GetCursorInput
        lda     $3c
        beq     @87eb
        bmi     @87dd

; scroll down
        lda     $895f,y
        beq     @87f5       ; max scroll position is zero
        inc
        sta     $895f,y
        inc     $94         ; play cursor sound effect
        jsr     ScrollToolsListDown
        bra     @87eb

; scroll up
@87dd:  lda     $895f,y
        beq     @87f5       ; min scroll position is zero
        dec
        sta     $895f,y
        inc     $94         ; play cursor sound effect
        jsr     ScrollToolsListUp

; no scroll
@87eb:  lda     $36
        sta     $8963,y
        lda     $37
        sta     $8967,y

; a button
@87f5:  lda     $04
        bpl     @8818
        inc     $96
        jsr     _c18470
        lda     $4005,x       ; item id
        cmp     #$ff
        bne     @8809         ; branch if valid
        inc     $95
        bra     @8818
@8809:  lda     $4005,x
        sta     $7a85         ; set item being used
        lda     $4007,x                 ; copy targeting flags
        sta     $7a84
        jmp     _c17795

; b button
@8818:  lda     $09
        bpl     @8822
        inc     $96
        jsr     CloseToolsWindow
        rts
@8822:  lda     $8963,y
        tax
        lda     f:ToolsCursorXPosTbl,x
        sta     $88e4
        lda     $8967,y
        tax
        lda     f:ListCursorYPosTbl,x
        sta     $88e5
        inc     $88e3
        rts

; ------------------------------------------------------------------------------

; [  ]

ScrollToolsListDown:
@883c:  clc
        adc     #$03
        jsr     DrawToolsListText
        lda     #$17
        sta     $7bc2
        jsr     _c18269
        lda     $7afd
        cmp     #$04
        beq     @8854
        inc
        bra     @8855
@8854:  clr_a
@8855:  sta     $7afd
        bra     _8872

; ------------------------------------------------------------------------------

; [  ]

ScrollToolsListUp:
@885a:  jsr     DrawToolsListText
        lda     #$18
        sta     $7bc2
        jsr     _c18269
        lda     $7afd
        beq     @886d
        dec
        bra     @886f
@886d:  lda     #$04
@886f:  sta     $7afd

machine_one_scr:
_8872:  lda     #$03
        sta     $7ba8
        lda     #$30
        sta     $7bc3
        rts

; ------------------------------------------------------------------------------

; [ update menu state $0a: item select ]

UpdateMenuState_0a:
@887d:  stz     $88e3
        stz     $88ef
        lda     $7bcb
        beq     @8897
        stz     $7baf
        stz     $7bb5
        stz     $7b02
        lda     #$12
        sta     $7bc2
        rts
@8897:  ldx     #$00a4
        stx     $7bb3
        ldy     $62ca
        clr_a
        sta     $894b,y
        sta     $36
        lda     $894f,y
        sta     $37
        lda     $8947,y
        sta     $38
        stz     $39         ; 1 column
        jsr     GetCursorInput
        lda     $3c
        beq     @88fb
        bmi     @88cd
        lda     $8947,y
        cmp     #$fb
        beq     @8905
        inc
        sta     $8947,y
        inc     $94
        jsr     ScrollItemListDown
        bra     @88fb
@88cd:  lda     $8947,y
        bne     @88f2
        lda     $3c
        and     #$40
        bne     @88dc
        clr_a
        sta     $894b,y
@88dc:  lda     $7b02
        beq     @88e6
        lda     $7b00
        beq     @8905
@88e6:  ldx     #$00c8
        stx     $7bb3
        inc     $94
        jsr     OpenEquipWindow
        rts
@88f2:  dec
        sta     $8947,y
        inc     $94
        jsr     ScrollItemListUp
@88fb:  lda     $36
        sta     $894b,y
        lda     $37
        sta     $894f,y
@8905:  lda     $7ba8
        bne     @8963
        lda     $04
        bpl     @893b
        jsr     _c18a24
        bcc     @8963
        stz     $7baf
        stz     $7bb5
        stz     $7b02
        jsr     _c189be
        lda     $2686,x
        sta     $7a85
        lda     $2688,x                 ; copy targeting flags
        sta     $7a84
        stz     $7a1e
        stz     $ecba
        and     #$40
        jeq     UpdateMenuState_3f
        jmp     _c17795
@893b:  lda     $09
        bpl     @8963
        inc     $96
        stz     $7baf
        stz     $7bb5
        lda     $7b02
        bne     @8955
        stz     $7baf
        stz     $7bb5
        jmp     CloseItemWindow
@8955:  stz     $7b02
        stz     $890c
        lda     #$0a
        sta     $7bc3
        jsr     _c18d76
@8963:  ldy     $62ca
        lda     #$fb
        sta     $36
        ldx     #$0025
        stx     $2e
        lda     $8947,y
        jsr     _c1898f
        lda     $894b,y
        tax
        lda     f:ItemCursorXPosTbl,x
        sta     $88e4
        lda     $894f,y
        tax
        lda     f:ListCursorYPosTbl,x
        sta     $88e5
        inc     $88e3
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1898f:
ud_cur_set:
@898f:  sta     $2c
        bne     @8997
        lda     #$01
        bra     @89a0
@8997:  cmp     $36
        bne     @899f
        lda     #$02
        bra     @89a0
@899f:  clr_a
@89a0:  sta     $88f2
        stz     $2d
        longa
        jsr     Mult816NoHW
        shorta0
        lda     $31
        clc
        adc     #$a1
        sta     $88f1
        lda     #$f0
        sta     $88f0
        inc     $88ef
        rts

; ------------------------------------------------------------------------------

; [  ]

_c189be:
get_item_poi:
@89be:  phy
        lda     $8947,y
        clc
        adc     $894f,y
        longa
        sta     $40
        asl2
        clc
        adc     $40
        tax
        shorta0
        ply
        rts

; ------------------------------------------------------------------------------

; [  ]

_c189d5:
check_equip:
@89d5:  lda     $7b39
        cmp     #$ff
        beq     @8a0c
        lda     $7b3b
        cmp     #$ff
        beq     @8a0c
        phx
        ldx     $62ca
        lda     $2e6e,x
        beq     @89fd
        plx
        lda     $7b3a
        and     #$08
        beq     @8a0c
        lda     $7b3c
        and     #$08
        beq     @8a0c
        bra     @8a0a
@89fd:  plx
        lda     $7b3a
        ora     $7b3c
        and     #$18
        cmp     #$18
        beq     @8a0c
@8a0a:  sec
        rts
@8a0c:  phx
        ldx     $62ca
        lda     #$01
        sta     $2f30,x
        plx
        clc
        rts

; ------------------------------------------------------------------------------

; [  ]

_c18a18:
@8a18:  phx
        ldx     $62ca
        lda     f:BitOrTbl,x
        sta     $2c
        plx
        rts

; ------------------------------------------------------------------------------

; [  ]

_c18a24:
set_item_one:
@8a24:  inc     $96
        jsr     _c189be
        lda     $7b02
        bne     @8a31
        jmp     @8b23
@8a31:  stx     $7b05
        lda     $7b00
        beq     @8a9d
        lda     $2686,x
        cmp     #$ff
        beq     @8a51
        jsr     _c18a18
        lda     $2687,x
        and     #$18
        beq     @8a89
        lda     $268a,x
        and     $2c
        bne     @8a89
@8a51:  lda     $7b00
        cmp     #$01
        beq     @8a69
        ldy     $7b03
        lda     $2b86,y
        sta     $7b3b
        lda     $2b87,y
        sta     $7b3c
        bra     @8a78
@8a69:  ldy     $7b03
        lda     $2b9a,y
        sta     $7b3b
        lda     $2b9b,y
        sta     $7b3c
@8a78:  lda     $2686,x
        sta     $7b39
        lda     $2687,x
        sta     $7b3a
        jsr     _c189d5
        bcc     @8a90
@8a89:  inc     $95
        stz     $96
        jmp     @8b0a
@8a90:  lda     $7b00
        cmp     #$01
        jne     @8c02
        jmp     @8b4d
@8a9d:  cpx     $7b03
        bne     @8ace
        stz     $7baf
        stz     $7bb5
        lda     $2686,x
        cmp     #$ff
        beq     @8ab4
        lda     $2687,x
        bpl     @8ac6
@8ab4:  inc     $95
        stz     $96
        stz     $890c
        stz     $7b02
        stz     $7baf
        stz     $7bb5
        clc
        rts
@8ac6:  lda     $2687,x
        stz     $890c
        sec
        rts
@8ace:  phy
        clr_ay
@8ad1:  lda     $2686,x
        sta     $7b07,y
        inx
        iny
        cpy     #5
        bne     @8ad1
        ldy     $7b05
        ldx     $7b03
        lda     #$05
        sta     $40
@8ae8:  lda     $2686,x
        sta     $2686,y
        inx
        iny
        dec     $40
        bne     @8ae8
        clr_ax
        ldy     $7b03
@8af9:  lda     $7b07,x
        sta     $2686,y
        inx
        iny
        cpx     #5
        bne     @8af9
        stz     $7b02
        ply
@8b0a:  stz     $890c
        lda     #$0a
        sta     $7bc3
        jsr     _c18d76
        stz     $7b00
        stz     $7b02
        stz     $7baf
        stz     $7bb5
        clc
        rts
@8b23:  stz     $7b00
        stx     $7b03
        inc     $7b02
        lda     $894b,y
        tax
        lda     f:ItemCursorXPosTbl,x
        clc
        adc     #$03
        sta     $7bb0
        lda     $894f,y
        tax
        lda     f:ListCursorYPosTbl,x
        tax
        stx     $7bb1
        lda     #$01
        sta     $7baf
        clc
        rts
@8b4d:  phy
        clr_ax
        ldy     $7b03
@8b53:  lda     $2b86,y
        sta     $7b07,x
        inx
        iny
        cpx     #5
        bne     @8b53
        ldx     $7b05
        ldy     $7b03
        lda     $2b86,y
        cmp     $2686,x
        bne     @8b85
        lda     #$ff
        sta     $2b86,y
        lda     #$80
        sta     $2b87,y
        clr_a
        sta     $2b88,y
        sta     $2b89,y
        sta     $2b8a,y
        jmp     @8be1
@8b85:  lda     $2686,x
        sta     $2b86,y
        lda     $2687,x
        sta     $2b87,y
        lda     $2688,x
        sta     $2b88,y
        lda     $268a,x
        sta     $2b8a,y
        lda     #$01
        sta     $2b89,y
        lda     $2689,x
        cmp     #$02
        bcc     @8bae
        dec     $2689,x
        bra     @8bc1
@8bae:  lda     #$ff
        sta     $2686,x
        lda     #$80
        sta     $2687,x
        stz     $2688,x
        stz     $2689,x
        stz     $268a,x
@8bc1:  lda     $7b07
        sta     $40
        jsr     FindInventoryItem
        bcc     @8be1
        jsr     CheckInventoryFull
        bcs     @8beb
        clr_ay
@8bd2:  lda     $7b07,y
        sta     $2686,x
        inx
        iny
        cpy     #5
        bne     @8bd2
        bra     @8beb
@8be1:  lda     $2689,x
        cmp     #$63
        bcs     @8beb
        inc     $2689,x
@8beb:  stz     $890c
        lda     #$0a
        sta     $7bc3
        jsr     _c18d76
        stz     $7baf
        stz     $7bb5
        stz     $7b02
        ply
        clc
        rts
@8c02:  phy
        clr_ax
        ldy     $7b03
@8c08:  lda     $2b9a,y
        sta     $7b07,x
        inx
        iny
        cpx     #5
        bne     @8c08
        ldx     $7b05
        ldy     $7b03
        lda     $2b9a,y
        cmp     $2686,x
        bne     @8c3a
        lda     #$ff
        sta     $2b9a,y
        lda     #$80
        sta     $2b9b,y
        clr_a
        sta     $2b9c,y
        sta     $2b9d,y
        sta     $2b9e,y
        jmp     @8c96
@8c3a:  lda     $2686,x
        sta     $2b9a,y
        lda     $2687,x
        sta     $2b9b,y
        lda     $2688,x
        sta     $2b9c,y
        lda     $268a,x
        sta     $2b9e,y
        lda     #$01
        sta     $2b9d,y
        lda     $2689,x
        cmp     #$02
        bcc     @8c63
        dec     $2689,x
        bra     @8c76
@8c63:  lda     #$ff
        sta     $2686,x
        lda     #$80
        sta     $2687,x
        stz     $2688,x
        stz     $2689,x
        stz     $268a,x
@8c76:  lda     $7b07
        sta     $40
        jsr     FindInventoryItem
        bcc     @8c96
        jsr     CheckInventoryFull
        bcs     @8ca0
        clr_ay
@8c87:  lda     $7b07,y
        sta     $2686,x
        inx
        iny
        cpy     #5
        bne     @8c87
        bra     @8ca0
@8c96:  lda     $2689,x
        cmp     #$63
        bcs     @8ca0
        inc     $2689,x
@8ca0:  stz     $890c
        lda     #$0a
        sta     $7bc3
        jsr     _c18d76
        stz     $7baf
        stz     $7bb5
        stz     $7b02
        ply
        clc
        rts

; ------------------------------------------------------------------------------

; [ find item in inventory ]

FindInventoryItem:
@8cb7:  clr_ax
        lda     $40
        cmp     #$ff
        beq     @8cce
@8cbf:  cmp     $2686,x
        beq     @8cd0
        inx5
        cpx     #$0500
        bne     @8cbf
@8cce:  sec
        rts
@8cd0:  clc
        rts

; ------------------------------------------------------------------------------

; [ check if inventory is full ]

CheckInventoryFull:
@8cd2:  clr_ax
        lda     #$ff
@8cd6:  cmp     $2686,x
        beq     @8ce7
        inx5
        cpx     #$0500
        bne     @8cd6
        sec
        rts
@8ce7:  clc
        rts

; ------------------------------------------------------------------------------

; [ scroll inventory list down ]

ScrollItemListDown:
@8ce9:  clc
        adc     #$03
        jsr     DrawItemListText
        ldx     $7bb1
        dex4
        stx     $7bb1
        lda     #$17
        sta     $7bc2
        jsr     _c18269
        lda     $7afd
        cmp     #$04
        beq     @8d0b
        inc
        bra     @8d0c
@8d0b:  clr_a
@8d0c:  sta     $7afd
        bra     _8d33

; ------------------------------------------------------------------------------

; [ scroll inventory list up ]

ScrollItemListUp:
@8d11:  jsr     DrawItemListText
        ldx     $7bb1
        inx4
        stx     $7bb1
        lda     #$18
        sta     $7bc2
        jsr     _c18269
        lda     $7afd
        beq     @8d2e
        dec
        bra     @8d30
@8d2e:  lda     #$04
@8d30:  sta     $7afd

item_one_scr:
_8d33:  lda     #$03
        sta     $7ba8
        lda     #$0a
        sta     $7bc3
        rts

; ------------------------------------------------------------------------------

; [ update menu state $31:  ]

UpdateMenuState_31:
redrow_item:
@8d3e:  lda     $7ba7
        jsr     DrawItemListText
        lda     $7ba6
        asl
        tax
        lda     f:_c18291,x
        sta     $7baa
        lda     f:_c18291+1,x
        sta     $7bab
        inc     $7ba9
        inc     $7ba7
        lda     $7ba6
        cmp     #$04
        beq     @8d67
        inc
        bra     @8d68
@8d67:  clr_a
@8d68:  sta     $7ba6
        dec     $7ba5
        bne     @8d75
        lda     #$02
        sta     $7bc2
@8d75:  rts

; ------------------------------------------------------------------------------

; [  ]

_c18d76:
redrow_item_set:
@8d76:  ldy     $62ca
        lda     $7afd
        cmp     #$04
        bne     @8d83
        clr_a
        bra     @8d84
@8d83:  inc
@8d84:  sta     $7ba6
        lda     $8947,y
        sta     $7ba7
        lda     #$04
        sta     $7ba5
        lda     #$31
        sta     $7bc2
        rts

; ------------------------------------------------------------------------------

; [ update menu state $0c: weapon/shield select ]

UpdateMenuState_0c:
@8d98:  lda     $7b02
        beq     @8da3
        lda     $7b00
        sta     $7bb5
@8da3:  stz     $88e3       ; disable cursor
        lda     $7bcb
        beq     @8db1
        lda     #$13
        sta     $7bc2
        rts
@8db1:  ldx     $62ca
        lda     $05

; right button
        cmp     #$01
        bne     @8dcd       ; branch if the right button is not pressed
        inc     $94         ; play move sound effect
        lda     $894b,x     ; cursor x position
        cmp     #$01        ; check if on the right item slot
        bne     @8dc8       ; branch if not in the right slot
        stz     $894b,x     ; set the x position to zero
        bra     @8de1       ; branch below to close the menu
@8dc8:  inc     $894b,x     ; move to the right item slot
        bra     @8dec       ; branch below to check the a button

; left button
@8dcd:  cmp     #$02
        bne     @8ddd       ; branch if the left button is not pressed
        lda     $894b,x     ; cursor x position
        beq     @8dec       ; branch if in the left slot
        inc     $94         ; play move sound effect
        dec     $894b,x     ; move the cursor to the left item slot
        bra     @8dec

; down button
@8ddd:  cmp     #$04
        bne     @8dec
@8de1:  stz     $894b,x     ; clear cursor x position
        stz     $7bb5
        inc     $94         ; play move sound effect
        jmp     CloseEquipWindow

; A button
@8dec:  lda     $04
        bpl     @8e08
        ldx     $62ca
        lda     $6286,x
        beq     @8dfc       ; branch if can change equipment
        inc     $95         ; play error sound effect
        bra     @8e08
@8dfc:  lda     #$01
        sta     $2f30,x     ; set equipment change flag
        inc     $96         ; play confirm sound effect
        jsr     SelectEquipItem
        bcc     @8e08

; B button
@8e08:  lda     $09
        bpl     @8e1d
        inc     $96         ; play confirm sound effect
        stz     $890c
        jsr     _c18e34
        stz     $7baf
        stz     $7bb5
        stz     $7b02
@8e1d:  ldx     $62ca
        lda     $894b,x     ; cursor x position (0 or 1)
        tax
        lda     f:EquipCursorXPosTbl,x
        sta     $88e4       ; sprite x position
        lda     #$b4
        sta     $88e5       ; sprite y position
        inc     $88e3       ; enable cursor
        rts

; ------------------------------------------------------------------------------

; [  ]

_c18e34:
set_hand_item_mess:
@8e34:  jsr     DrawEquipListText
        ldx     #$7e40
        stx     $7baa
        inc     $7ba9
; fallthrough

; ------------------------------------------------------------------------------

; [  ]

_c18e40:
set_item_mess:
@8e40:  lda     #$0c
        sta     $7bc3
        jmp     _c18d76

; ------------------------------------------------------------------------------

; [  ]

_c18e48:
get_hand_poi:
@8e48:  ldx     $62ca
        lda     f:CharEquipPtrs,x
        tax
        rts

; ------------------------------------------------------------------------------

; [ select an item in the equip menu ]

SelectEquipItem:
@8e51:  jsr     _c18e48
        ldy     $62ca
        lda     $7b02
        bne     @8e5f
        jmp     @8f28
@8e5f:  stx     $7b05
        lda     $7b00
        bne     @8e6a
        jmp     @8efe
@8e6a:  lda     $894b,y
        inc
        cmp     $7b00
        beq     @8ec9
        clr_ay
@8e75:  lda     $2b86,x
        sta     $7b07,y
        inx
        iny
        cpy     #5
        bne     @8e75
        sty     $40
        ldx     $7b05
@8e87:  lda     $2b9a,x
        sta     $2b86,x
        inx
        dec     $40
        bne     @8e87
        ldx     $7b05
        clr_ay
@8e97:  lda     $7b07,y
        sta     $2b9a,x
        inx
        iny
        cpy     #5
        bne     @8e97
        stz     $890c
        jsr     DrawEquipListText
        ldx     #$7e40
        stx     $7baa
        inc     $7ba9
        stz     $7b02
        stz     $7baf
        stz     $7bb5
        jsr     _c18e40
        ldx     $62ca
        lda     #$01
        sta     $2f30,x
        clc
        rts
@8ec9:  stz     $7b02
        stz     $7baf
        stz     $7bb5
        stz     $890c
        lda     $894b,y
        beq     @8ee8
        lda     $2b9a,x
        cmp     #$ff
        beq     @8ef9
        lda     $2b9b,x
        bpl     @8ef4
        bra     @8ef9
@8ee8:  lda     $2b86,x
        cmp     #$ff
        beq     @8ef9
        lda     $2b87,x
        bmi     @8ef9
@8ef4:  jsr     _c18e40
        sec
        rts
@8ef9:  jsr     _c18e40
        clc
        rts
@8efe:  lda     $894b,y
        beq     @8f08
        jsr     _c1903d
        bra     @8f0b
@8f08:  jsr     _c18f76
@8f0b:  stz     $890c
        jsr     DrawEquipListText
        ldx     #$7e40
        stx     $7baa
        inc     $7ba9
        stz     $7b02
        stz     $7baf
        stz     $7bb5
        jsr     _c18e40
        clc
        rts
@8f28:  lda     #$01
        sta     $890c
        lda     $894b,y
        bne     @8f40
        lda     $2b9a,x
        sta     $890d
        lda     $2b9b,x
        sta     $890e
        bra     @8f4c
@8f40:  lda     $2b86,x
        sta     $890d
        lda     $2b87,x
        sta     $890e
@8f4c:  lda     $894b,y
        inc
        sta     $7b00
        inc     $7b02
        stx     $7b03
        lda     $894b,y
        tax
        lda     f:EquipCursorXPosTbl,x
        clc
        adc     #$03
        sta     $7bb6
        lda     #$b4
        sta     $7bb7
        lda     #$01
        sta     $7bb5
        jsr     _c18e40
        clc
        rts

; ------------------------------------------------------------------------------

; [  ]

_c18f76:
hand_r2item:
@8f76:  ldx     $7b03
        ldy     $7b05
        lda     $2b86,y
        cmp     $2686,x
        bne     @8f85
@8f84:  rts
@8f85:  lda     $2686,x
        cmp     #$ff
        beq     @8f9d
        jsr     _c18a18
        lda     $2687,x
        and     #$18
        beq     @8f84
        lda     $268a,x
        and     $2c
        bne     @8f84
@8f9d:  lda     $2b9a,y
        sta     $7b3b
        lda     $2b9b,y
        sta     $7b3c
        lda     $2686,x
        sta     $7b39
        lda     $2687,x
        sta     $7b3a
        jsr     _c189d5
        bcs     @8f84
        ldx     $7b03
        ldy     $7b05
        clr_ax
        ldy     $7b05
@8fc5:  lda     $2b86,y
        sta     $7b07,x
        inx
        iny
        cpx     #5
        bne     @8fc5
        ldx     $7b03
        ldy     $7b05
        lda     $2686,x
        sta     $2b86,y
        lda     $2687,x
        sta     $2b87,y
        lda     $2688,x
        sta     $2b88,y
        lda     $268a,x
        sta     $2b8a,y
        lda     #$01
        sta     $2b89,y
        lda     $2689,x
        cmp     #$02
        bcc     @9001
        dec     $2689,x
        bra     @9014
@9001:  lda     #$ff
        sta     $2686,x
        lda     #$80
        sta     $2687,x
        stz     $2688,x
        stz     $2689,x
        stz     $268a,x
@9014:  lda     $7b07
        sta     $40
        jsr     FindInventoryItem
        bcc     @9032
        jsr     CheckInventoryFull
        clr_ay
@9023:  lda     $7b07,y
        sta     $2686,x
        inx
        iny
        cpy     #5
        bne     @9023
        bra     @903c
@9032:  lda     $2689,x
        cmp     #$63
        bcs     @903c
        inc     $2689,x
@903c:  rts

; ------------------------------------------------------------------------------

; [  ]

_c1903d:
hand_l2item:
@903d:  ldx     $7b03
        ldy     $7b05
        lda     $2b9a,y
        cmp     $2686,x
        bne     @904c
@904b:  rts
@904c:  lda     $2686,x
        cmp     #$ff
        beq     @9064
        jsr     _c18a18
        lda     $2687,x
        and     #$18
        beq     @904b
        lda     $268a,x
        and     $2c
        bne     @904b
@9064:  lda     $2b86,y
        sta     $7b3b
        lda     $2b87,y
        sta     $7b3c
        lda     $2686,x
        sta     $7b39
        lda     $2687,x
        sta     $7b3a
        jsr     _c189d5
        bcs     @904b
        ldx     $7b03
        ldy     $7b05
        clr_ax
        ldy     $7b05
@908c:  lda     $2b9a,y
        sta     $7b07,x
        inx
        iny
        cpx     #5
        bne     @908c
        ldx     $7b03
        ldy     $7b05
        lda     $2686,x
        sta     $2b9a,y
        lda     $2687,x
        sta     $2b9b,y
        lda     $2688,x
        sta     $2b9c,y
        lda     $268a,x
        sta     $2b9e,y
        lda     #$01
        sta     $2b9d,y
        lda     $2689,x
        cmp     #$02
        bcc     @90c8
        dec     $2689,x
        bra     @90db
@90c8:  lda     #$ff
        sta     $2686,x
        lda     #$80
        sta     $2687,x
        stz     $2688,x
        stz     $2689,x
        stz     $268a,x
@90db:  lda     $7b07
        sta     $40
        jsr     FindInventoryItem
        bcc     @90f9
        jsr     CheckInventoryFull
        clr_ay
@90ea:  lda     $7b07,y
        sta     $2686,x
        inx
        iny
        cpy     #5
        bne     @90ea
        bra     @9103
@90f9:  lda     $2689,x
        cmp     #$63
        bcs     @9103
        inc     $2689,x
@9103:  rts

; ------------------------------------------------------------------------------

; magitek attack target flags
MagitekAttackTargetFlags:
@9104:  .byte   $43, $43, $43, $6a, $03, $6a, $43, $43

; Terra's magitek attacks
TerraMagitekAttackTbl:
@910c:  .byte   $00, $01, $02, $03, $04, $05, $06, $07

; other character magitek attacks
DefaultMagitekAttackTbl:
@9114:  .byte   $00, $01, $02, $ff, $04, $ff, $ff, $ff

; ------------------------------------------------------------------------------

; [ update menu state $41: status window for character target select ]

UpdateMenuState_41:
@911c:  lda     #$40
        sta     $7bc2
        jmp     _c17795

; ------------------------------------------------------------------------------

; [  ]

_c19124:
long_magic_init:
@9124:  jsr     _c1ab43       ; init single thread animation
        stz     $62b0
        jsr     CopyPal
        jsr     PushMonsterPalID
        stz     $62d0
        stz     $62d1
        rtl

; ------------------------------------------------------------------------------

; [  ]

_c19137:
long_magic_rset:
@9137:  jsr     CopyPal
        jsr     PopMonsterPalID
        jsr     _c1b085
        stz     $62d0
        stz     $62d1
        rtl

; ------------------------------------------------------------------------------

; [ battle script command $0c: ready stance/jump ]

GfxCmd_0c:
@9147:  jsr     _c1ab58
        jsr     GfxCmd_0d
        ldy     #1
        lda     ($78),y     ; attacker
        pha
        lda     ($76),y     ; command
        pha
        cmp     #$16
        bne     @9174
        ldy     #1
        lda     ($78),y     ; attacker
        cmp     #$04
        bcc     @9168       ; branch if a character
        ldx     #$1022
        bra     @916b
@9168:  ldx     #$0f50
@916b:  stx     $1e
        clr_a
        jsr     InitAnimProp
        jsr     ExecAnim
@9174:  pla
        tax                 ; x = command
        pla
        cmp     #$04
        bcs     @918d       ; return if a monster
        asl5
        tay
        cpx     #$00ff      ; return if command = $ff
        beq     @918d
        lda     f:_c2e49a,x   ; set graphical action for waiting to attack
        sta     $61bb,y
@918d:  rts

; ------------------------------------------------------------------------------

; pointers to pre-attack animation data (black magic, white/effect magic, esper, lore, +$d07fb2)
PreMagicAnimPropPtrs:
@918e:  .word   $0f88,$0f96,$0fa4,$0fb2

; ------------------------------------------------------------------------------

; graphics script command jump table
GfxCmdTbl:
@9196:  .addr   GfxCmd_00
        .addr   GfxCmd_01
        .addr   GfxCmd_02
        .addr   GfxCmd_03
        .addr   GfxCmd_04
        .addr   GfxCmd_05
        .addr   GfxCmd_06
        .addr   GfxCmd_07
        .addr   GfxCmd_08
        .addr   GfxCmd_09
        .addr   GfxCmd_0a
        .addr   GfxCmd_0b
        .addr   GfxCmd_0c
        .addr   GfxCmd_0d
        .addr   GfxCmd_0e
        .addr   GfxCmd_0f
        .addr   GfxCmd_10
        .addr   GfxCmd_11
        .addr   GfxCmd_12
        .addr   GfxCmd_13
        .addr   GfxCmd_14
        .addr   GfxCmd_15
        .addr   GfxCmd_16
        .addr   GfxCmd_17
        .addr   GfxCmd_18
        .addr   GfxCmd_19
        .addr   GfxCmd_1a

; ------------------------------------------------------------------------------

; [ battle script command $14: misc. monster animations (ai command $fa, command $2b) ]

GfxCmd_14:
pran2yos_long:
@91cc:  jsl     DoMonsterAnim
        rts

; ------------------------------------------------------------------------------

; [ final kefka death animation (far) ]

KefkaDeathAnim_far:
@91d1:  jsr     _c10e86
        jsr     InitMonsterGfx
        jsl     KefkaDeathAnim
        rtl

; ------------------------------------------------------------------------------

; [  ]

_c191dc:
all_obj_col_down:
@91dc:  inc     $62bf
        jsr     CopyPal
        clr_a
@91e3:  jsr     _c19256
        pha
        ora     #$e0
        tax
        sta     $14
        sta     $16
        sta     $18
        ldx     #$0180
        stx     $10
        lda     #$40
        sta     $12
        jsr     DecPal
        pla
        inc
        cmp     #$20
        bne     @91e3
        stz     $62bf
        clr_ax
        stx     $10
        jmp     SetColorMathHDMA

; ------------------------------------------------------------------------------

; [  ]

_c1920c:
all_obj_col_up:
@920c:  inc     $62bf
        jsr     CopyPal
        clr_ax
@9214:  stz     $7f80,x
        inx
        cpx     #$0080
        bne     @9214
        jsr     WaitFrame
        lda     #$0f
        sta     $61ac
        lda     #$1f
@9227:  jsr     _c19256
        pha
        ora     #$e0
        tax
        sta     $14
        sta     $16
        sta     $18
        ldx     #$0180
        stx     $10
        lda     #$40
        sta     $12
        jsr     DecPal
        pla
        dec
        bne     @9227
        lda     #$30
        jsr     _c1925e
        jsr     _c19256
        stz     $62bf
        clr_ax
        stx     $10
        jmp     SetColorMathHDMA

; ------------------------------------------------------------------------------

; [  ]

_c19256:
wait_last:
@9256:  pha
        lda     #4
        jsr     WaitA       ; wait 4 frames
        pla
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1925e:
set_obj_all_pri:
@925e:  sta     $61bd
        sta     $61dd
        sta     $61fd
        sta     $621d
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1926b:
last_hdma_set:
@926b:  ldx     #$0202      ; add bg2
        stx     $10
        lda     #$10        ; affect bg1
        jmp     SetColorMathHDMA

; ------------------------------------------------------------------------------

; [  ]

_c19275:
last_scene_chg:
@9275:  stz     $7b80
        inc     $ecb8       ; increment battle bg index
        lda     #$62
        sta     $8972
        stz     $201d
        stz     $201e
        lda     $ecb8
        pha
        jsr     _c11bd1
        jsr     WaitFrame
        clr_ax
        stx     $64b2
        inc     $97
@9297:  lda     #$08
        jsr     WaitA       ; wait 8 frames
        lda     $ecb8
        cmp     #$36
        bne     @92c4
        ldx     $64b2
        cpx     #$ffe0
        bne     @92c4
        inc     $e9ed       ; disable sound effects
        lda     #$10
        sta     $1300
        lda     #$52        ; song $52 (dancing mad 5)
        sta     $1301
        lda     #$ff
        sta     $1302
        jsl     ExecSound_ext
        stz     $e9ed       ; enable sound effects
@92c4:  ldx     $64b2
        dex
        stx     $64b2
        cpx     #$ff68
        bne     @9297
        stz     $64b0
        pla
        sta     $e9df
        pha
        jsr     _c11bdf
        jsr     WaitFrame
        jsr     WaitLine160
        clr_ax
        stx     $64b2
        jsr     WaitFrame
        pla
        jsr     _c11bdc
        jsr     WaitLine160
        lda     #$61
        sta     $8972
        jsr     _c10076
        jsr     _c1926b
        clr_a
        jsr     _c1925e
        jsr     _c1920c
        lda     #$17
        sta     $8991
        sta     $898d
        stz     $ec0f       ; enable pause
        stz     $629a
        stz     $6285
        stz     $e9ef       ; start battle time
        lda     $ecb8
        cmp     #$36
        bne     @9328
        lda     $2f44
        eor     #$ff
        sta     $e9e6
        stz     $6282
@9328:  rts

; ------------------------------------------------------------------------------

; [ battle script command $12: scroll battle bg (final battle) ]

GfxCmd_12:
@9329:  ldy     #1
        lda     ($76),y
        bpl     @9337
        and     #$7f
        sta     ($76),y
        jsr     _c19275
@9337:  ldy     #2
        lda     $201e
        sta     ($76),y
        iny
        lda     ($76),y
        pha
        clr_a
        sta     ($76),y
        jsl     DoMonsterEntryExit
        clr_ax
@934c:  stz     $62c2,x
        stz     $618b,x
        inx
        cpx     #$0006
        bne     @934c
        stz     $201e
        stz     $61ab
        stz     $2f2f
        lda     #$ff
        sta     $6191
        jsr     _c10e86
        jsr     InitMonsterGfx
        jsr     LoadMonsterPal
        jsr     _c13e72
        jsr     InitMonsterPos
        jsr     WaitTfrMonsterGfx
        clr_a
        ldy     #2
        sta     ($76),y
        iny
        pla
        sta     ($76),y
        sta     $2f2f
        sta     $61ab
        pha
        ldy     #1
        lda     $2f48
        and     #$0f
        sta     ($76),y
        jsl     DoMonsterEntryExit
        pla
        sta     $201e
        rts

; ------------------------------------------------------------------------------

; [ battle script command $13: monster entry/exit ]

; b1: entry/exit type
; b2:
; b3:

GfxCmd_13:
@939c:  ldy     #3
        lda     ($76),y
        beq     @93d0       ; branch if only current monster is affected
        sta     $10
        clr_ax
@93a7:  lsr     $10
        bcc     @93b1       ; branch if monster is not affected
        stz     $62c2,x     ;
        stz     $618b,x     ;
@93b1:  inx                 ; next monster
        cpx     #6
        bne     @93a7
        ldy     #1
        lda     ($76),y
        cmp     #$0e
        beq     @93cb       ; branch if entry/exit type $0e (chadarnook)
        lda     $64ba
        bne     @93cb
        jsr     InitMonsterGfx
        jsr     WaitTfrMonsterGfx
@93cb:  jsl     DoMonsterEntryExit
        rts
@93d0:  ldy     #2
        lda     $201e
        and     $61ab
        and     ($76),y     ; affected monsters
        beq     @93e1
        jsl     DoMonsterEntryExit
@93e1:  rts

; ------------------------------------------------------------------------------

; [ battle script command: no effect ]

GfxCmd_05:
GfxCmd_08:
@93e2:  rts

; ------------------------------------------------------------------------------

; [ execute monster death animations ]

; called once per frame, also updates monster facing directions

MonsterDeathAnim:
@93e3:  lda     $2f44                   ; invisible monsters
        eor     #$ff
        sta     $e9e6
        lda     $6282
        beq     @93f3
        stz     $e9e6
@93f3:  lda     $2f2f                   ; invert to get monsters that are dead
        eor     #$ff
        and     $201e                   ; monsters that are visible
        and     $61ab                   ; monsters that are shown
        jeq     @9492                   ; jump if no monsters died

; monster death animation
        pha                             ; A = monsters that are dying
        stz     $7b67
        jsr     WaitFrame
        jsr     ClearBG1Tiles
        jsr     ClearBG3TileBuf
        jsr     TfrBG3Tiles
        jsr     PushMonsterPalID
        clr_ax
@9418:  lda     f:MonsterDeathPal,x
        sta     $7f60,x
        inx
        cpx     #$0020
        bne     @9418
        lda     $628a
        beq     @9438                   ; branch if not in flashback mode
        ldx     #$0160
        stx     $18
        ldx     #$0180
        stx     $1a
        jsl     _c2b442
@9438:  ldx     #$0202                  ; add bg2
        stx     $10
        lda     #$10                    ; affect sprites
        jsr     SetColorMathHDMA
        pla
        sta     $10                     ; monsters that are dying
        sta     $12
        clr_ax
@9449:  lsr     $12
        bcc     @9461                   ; branch if this monster is not dying
        lda     $80db,x                 ; set palette to 3
        and     #$c1
        ora     #$06
        sta     $80db,x
        lda     #$01
        sta     $80dc,x
        lda     $80c3,x                 ; $14 = x position
        sta     $14
@9461:  inx2                            ; next monster
        cpx     #12
        bne     @9449
        lda     $14
        sta     $10
        lda     #$2d                    ; sound effect $2d (monster death)
        jsr     PlayAnimSfx
        lda     #$20                    ; animation takes 32 frames

; start of frame loop
@9473:  pha
        jsr     WaitFrame
        jsr     UpdateMonsterDeathPal
        pla
        dec                             ; next frame
        bne     @9473
        lda     $2f2f                   ; monsters that are not dead
        sta     $201e                   ; monsters shown
        clr_ax
        stx     $10
        jsr     SetColorMathHDMA
        jsr     PopMonsterPalID
        jsl     UpdateMonsterNames

; update monster facing directions
@9492:  lda     $201e                   ; monsters shown
        cmp     $2f2f                   ; monsters that are not dead
        beq     @94a3
        lda     $201e
        ora     $2f2f                   ; monsters that are not dead
        sta     $201e
@94a3:  clr_ax
        lda     $2f54                   ; h-flip for controlled targets
        sta     $10
@94aa:  lda     #$21
        sta     $80dc,x                 ; tile index = $21
        lda     $10
        and     #$01
        sta     $617e,x                 ; monster h-flip
        lsr     $10
        inx2
        cpx     #12
        bne     @94aa
        rts

; ------------------------------------------------------------------------------

; [ update monster death palette ]

UpdateMonsterDeathPal:
@94c0:  clr_ay
        longa
        ldx     #16                     ; 16 colors
        lda     #$00e1                  ; subtract 1 (red, green, and blue)
        sta     $14
        sta     $16
        sta     $18
        jsr     InitColorMod
@94d3:  lda     $7f60,y
        jsr     DecColor
        sta     $7f60,y
        iny2                            ; next color
        dex
        bne     @94d3
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ copy color palettes ]

; creates a copy of the color palettes that can be used during animations

CopyPal:
@94e5:  clr_ax
@94e7:  lda     $7e00,x
        sta     $7c00,x
        inx
        cpx     #$0200
        bne     @94e7
        rts

; ------------------------------------------------------------------------------

; [ save monster sprite data ]

PushMonsterPalID:
@94f4:  clr_ax
@94f6:  lda     $80db,x
        sta     $810b,x
        inx
        cpx     #12
        bne     @94f6
        rts

; ------------------------------------------------------------------------------

; [ restore monster sprite data ]

PopMonsterPalID:
@9503:  clr_ax
@9505:  lda     $810b,x
        sta     $80db,x
        inx
        cpx     #12
        bne     @9505
        rts

; ------------------------------------------------------------------------------

; [ battle graphics command $04: execute battle script ]

BtlGfx_04:
@9512:  jsr     CopyPal
        ldx     #$2d6e      ; init pointer to battle script commands
        stx     $76
        ldx     #$2c6e      ; init pointer to battle script data
        stx     $78
        stz     $60ae       ; clear swdtech hit index
        stz     $62a4       ;
        lda     #$17
        sta     $898d       ; set main screen designation ($212c)
        stz     $7b3d       ;
        stz     $62d0       ;
        stz     $62d1       ;
@9533:  clr_ax
        stx     $62a5       ;
        stx     $62a7       ;
        lda     ($76)       ; battle script command
        cmp     #$ff
        beq     @9553       ; branch if end of script
        jsr     ExecGfxCmd
        longa
        lda     $76         ; increment battle script command pointer
        clc
        adc     #4
        sta     $76
        shorta0
        bra     @9533       ; next command
@9553:  lda     $628c       ; branch if seamless scripts are enabled
        bne     @9568
        jsl     BtlGfx_01   ; wait 4 frames
        jsl     BtlGfx_01
        jsl     BtlGfx_01
        jsl     BtlGfx_01
@9568:  rtl

; ------------------------------------------------------------------------------

; [ execute graphics script command ]

ExecGfxCmd:
@9569:  asl
        tax
        jmp     (.loword(GfxCmdTbl),x)

; ------------------------------------------------------------------------------

; [ increment graphics command data pointer ]

NextGfxCmdData:
@956e:  longa
        lda     $78
        clc
        adc     #16
        sta     $78
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ update character/monster order priority ]

UpdateDrawOrder:
sort_y_poi:
@957c:  lda     $7b0c       ; return if character/monster order priority data is valid
        beq     @9582
        rts
@9582:  clr_ax
@9584:  lda     #$ff
        sta     $80e8,x     ;
        inx2
        cpx     #12
        bne     @9584
        longa
        clr_axy
        stz     $10
@9597:  lda     $8043,x     ; character y position (bottom)
        sta     $7a1f,y
        lda     $10
        sta     $7a21,y     ; character number
        inc     $10
        inx2
        iny4
        cpy     #$0010
        bne     @9597
        clr_ax
@95b1:  lda     $804b,x     ; monster y position (bottom)
        sta     $7a1f,y
        lda     $10
        sta     $7a21,y     ; monster number
        inc     $10
        inx2
        iny4
        cpy     #$0028
        bne     @95b1
@95c9:  clr_ax
        stz     $10
@95cd:  lda     $7a1f,x     ; compare y position to next character/monster
        cmp     $7a23,x
        beq     @95f5
        bcs     @95f5
        inc     $10
        lda     $7a23,x     ; shift all values (put characters/monster in order of bottom y position)
        pha
        lda     $7a1f,x
        sta     $7a23,x
        pla
        sta     $7a1f,x
        lda     $7a25,x
        pha
        lda     $7a21,x
        sta     $7a25,x
        pla
        sta     $7a21,x
@95f5:  inx4
        cpx     #$0024
        bne     @95cd
        lda     $10
        bne     @95c9
        shorta0
        inc     $7b0c       ; invalidate character/monster order priority data
        rts

; ------------------------------------------------------------------------------

; [ battle script command $03: display damage numerals (multiple) ]

GfxCmd_03:
@9609:  jsr     _c1a5fa
@960c:  jsr     WaitFrame
        clr_ax
@9611:  ora     $7b3f,x
        inx
        cpx     #10
        bne     @9611
        ora     $631a
        ora     $631b
        ora     $631c
        ora     $631d
        bne     @960c
        rts

; ------------------------------------------------------------------------------

; [  ]

InitMsgWindowHDMA:
up_window_color_hdma_set:
@9629:  clr_ax
        lda     #$e0
        sta     $10
        stz     $1a
@9631:  lda     #$02
        sta     $89b4,x
        lda     #$81
        sta     $89b5,x
        lda     $10
        sta     $89b6,x
        inc     $1a
        lda     $1a
        cmp     #$02
        bne     @9652
        stz     $1a
        lda     $10
        cmp     #$ff
        beq     @9652
        inc     $10
@9652:  inx4
        cpx     #$0080
        bne     @9631
        jsr     _c19673
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1965f:
@965f:  clr_ax
        lda     #$e0
@9663:  sta     $8996,x
        inx4
        cpx     #$00a0
        bne     @9663
        jsr     ResetSpritePriority
        rts

; ------------------------------------------------------------------------------

; [  ]

_c19673:
@9673:  lda     #$20
        sta     $61bd
        sta     $61dd
        sta     $61fd
        sta     $621d
        clr_ax
        lda     #$21
@9685:  sta     $80dc,x
        inx2
        cpx     #$000c
        bne     @9685
        rts

; ------------------------------------------------------------------------------

; [ battle script command $07: increment battle script data pointer ]

GfxCmd_07:
@9690:  jsr     NextGfxCmdData
        rts

; ------------------------------------------------------------------------------

; [ battle script command: no effect ]

GfxCmd_00:
GfxCmd_04:
@9694:  rts

; ------------------------------------------------------------------------------

; [  ]

_c19695:
anim_window_put_big_init:
@9695:  lda     #$81
        sta     $e9c3
        ldx     #$5800
        stx     $e9bf
        stz     $e9c1
        stz     $e9c2
        stz     $62ac
        rts

; ------------------------------------------------------------------------------

; [ battle event command $11: open dialog window ]

BattleEventCmd_11:
good_anim_window_put_big_open:
@96aa:  jmp     _c14312

; ------------------------------------------------------------------------------

; [ battle event command $10: close dialog window ]

BattleEventCmd_10:
good_anim_window_put_big_close:
@96ad:  jsr     _c143b9
        lda     #$3c
        sta     $7bc3
        lda     #$02
        sta     $7bc2
        jsr     WaitFrame
        stz     $64d5
        rts

; ------------------------------------------------------------------------------

; [ battle event command $01: display long battle dialog ]

BattleEventCmd_01:
good_anim_window_put_big:
@96c1:  jsr     _c142e4
        jsr     _c1500c
        jsr     _c19695
        jsr     GetBattleDlgPtr
        jsr     DrawDlgText
        jsr     _c142e4
        jsr     _c1500c
        shorti
        clr_ax
        longa
        lda     #$0100      ; nonzero dp
        pha
        pld
@96e1:  lda     $02,x
        sta     $4d83,x
        lda     $06,x
        sta     $4d87,x
        lda     $0a,x
        sta     $4d8b,x
        lda     $0e,x
        sta     $4d8f,x
        txa
        clc
        adc     #$0010
        tax
        cpx     #$c0
        bne     @96e1
        lda     #$0000
        pha
        pld
        shorta
        longi
        jsr     WaitFrame
        rts

; ------------------------------------------------------------------------------

; [ battle event command $00: display short battle dialog ]

BattleEventCmd_00:
good_anim_window_put_b:
@970c:  jsr     InitWideMsgWindow
        jsr     GetBattleDlgPtr
        stz     $62ac
        jsr     _c1987a
        rts

; ------------------------------------------------------------------------------

; [ battle script command $0a:  ]

GfxCmd_0a:
@9719:  jsr     _c14312
        jsr     _c19695
        jsr     GetAttackMsgPtr
        jsr     DrawDlgText
        jmp     _c143cc

; ------------------------------------------------------------------------------

; [ battle script command $11: monster special attack ]

GfxCmd_11:
@9728:  lda     #$0c                    ; narrow message window
        jsr     InitMsgWindow
        jsr     _c19961
        lda     #$7e
        sta     $88d9
        ldx     #$57d5
        stx     $88d7
        lda     #^MonsterSpecialName
        sta     $12
        ldy     #1
        longa
        lda     ($76),y
        asl                             ; multiply by 10
        sta     $10
        asl2
        clc
        adc     $10
        clc
        adc     #.loword(MonsterSpecialName)
        sta     $10
        shorta0
        tay
@9758:  lda     [$10],y
        cmp     #$ff
        beq     @9767
        sta     $57d5,y
        iny
        cpy     #MONSTER_SPECIAL_NAME_SIZE
        bne     @9758
@9767:  clr_a
        sta     $57d5,y
        lda     #$01
        sta     $62ac
        lda     $898d
        pha
        lda     #$12
        sta     $898d
        jsr     DrawDlgText
        jsr     _c19887
        jsr     TfrBG1Tiles
        pla
        sta     $898d
        lda     #$20
        jsr     WaitA       ; wait 32 frames
        lda     #$12
        sta     $898d
        jsr     _c19917
        jsr     WaitFrame
        lda     #$17
        sta     $898d
        clr_ax
        stx     $4af5
        rts

; ------------------------------------------------------------------------------

_c197a1:
@97a1:  .byte   $0f,$0e,$80,$00,$81,$0c

; ------------------------------------------------------------------------------

; [ battle script command $01: show attack name ]

; b1:
; b2: attack number
; b3:

GfxCmd_01:
@97a7:  ldy     #1
        lda     ($76),y     ;
        tax
        lda     f:_c197a1,x
        pha
        tax
        iny
        lda     ($76),y     ; attack number
        pha
        phx
        lda     #$12
        sta     $898d       ; enable sprites and bg2 only on main screen
        lda     #$0c                    ; narrow message window
        jsr     InitMsgWindow
        jsr     _c19961
        lda     #$7e
        sta     $88d9
        ldx     #$57d5
        stx     $88d7
        plx
        txa
        sta     $57d5
        pla
        sta     $57d6
        stz     $57d7
        pla
        bpl     @97e3
        jsl     _c2bb11
@97e3:  lda     #$01
        sta     $62ac
        jsr     DrawDlgText
        jsr     _c19887
        jsr     TfrBG1Tiles
        lda     #$17
        sta     $898d
        jsr     _c198a7
        lda     #$12
        sta     $898d
        jsr     _c19917
        jsr     WaitFrame
        lda     #$17
        sta     $898d
        clr_ax
        stx     $4af5
        rts

; ------------------------------------------------------------------------------

; [ init message (top of screen) ]

InitWideMsgWindow:
@980f:  lda     #$0b                    ; wide message window
        jsr     InitMsgWindow
        jsr     TfrBG1Tiles
        jmp     _c19980

; ------------------------------------------------------------------------------

; [ get pointer to battle dialogue ]

GetBattleDlgPtr:
@981a:  lda     #^BattleDlg
        sta     $88d9
        ldy     #1
        lda     [$8f],y
        longa
        asl
        tax
        lda     f:BattleDlgPtrs,x
        sta     $88d7
        inc     $8f
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle script command $10: show monster dialogue ]

GfxCmd_10:
@9835:  jsr     InitWideMsgWindow
        lda     #^MonsterDlg
        sta     $88d9
        ldy     #1
        longa
        lda     ($76),y
        asl
        tax
        lda     f:MonsterDlgPtrs,x
        sta     $88d7
        shorta0
        stz     $62ac
        bra     _c1987a

; ------------------------------------------------------------------------------

; [ battle script command $02: show attack message ]

GfxCmd_02:
@9855:  lda     $898d
        pha
        lda     #$12
        sta     $898d
        jsr     InitWideMsgWindow
        jsr     GetAttackMsgPtr
        lda     #$01
        sta     $62ac
        pla
        sta     $898d
        jsr     DrawDlgText
        bra     _c19881

; ------------------------------------------------------------------------------

; wait duration for each battle message speed
MsgSpeedTbl:
@9872:  .byte   $20,$30,$40,$50,$60,$70,$80,$90

; ------------------------------------------------------------------------------

; [  ]

_c1987a:
anim_window_put_b_main:
@987a:  jsr     DrawDlgText
        jsr     _c19881
        rts

; ------------------------------------------------------------------------------

; [  ]

_c19881:
anim_window_put_b_main2:
@9881:  jsr     _c198a7
        jmp     _c19917

; ------------------------------------------------------------------------------

; [  ]

_c19887:
chg_center:
@9887:  lda     $7a
        longa
        sta     $10
        lda     #$0068
        sec
        sbc     $10
        lsr
        clc
        adc     #$0002
        sta     $10
        lda     $4af5
        sec
        sbc     $10
        sta     $4af5
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

_c198a7:
mess_wait:
@98a7:  lda     $e9f5
        bne     @98c3
        lda     f:$001d4d
        lsr4
        and     #$07
        tax
        lda     f:MsgSpeedTbl,x
@98bb:  pha
        jsr     WaitFrame
        pla
        dec
        bne     @98bb
@98c3:  rts

; ------------------------------------------------------------------------------

; [ init window for messages (top of screen) ]

InitMsgWindow:
@98c4:  pha
        inc     $629e
        stz     $7b67
        lda     #$01
        sta     $e9c3
        ldy     #$5000
        sty     $e9bf
        jsr     WaitFrame
        jsr     ClearBG1Tiles
        jsr     WaitFrame
        jsr     TfrMsgWindowGfx
        lda     $897d
        sta     $607d
        jsr     InitMsgWindowHDMA
        jsr     WaitFrame
        jsr     ClearDlgGfxBuf
        ldy     #$5000
        sty     $e9bf
        jsr     TfrDlgTextGfx
        pla
        jmp     DrawMsgWindow

; ------------------------------------------------------------------------------

; [ get pointer to attack message ]

GetAttackMsgPtr:
@98fe:  lda     #^AttackMsg
        sta     $88d9
        ldy     #1
        lda     ($76),y
        longa
        asl
        tax
        lda     f:AttackMsgPtrs,x
        sta     $88d7
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

_c19917:
anim_window_rset:
@9917:  lda     $629e
        beq     @994a
        lda     $898d
        pha
        lda     #$12
        sta     $898d
        jsr     _c1994c
        jsr     _c1999c
        jsr     ClearDlgGfxBuf
        ldy     #$5000
        sty     $e9bf       ; vram destination address (bg3 graphics)
        jsr     TfrDlgTextGfx
        jsr     ClearBG1Tiles
        jsr     WaitFrame
        jsr     _c1965f
        lda     $607d
        sta     $897d
        pla
        sta     $898d
@994a:  rts

; unused
@994b:  .byte   $ff

; ------------------------------------------------------------------------------

; [  ]

_c1994c:
clr_mess_scr_buf:
@994c:  longa
        clr_ax
        lda     #$01ff
@9953:  sta     $e73f,x
        inx2
        cpx     #$0080
        bne     @9953
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

_c19961:
up_mess_scr_tfr:
@9961:  jsr     _c1994c
        longa
        clr_ax
        lda     #$3000
@996b:  sta     $e751,x
        inc
        sta     $e791,x
        inc
        inx2
        cpx     #$002c
        bne     @996b
        shorta0
        jmp     _c1999c

; ------------------------------------------------------------------------------

; [  ]

_c19980:
up_mess_scr_tfr3:
@9980:  jsr     _c1994c
        longa
        clr_ax
        lda     #$3000
@998a:  sta     $e743,x
        inc
        sta     $e783,x
        inc
        inx2
        cpx     #$0038
        bne     @998a
        shorta0
; fallthrough

; ------------------------------------------------------------------------------

; [  ]

_c1999c:
up_mess_scr_tfr2:
@999c:  ldx     #$0080
        stx     $10
        ldx     #$e73f
        lda     #$7e
        ldy     #$5440
        jsr     WaitTfrVRAM

; ------------------------------------------------------------------------------

; [  ]

_c199ac:
w_win_color_set:
@99ac:  ldx     #$0000
        stx     $7e22
        ldx     #$001f
        stx     $7e24
        ldx     $1d55
        stx     $7e26
        jmp     _c19c8a

; ------------------------------------------------------------------------------

_c199c1:
wark_counter_tbl:
@99c1:  .byte   $08,$18

; ------------------------------------------------------------------------------

; [ battle script command $0d: step back after attack animation ]

GfxCmd_0d:
magic_back:
@99c3:  clr_ax
        stx     $618b
        stx     $618d
        stx     $618f
        tay
@99cf:  lda     $61ae,x
        beq     @99e4
        lda     $7b10,x
        cmp     $61b2,x
        bne     @99e4
        lda     $61be,y
        eor     #$40
        sta     $61be,y
@99e4:  tya
        clc
        adc     #$20
        tay
        inx
        cpx     #4
        bne     @99cf
        lda     $64ba
        tax
        lda     f:_c199c1,x
        sta     $7af1
@99fa:  jsr     WaitFrame
        clr_ay
@99ff:  lda     $61ae,y
        beq     @9a4b
        tya
        asl5
        tax
        phy
        lda     $64ba
        bne     @9a20
        lda     $61b2,y
        beq     @9a1b
        ldy     #$fffd
        bra     @9a1e
@9a1b:  ldy     #$0003
@9a1e:  bra     @9a32
@9a20:  lda     #$01
        sta     $64cc,y     ; magitek animation type 1 (walking)
        lda     $61b2,y
        beq     @9a2f
        ldy     #$ffff
        bra     @9a32
@9a2f:  ldy     #$0001
@9a32:  sty     $10
        stz     $61c1,x
        lda     #$04
        sta     $61c0,x
        longa
        lda     $61d4,x
        clc
        adc     $10
        sta     $61d4,x
        shorta0
        ply
@9a4b:  iny
        cpy     #$0004
        bne     @99ff
        dec     $7af1
        bne     @99fa
        clr_axy
@9a59:  lda     $61ae,x
        beq     @9a7c
        stz     $64cc,x     ; magitek animation type 0 (standing still)
        lda     $7b10,x
        cmp     $61b2,x
        bne     @9a71
        lda     $61be,y
        eor     #$40
        sta     $61be,y
@9a71:  stz     $61ae,x
        clr_a
        sta     $61c0,y
        dec
        sta     $61b2,x
@9a7c:  clr_a
        sta     $61d1,y
        tya
        clc
        adc     #$20
        tay
        stz     $62a0,x
        inx
        cpx     #$0004
        bne     @9a59
        rts

; ------------------------------------------------------------------------------

; [  ]

ToggleCharFlip:
@9a8f:  asl5
        tax
        lda     $61be,x
        eor     #$40
        sta     $61be,x
        rts

; ------------------------------------------------------------------------------

; [ get attacker number (long access) ]

GetAttackerID_far:
@9a9e:  jsr     GetAttackerID
        rtl

; ------------------------------------------------------------------------------

; [  ]

_c19aa2:
magic_front:
@9aa2:  jsr     _c1ab43       ; init single thread animation
        jsr     GetTargetID
        jsr     GetAttackerID
        lda     $10
        bmi     @9b25       ; branch if monster

; character attacker
        and     #$03
        tay
        asl5
        tax
        lda     $613d
        ora     $613e
        beq     @9b19
        lda     $62a4
        bne     @9b19
        inc
        sta     $62a0,y
        sta     $61d1,x
        lda     $12
        bpl     @9b19
        and     #$7f
        sec
        sbc     #$04
        asl
        tax
        lda     $10
        asl
        tay
        longa
        lda     $8033,y
        and     #$01ff
        sta     $24
        lda     $800f,x
        and     #$01ff
        sta     $22
        shorta0
        lda     $10
        tay
        lda     $7b10,y
        beq     @9b09
        ldx     $24
        cpx     $22
        bcc     @9b19
        clr_a
        sta     $7b10,y
        lda     $10
        jsr     ToggleCharFlip
        bra     @9b19
@9b09:  ldx     $22
        cpx     $24
        bcc     @9b19
        lda     #$01
        sta     $7b10,y
        lda     $10
        jsr     ToggleCharFlip
@9b19:  lda     $61ae,y
        bne     @9b24
        lda     $7b10,y
        sta     $61b2,y
@9b24:  rts

; monster attacker
@9b25:  lda     $10
        and     #$7f
        sec
        sbc     #$04
        asl
        tax
        lda     $613d
        ora     $613e
        beq     @9b6a
        lda     $12
        bmi     @9b6a
        and     #$03
        asl
        tay
        longa
        lda     $8033,y
        sta     $24
        lda     $800f,x
        sta     $22
        shorta0
        lda     $80f3,x
        and     #$01
        beq     @9b5c
        ldy     $24
        cpy     $22
        bcc     @9b6a
        bra     @9b62
@9b5c:  ldy     $22
        cpy     $24
        bcc     @9b6a
@9b62:  lda     $80f3,x
        eor     #$01
        sta     $80f3,x
@9b6a:  txa
        lsr
        tax
        lda     $618b,x
        bne     @9ba0
        inc     $618b,x
        jsr     _c19bc5
        ldy     #1
        lda     ($78),y
        and     #$7f
        sec
        sbc     #$04
        asl
        tax
        lda     $80db,x
        sta     $7af0
        lda     #$06                    ; flash monster
        jsr     _c19ba1
        lda     $7af0
        jsr     _c19ba1
        lda     #$06
        jsr     _c19ba1
        lda     $7af0
        jsr     _c19ba1
@9ba0:  rts

; ------------------------------------------------------------------------------

; [ set palette for active monster flash ]

_c19ba1:
set_one_mon_pal:
@9ba1:  sta     $10
        lda     $80db,x
        and     #$f1
        ora     $10
        sta     $80db,x
        lda     #$04
        jmp     WaitA       ; wait 4 frames

; ------------------------------------------------------------------------------

; [ wait frames (long access) ]

WaitA_far:
@9bb2:  jsr     WaitA       ; wait frames
        rtl

; ------------------------------------------------------------------------------

; [ wait frames ]

; A: number of frames to wait

WaitA:
@9bb6:  cmp     #0
        beq     @9bc4
        pha
        phx
        jsr     WaitFrame
        plx
        pla
        dec
        bne     @9bb6
@9bc4:  rts

; ------------------------------------------------------------------------------

; [  ]

_c19bc5:
flash_color_set:
@9bc5:  clr_ax
@9bc7:  stz     $7f60,x
        inx
        cpx     #$0020
        bne     @9bc7
        ldx     #$ffff
        stx     $7f62
        rts

; ------------------------------------------------------------------------------

; [ load animation palette (sprite) ]

LoadSpriteAnimPal:
@9bd7:  longa
        asl4
        tax
        clr_ay
@9be0:  lda     f:AttackPal,x
        sta     $7f60,y
        sta     $7d60,y
        sta     $7f70,y
        sta     $7d70,y
        inx2
        iny2
        cpy     #$0010
        bne     @9be0
        shorta0
        lda     $628a
        beq     @9c0f       ; return if flashback mode is disabled
        ldx     #$0160
        stx     $18
        ldx     #$0180
        stx     $1a
        jsl     _c2b442
@9c0f:  rts

; ------------------------------------------------------------------------------

; [ load block palette ]

; A: block type

LoadBlockPal:
@9c10:  asl4
        tax
        clr_ay
@9c17:  lda     f:BlockPal,x
        sta     $7f70,y
        iny
        inx
        cpy     #$0010
        bne     @9c17
        rts

; ------------------------------------------------------------------------------

; [ load animation palette (bg1) ]

LoadBG1AnimPal:
@9c26:  longa
        asl4
        tax
        clr_ay
@9c2f:  lda     f:AttackPal,x
        sta     $7e60,y     ; copy to ram
        sta     $7e70,y
        sta     $7e80,y
        sta     $7e90,y
        sta     $7c60,y
        sta     $7c70,y
        sta     $7c80,y
        sta     $7c90,y
        inx2
        iny2
        cpy     #$0010
        bne     @9c2f
        shorta0
        lda     $628a       ; return if flashback mode is disabled
        beq     @9c6a
        ldx     #$0060      ;
        stx     $18
        ldx     #$0080
        stx     $1a
        jsl     _c2b442
@9c6a:  rts

; ------------------------------------------------------------------------------

; [ load animation palette (bg3) ]

LoadBG3AnimPal:
@9c6b:  longa
        asl4
        tax
        clr_ay
@9c74:  lda     f:AttackPal,x
        sta     $7e20,y
        sta     $7c20,y
        inx2
        iny2
        cpy     #8
        bne     @9c74
        shorta0
; fallthrough

; ------------------------------------------------------------------------------

; [  ]

_c19c8a:
@9c8a:  lda     $628a
        beq     @9c9d       ; return if flashback mode is disabled
        ldx     #$0020
        stx     $18
        ldx     #$0028
        stx     $1a
        jsl     _c2b442
@9c9d:  rts

; ------------------------------------------------------------------------------

; [ deactivate all animation threads ]

_c19c9e:
clr_magic_init_buf:
@9c9e:  clr_ax
@9ca0:  sta     $6a2e,x     ; deactivate thread
        sta     $6f7e,x     ; clear x position
        sta     $74ce,x     ; clear x offset
        sta     $64de,x     ; deactivate animation
        inx
        cpx     #$0550
        bne     @9ca0
        rts

; ------------------------------------------------------------------------------

; [ init battle animation properties ]

; +$1e: pointer to animation data (+$d07fb2)
;    A: attack number

InitAnimProp:
@9cb3:  sta     $626a       ; set attack number
        xba
        lda     #14
        jsr     MultAB
        longa
        lda     f:hRDMPYL
        clc
        adc     $1e         ; add to animation data pointer
        tax
        clr_ay
        shorta
@9cca:  lda     f:AttackAnimProp,x
        sta     $6273,y
        inx
        iny
        cpy     #$000e
        bne     @9cca
        lda     $627c       ; default sound effect
        sta     $e9e7
        jsr     _c19c9e       ; deactivate all animation threads
        ldx     $6273       ; sprite graphics
        cpx     #$ffff
        beq     @9d00       ; branch if unused
        jsr     LoadAnimGfxProp
        ldx     $7aee       ; copy frame height/width
        stx     $7b35
        ldx     $7aea       ; graphics index
        lda     $60ae       ; branch if not first swdtech hit (graphics are already loaded)
        bne     @9cfd
        jsr     LoadSpriteAnimGfx
@9cfd:  jsr     InitSpriteAnimFrames
@9d00:  jsr     _c19917
        ldx     $6275       ; bg1 graphics
        cpx     #$ffff
        beq     @9d48       ; branch if unused
        jsr     LoadAnimGfxProp
        ldx     $7aee       ; copy frame height/width
        stx     $7b31
        ldx     $7aea       ; graphics index
        lda     $60ae       ; branch if not first swdtech hit (graphics are already loaded)
        bne     @9d1f
        jsr     LoadBG1AnimGfx
@9d1f:  ldx     $6275       ; bg1 script number
        cpx     #$0225
        beq     @9d36       ; branch if script $0225, $003c, $0216
        cpx     #$003c
        beq     @9d36
        cpx     #$0216
        beq     @9d36
        cpx     #$003b
        bne     @9d3d       ; branch if $003b (copy attacker sprite to bg1)
@9d36:  jsr     TargetGfxToBG1
        lda     #$2e        ; tile offset = $2e
        bra     @9d42
@9d3d:  jsr     AttackerGfxToBG1
        lda     #$2c        ; tile offset = $2c
@9d42:  jsr     LoadBG1AnimFrames
        jsr     InitBG1AnimPos
@9d48:  ldx     $6277       ; bg3 graphics
        cpx     #$ffff
        beq     @9d6a       ; branch if unused
        jsr     LoadAnimGfxProp
        ldx     $7aee       ; copy frame height/width
        stx     $7b33
        ldx     $7aea
        lda     $60ae
        bne     @9d64       ; branch if not first swdtech hit (graphics are already loaded)
        jsr     LoadBG3AnimGfx
@9d64:  jsr     LoadBG3AnimFrames
        jsr     _c19e80
@9d6a:  ldx     $627e       ; special graphics
        cpx     #$ffff
        beq     @9d7b       ; branch if unused
        jsr     LoadAnimGfxProp
        ldx     $7aee       ; copy frame height/width
        stx     $7b37
@9d7b:  jsr     _c1a0ac
        lda     $6279       ; sprite palette
        jsr     LoadSpriteAnimPal
        clr_a
        lda     $627a       ; bg1 palette
        sta     $6167
        lda     $627b       ; bg3 palette
        jsr     LoadBG3AnimPal
        jsr     CheckBlock
        rts

; ------------------------------------------------------------------------------

; [ init fight animation data ]

; A: weapon animation number (item index, $5b/$5c for longer atma weapon graphics)

InitWeaponAnim:
@9d95:  sta     $626a       ; weapon animation number
        longa
        asl3
        tax
        clr_ay
        shorta0
        lda     $618a       ; branch if not a monster attack
        beq     @9db8

; monster attack animation
@9da8:  lda     f:MonsterAttackAnimProp,x   ; monster attack animation data
        sta     $626b,y
        inx
        iny
        cpy     #8
        bne     @9da8
        bra     @9dc6

; weapon animation
@9db8:  lda     f:WeaponAnimProp,x
        sta     $626b,y
        inx
        iny
        cpy     #8
        bne     @9db8

@9dc6:  lda     $10         ; attacker
        and     #$03
        tax
        lda     $7af4       ; left-hand flag
        asl
        rol
        and     #$01
        eor     $7b10,x
        and     #$01
        tax
        lda     $626b,x     ; weapon animation script
        tax
        jsr     LoadAnimGfxProp
        ldy     $7aee       ; frame height/width (for weapon graphics)
        sty     $7b2d
        ldx     $7aea       ; weapon tile formation index
        jsr     LoadWeaponGfx
        jsr     InitSpriteAnimFrames
        lda     $618a       ; branch if not monster attack
        beq     @9e06
        lda     $626e       ; hit animation script
        cmp     #$60
        bcc     @9e06       ; branch if less than $60
        longa
        clc
        adc     #$0200
        tax
        shorta0
        bra     @9e0a
@9e06:  lda     $626e       ; hit animation script
        tax
@9e0a:  jsr     LoadAnimGfxProp
        ldy     $7aee       ; frame height/width (for hit graphics)
        sty     $7b2f
        sty     $7b31
        ldx     $7aea       ; hit tile formation index
        jsr     LoadBG1AnimGfx
        jsr     AttackerGfxToBG1
        lda     #$2c
        jsr     LoadBG1AnimFrames
        jsr     InitBG1AnimPos
        lda     $626d       ; weapon palette
        jsr     LoadSpriteAnimPal
        lda     $626f       ; hit palette
        sta     $6167       ; animation bg1 palette
        jsr     _c1a04b
        jsr     CheckBlock
        rts

; ------------------------------------------------------------------------------

; [ init bg1 animation scroll position ]

InitBG1AnimPos:
@9e3a:  lda     $28         ;
        beq     @9e65
        lda     $7b31       ; bg1 animation frame width
        longa
        asl3
        sta     $7b16       ; bg1 animation x offset = $0100 - frame width
        lda     #$0100
        sec
        sbc     $7b16
        sta     $7b16
        lda     $7b32       ; bg1 animation frame height
        and     #$00ff
        asl3
        sta     $7b18       ; bg1 animation y offset = frame height
        shorta0
        jmp     @9e7f
@9e65:  lda     $7b31       ; bg1 animation frame width
        longa
        asl3
        sta     $7b16       ; bg1 animation x offset = frame width
        lda     $7b32       ; bg1 animation frame height
        and     #$00ff
        asl3
        sta     $7b18       ; bg1 animation y offset = frame height
        shorta0
@9e7f:  rts

; ------------------------------------------------------------------------------

; [  ]

_c19e80:
@9e80:  lda     $28
        beq     @9eab
        lda     $7b33
        longa
        asl3
        sta     $7b22
        lda     #$0100
        sec
        sbc     $7b22
        sta     $7b22
        lda     $7b34
        and     #$00ff
        asl3
        sta     $7b24
        shorta0
        jmp     @9ec5
@9eab:  lda     $7b33
        longa
        asl3
        sta     $7b22
        lda     $7b34
        and     #$00ff
        asl3
        sta     $7b24
        shorta0
@9ec5:  rts

; ------------------------------------------------------------------------------

; [ clear animation tile data buffer (long access) ]

ClearBGAnimFrames_far:
@9ec6:  jsr     ClearBGAnimFrames
        rtl

; ------------------------------------------------------------------------------

; [ clear animation tile data buffer ]

ClearBGAnimFrames:
@9eca:  phb
        lda     #$7f
        pha
        plb
        longa
        clr_ax
        lda     #$02ee
@9ed6:  sta     $c400,x
        sta     $cc00,x
        sta     $d400,x
        sta     $dc00,x
        inx2
        cpx     #$0800
        bne     @9ed6
        shorta0
        plb
        rts

; ------------------------------------------------------------------------------

; [ clear animation graphics buffer ]

ClearAnimGfxBuf:
@9eee:  phb
        lda     #$7f
        pha
        plb
        longa
        clr_ax
        lda     #$01ee
@9efa:  sta     $e400,x
        sta     $e900,x
        sta     $ee00,x
        sta     $f300,x
        inx2
        cpx     #$0500
        bne     @9efa
        shorta0
        plb
        rts

; ------------------------------------------------------------------------------

; [ copy target graphics to bg1 ]

TargetGfxToBG1:
@9f12:  jsr     GetAttackerID
        jsr     GetTargetID
        lda     $12
        bra     _9f21

; ------------------------------------------------------------------------------

; [ copy attacker graphics to bg1 ]

AttackerGfxToBG1:
@9f1c:  jsr     GetAttackerID
        lda     $10
_9f21:  bmi     @9f37       ; branch if a monster
        tax
        lda     $7b10,x     ; character facing direction
        beq     @9f32
@9f29:  lda     #$10
        sta     $28
        lda     #$40
        sta     $29
        rts
@9f32:  stz     $28
        stz     $29
        rts
@9f37:  and     #$7f        ; monster number
        sec
        sbc     #$04
        asl
        tax
        lda     $80f3,x     ; monster facing direction
        eor     $617e,x
        and     #$01
        beq     @9f29
        bra     @9f32

; ------------------------------------------------------------------------------

; [ load bg3 animation frame data ]

LoadBG3AnimFrames:
@9f4a:  jsr     AttackerGfxToBG1
        jsr     ClearAnimGfxBuf
        lda     #^AttackAnimFrames
        sta     $12
        lda     #$7f
        sta     $16
        lda     #$30
        sta     $2a
        ldx     #$e400
        bra     _9f73

; ------------------------------------------------------------------------------

; [ load bg1 animation frame data ]

LoadBG1AnimFrames:
@9f61:  pha
        jsr     ClearBGAnimFrames
        lda     #^AttackAnimFrames
        sta     $12
        lda     #$7f
        sta     $16
        pla
        sta     $2a
        ldx     #$c400
_9f73:  stx     $14
        lda     $7aea       ; number of frames
        and     #$3f
        sta     $7aea
@9f7d:  longa
        lda     $7aec       ; animation frame data index
        asl
        tax
        lda     f:AttackAnimFramesPtrs,x
        sta     $10
        lda     f:AttackAnimFramesPtrs+2,x
        sta     $1a
        shorta0
        tay
@9f94:  ldx     $10
        cpx     $1a
        beq     @9ffa
        lda     [$10]
        cmp     #$ff
        beq     @9feb
@9fa0:  and     #$f0
        lsr4
        clc
        adc     $28
        tax
        lda     f:_c1a013,x
        sta     $22
        stz     $23
        lda     [$10]
        and     #$0f
        longa
        asl5
        clc
        adc     $22
        tay
        inc     $10
        shorta0
        lda     [$10]
        and     #$07
        asl
        sta     $24
        lda     [$10]
        and     #$38
        asl2
        clc
        adc     $24
        sta     [$14],y
        iny
        lda     [$10]
        and     #$c0
        eor     $29
        ora     $2a
        sta     [$14],y
        ldx     $10
        inx
        stx     $10
        jmp     @9f94
@9feb:  phy
        ldy     #$0001
        lda     [$10],y
        ply
        cmp     #$ff
        beq     @9ffa
        lda     #$ff
        bra     @9fa0
@9ffa:  longa
        lda     $14
        clc
        adc     #$0200
        sta     $14
        inc     $7aec
        shorta0
        dec     $7aea
        beq     @a012
        jmp     @9f7d
@a012:  rts

; ------------------------------------------------------------------------------

_c1a013:
@a013:  .byte   $00,$02,$04,$06,$08,$0a,$0c,$0e,$10,$12,$14,$16,$18,$1a,$1c,$1e
        .byte   $1e,$1c,$1a,$18,$16,$14,$12,$10,$0e,$0c,$0a,$08,$06,$04,$02,$00

; ------------------------------------------------------------------------------

; [ clear sprite animation frame data ]

ClearSpriteAnimFrameBuf:
@a033:  longa
        clr_ax
        lda     #$ffff
@a03a:  sta     $ce3f,x     ; clear all sprite animation frames
        sta     $d8bf,x
        inx2
        cpx     #$0a80
        bne     @a03a
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ load sprite frame data (fight) ]

; maybe this loads frames for the shield ???

InitBlockAnimFrames:
_c1a04b:
attack_def_init:
@a04b:  lda     #$01
@a04d:  jsr     _c1a080
        inc
        cmp     #$07
        bne     @a04d
        rts

; ------------------------------------------------------------------------------

; fight/esper sprite frame pointers (frame $1d, $18, $19, $1a, $1b, $1c, $1e)
; graphics data id, destination address, destination address (flipped)
_c1a056:
@a056:  .word   $0042,$d7c3,$e243
        .word   $0043,$d61f,$e09f
        .word   $0044,$d673,$e0f3
        .word   $0045,$d6c7,$e147
        .word   $0046,$d71b,$e19b
        .word   $0047,$d76f,$e1ef
        .word   $0048,$d817,$e297

; ------------------------------------------------------------------------------

; [ load sprite frame data (fight/esper) ]

InitCommonAnimFrames:
_c1a080:
magic_sp_init:
@a080:  pha
        asl
        sta     $12
        asl
        clc
        adc     $12
        tax
        longa
        lda     f:_c1a056,x
        pha
        lda     f:_c1a056+2,x
        sta     $14
        lda     f:_c1a056+4,x
        sta     $1c
        plx
        shorta0
        jsr     LoadAnimGfxProp
        lda     #^AttackAnimFrames
        sta     $12
        jsr     LoadSpriteAnimFrames
        pla
        rts

; ------------------------------------------------------------------------------

; [ load sprite frame data (extra thread) ]

_c1a0ac:
ref_init:
@a0ac:  clr_a
        jsr     _c1a080
        lda     #$06
        jmp     _c1a080

; ------------------------------------------------------------------------------

; [ load sprite frame data (spell/weapon) ]

InitSpriteAnimFrames:
@a0b5:  jsr     ClearSpriteAnimFrameBuf
        lda     #^AttackAnimFrames
        sta     $12
        ldx     #$ce3f
        stx     $14
        ldx     #$d8bf
        stx     $1c
; fall through

; ------------------------------------------------------------------------------

; [ load sprite frame data ]

;  $12: frame data bank
; +$14: destination address (+$7e0000)
; +$1c: horizontally flipped destination address (+$7e0000)

LoadSpriteAnimFrames:
obj_shape_init_main:
@a0c6:  lda     $7aea       ; number of frames
        and     #$3f
        sta     $7aea
        lda     $7aee       ; $18 = frame width
        asl3
        sta     $18
        lda     $7aef       ; $19 = frame height
        asl3
        sta     $19
@a0de:  longa
        lda     $7aec       ; frame data index
        asl
        tax
        lda     f:AttackAnimFramesPtrs,x
        sta     $10
        lda     f:AttackAnimFramesPtrs+2,x
        sta     $1a
        shorta0
        tay
@a0f5:  ldx     $10
        cpx     $1a
        beq     @a164       ; branch if at end of data (beginning of next frame)
        lda     [$10]
        cmp     #$ff
        beq     @a155       ; branch if at end of data ($ff)
@a101:  and     #$f0
        sta     $22         ; $22 = x position
        sec
        sbc     $18
        sta     ($14),y     ; set x position
        lda     $22
        eor     #$ff
        inc
        sec
        sbc     #$10
        clc
        adc     $18
        sta     ($1c),y     ; set x position (horizontally flipped)
        iny
        lda     [$10]       ; y position
        and     #$0f
        asl4
        sec
        sbc     $19
        sta     ($14),y     ; set y position
        sta     ($1c),y     ; set y position (horizontally flipped)
        iny
        ldx     $10         ; increment frame data pointer
        inx
        stx     $10
        lda     [$10]       ; tile number
        and     #$07
        asl
        sta     $16
        lda     [$10]
        and     #$38
        asl2
        clc
        adc     $16
        sta     ($14),y     ; set tile number
        sta     ($1c),y     ; set tile number (horizontally flipped)
        iny
        lda     [$10]       ; vh flip
        and     #$c0
        sta     ($14),y     ; set vh flip
        eor     #$40
        sta     ($1c),y     ; set vh flip (horizontally flipped)
        iny                 ; next tile
        ldx     $10
        inx
        stx     $10
        jmp     @a0f5
@a155:  phy
        ldy     #$0001
        lda     [$10],y     ; get next byte of frame data
        ply
        cmp     #$ff
        beq     @a164       ; end of frame if it's $ff
        lda     #$ff
        bra     @a101       ; if not, it's actually a tile at (15,15)
@a164:  lda     #$ff        ; end of frame
        sta     ($14),y
        sta     ($1c),y
        longa
        lda     $14         ; increment ram frame data pointers
        clc
        adc     #$0054
        sta     $14
        lda     $1c
        clc
        adc     #$0054
        sta     $1c
        inc     $7aec       ; increment frame data index
        shorta0
        dec     $7aea       ; decrement frame counter
        beq     @a18a
        jmp     @a0de
@a18a:  rts

; ------------------------------------------------------------------------------

; [ load animation graphics data ]

LoadAnimGfxProp:
@a18b:  longa
        txa
        and     #$7fff
        asl
        sta     $7aea                   ; multiply by 6
        asl
        clc
        adc     $7aea
        tax
        clr_ay
@a19d:  lda     f:AttackGfxProp,x
        sta     $7aea,y
        inx2
        iny2
        cpy     #6
        bne     @a19d
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ load sprite animation graphics ]

LoadSpriteAnimGfx:
@a1b1:  stx     $10
        ldx     #$0080                  ; load 4 rows of 16x16 tiles
        stx     $16
        ldx     #$2400                  ; -> vram $2400-$2BFF
        stx     $1a
        jmp     LoadAnimGfx

; ------------------------------------------------------------------------------

; [ load weapon animation graphics ]

; note: block graphics are loaded to vram $2400-$25FF

LoadWeaponGfx:
@a1c0:  stx     $10
        ldx     #$0060                  ; load 3 rows of 16x16 tiles
        stx     $16
        ldx     #$2600                  ; -> vram $2600-$2BFF
        stx     $1a
        jmp     LoadAnimGfx

; ------------------------------------------------------------------------------

; [ load bg3 animation graphics ]

LoadBG3AnimGfx:
@a1cf:  stx     $10
        ldx     #$0080                  ; load 4 rows of 16x16 tiles
        stx     $16
        ldx     #$5000                  ; -> vram $5000-$53FF
        stx     $1a
        lda     $11
        jmp     LoadBG3AnimGfx2bpp

; ------------------------------------------------------------------------------

; [ load bg1 animation graphics ]

LoadBG1AnimGfx:
@a1e0:  stx     $10
        ldx     #$00a0                  ; load 5 rows of 16x16 tiles
        stx     $16
        ldx     #$0000                  ; -> vram $0000-$09FF
        stx     $1a
        jmp     LoadAnimGfx

; ------------------------------------------------------------------------------

; [ load animation graphics ]

; +$10: tilemap offset
; +$16: tile count (8x8 tiles)
; +$1a: destination address (vram)

LoadAnimGfx:
@a1ef:  lda     $10
        bmi     @a1f8       ; branch if 2bpp graphics
        lda     $11
        jmp     LoadAnimGfx3bpp
@a1f8:  lda     $11
        jmp     LoadAnimGfx2bpp

; ------------------------------------------------------------------------------

; [ load 3bpp animation graphics ]

LoadAnimGfx3bpp:
@a1fd:  sta     $11
        lda     $10
        lsr6
        and     #$01
        sta     $10
        longa
        lda     $10
        xba
        asl6
        clc
        adc     #.loword(AttackTiles3bpp)
        sta     $10
        shorta0
        lda     #^AttackTiles3bpp
        sta     $12
        lda     #$7f
        sta     $28
        ldx     #$e400
        stx     $26
        longa
        lda     $16
        pha
@a231:  stz     $24
        lda     [$10]
        and     #$3fff
        asl2
        rol     $24
        asl
        sta     $22
        asl
        rol     $24
        clc
        adc     $22
        sta     $22
        lda     $24
        adc     #0
        sta     $24
        lda     $22
        clc
        adc     #.loword(AttackGfx3bpp)
        sta     $22
        lda     $24
        adc     #^AttackGfx3bpp
        sta     $24
        lda     [$10]
        and     #$4000
        sta     $14                     ; h-flip
        lda     [$10]
        and     #$8000
        bne     @a2a4

; no v-flip
        clr_ay
@a26d:  lda     [$22]
        jsr     _c1a470
        sta     [$26],y
        lda     $22
        clc
        adc     #$0002
        sta     $22
        lda     $24
        adc     #$0000
        sta     $24
        iny2
        cpy     #$0010
        bne     @a26d
@a28a:  lda     [$22]
        jsr     _c1a470
        and     #$00ff
        sta     [$26],y
        inc     $22
        bne     @a29a
        inc     $24
@a29a:  iny2
        cpy     #$0020
        bne     @a28a
        jmp     @a2de

; v-flip
@a2a4:  ldy     #$000e
@a2a7:  lda     [$22]
        jsr     _c1a470
        sta     [$26],y
        lda     $22
        clc
        adc     #$0002
        sta     $22
        lda     $24
        adc     #$0000
        sta     $24
        dey2
        cpy     #$fffe
        bne     @a2a7
        ldy     #$001e
@a2c7:  lda     [$22]
        jsr     _c1a470
        and     #$00ff
        sta     [$26],y
        inc     $22
        bne     @a2d7
        inc     $24
@a2d7:  dey2
        cpy     #$000e
        bne     @a2c7
@a2de:  lda     $26
        clc
        adc     #$0020
        sta     $26
        inc     $10
        inc     $10
        dec     $16
        jne     @a231
        pla
        asl5
        sta     $10
        shorta0
        ldx     #$e400
        lda     #$7f
        ldy     $1a
        jmp     WaitTfrVRAM

; ------------------------------------------------------------------------------

; [ load 2bpp animation graphics ]

LoadAnimGfx2bpp:
@a306:  sta     $11
        lda     $10
        lsr6
        and     #$01
        sta     $10
        longa
        lda     $10
        xba
        asl6
        clc
        adc     #.loword(AttackTiles2bpp)
        sta     $10
        shorta0
        lda     #^AttackTiles2bpp
        sta     $12
        lda     #^AttackGfx2bpp
        sta     $24
        lda     #$7f
        sta     $28
        ldx     #$e400
        stx     $26
        longa
        lda     $16
        pha
@a33e:  lda     [$10]
        and     #$3fff
        asl4
        clc
        adc     #.loword(AttackGfx2bpp)
        sta     $22
        lda     [$10]
        and     #$4000
        sta     $14
        lda     [$10]
        and     #$8000
        bne     @a37c
        clr_ay
@a35d:  lda     [$22]
        jsr     _c1a470
        sta     [$26],y
        inc     $22
        inc     $22
        iny2
        cpy     #$0010
        bne     @a35d
        clr_a
@a370:  sta     [$26],y
        iny2
        cpy     #$0020
        bne     @a370
        jmp     @a3a0
@a37c:  ldy     #$000e
@a37f:  lda     [$22]
        jsr     _c1a470
        sta     [$26],y
        inc     $22
        inc     $22
        dey2
        cpy     #$fffe
        bne     @a37f
        ldy     #$001e
        clr_a
@a395:  sta     [$26],y
        inc     $22
        dey2
        cpy     #$000e
        bne     @a395
@a3a0:  lda     $26
        clc
        adc     #$0020
        sta     $26
        inc     $10
        inc     $10
        dec     $16
        jne     @a33e
        pla
        asl5
        sta     $10
        shorta0
        ldx     #$e400
        lda     #$7f
        ldy     $1a
        jmp     WaitTfrVRAM

; ------------------------------------------------------------------------------

; [ load 2bpp animation graphics (bg3) ]

LoadBG3AnimGfx2bpp:
@a3c8:  sta     $11
        lda     $10
        lsr6
        and     #$01
        sta     $10
        longa
        lda     $10
        xba
        asl6
        clc
        adc     #.loword(AttackTiles2bpp)
        sta     $10
        shorta0
        lda     #^AttackTiles2bpp
        sta     $12
        lda     #^AttackGfx2bpp
        sta     $24
        lda     #$7f
        sta     $28
        ldx     #$e400
        stx     $26
        longa
        lda     $16
        pha
@a400:  lda     [$10]
        and     #$3fff
        asl4
        clc
        adc     #.loword(AttackGfx2bpp)
        sta     $22
        lda     [$10]
        and     #$4000
        sta     $14
        lda     [$10]
        and     #$8000
        bne     @a434
        clr_ay
@a41f:  lda     [$22]
        jsr     _c1a470
        sta     [$26],y
        inc     $22
        inc     $22
        iny2
        cpy     #$0010
        bne     @a41f
        jmp     @a449
@a434:  ldy     #$000e
@a437:  lda     [$22]
        jsr     _c1a470
        sta     [$26],y
        inc     $22
        inc     $22
        dey2
        cpy     #$fffe
        bne     @a437
@a449:  lda     $26
        clc
        adc     #$0010
        sta     $26
        inc     $10
        inc     $10
        dec     $16
        beq     @a45c
        jmp     @a400
@a45c:  pla
        asl4
        sta     $10
        shorta0
        ldx     #$e400
        lda     #$7f
        ldy     $1a
        jmp     WaitTfrVRAM

; ------------------------------------------------------------------------------

; [  ]

_c1a470:
@a470:  pha
        lda     $14
        beq     @a485
        pla
        xba
        sta     $18
        phx
        ldx     #$0010
@a47d:  asl     $18
        ror
        dex
        bne     @a47d
        plx
        rts
@a485:  pla
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1a487:
magic_tmp_buf_clr:
@a487:  phb
        lda     #$7f
        pha
        plb
        longa
        clr_ax
@a490:  sta     $e400,x
        inx2
        cpx     #$1400
        bne     @a490
        clr_ax
@a49c:  stz     $7b3f,x
        stz     $7b49,x
        stz     $7b53,x
        stz     $7b5d,x
        inx2
        cpx     #$000a
        bne     @a49c
        shorta
        plb
        rts

; ------------------------------------------------------------------------------

; [ battle script command $0b: display damage numerals (single) ]

;  b1: numeral target
; +b2: gm?vvvvvv vvvvvvvv ($ffff = hide numerals)
;        g: green numeral
;        m: display "miss"
;        v: numeral value

GfxCmd_0b:
@a4b3:  lda     $632e       ; damage numeral counter (next available numeral thread)
        and     #$03
        sta     $632e
        tax
        stz     $631a,x     ; clear numeral data
        stz     $6322,x
        jsr     WaitFrame
        clr_axy
        iny
@a4c9:  lda     $631a,x     ; branch if numeral is not enabled
        beq     @a4dc
        lda     ($76),y     ; target
        cmp     $631e,x
        bne     @a4dc       ; branch if numeral doesn't have the same target as the new numeral
        lda     #$08
        jsr     WaitA       ; wait 8 frames while the existing numeral finishes
        bra     @a4e2
@a4dc:  inx
        cpx     #$0004
        bne     @a4c9
@a4e2:  clr_ax
@a4e4:  stz     $60b3,x     ; clear graphics buffer
        inx
        cpx     #$0080
        bne     @a4e4
        lda     $632e       ; numeral counter
        asl
        tax
        lda     f:_c1a5cb,x   ; pointer to damage numeral graphics in vram
        sta     $6317
        lda     f:_c1a5cb+1,x
        sta     $6318
        inc     $6316       ; enable damage numeral graphics update in vram
        jsr     WaitFrame
        ldy     #$0003
        lda     ($76),y     ; branch if there is a valid numeral value
        cmp     #$ff
        bne     @a510
        rts
@a510:  sta     $1e         ; $1e = hi byte of numeral value
        and     #$40
        beq     @a531       ; branch if not displaying "miss"

; miss
        longa
        clr_ax
@a51a:  lda     $7fbc00,x   ; copy "miss" graphics to buffer
        sta     $60d3,x
        inx2
        cpx     #$0040
        bne     @a51a
        shorta0
        lda     #$08        ; x offset
        sta     $14
        bra     @a589

; numeral
@a531:  dey
        longa
        lda     ($76),y     ; numeral value
        and     #$3fff
        tax
        shorta0
        stz     $68         ; clear hex->dec conversion constant
        jsr     HexToDec
        longa
        ldy     #$60b3      ; pointer to graphics buffer
        lda     #$0010
        sta     $14
        lda     $69         ; thousands digit
        and     #$00ff
        bne     @a572       ; branch if not zero (show digit)
        lda     #$000c
        sta     $14
        lda     $6a
        and     #$00ff
        bne     @a577
        lda     #$0008
        sta     $14
        lda     $6b
        and     #$00ff
        bne     @a57c
        lda     #$0004
        sta     $14
        bra     @a581
@a572:  lda     $69         ; thousands digit
        jsr     _c1a5db       ; copy damage numeral tile to buffer
@a577:  lda     $6a         ; hundreds digit
        jsr     _c1a5db       ; copy damage numeral tile to buffer
@a57c:  lda     $6b         ; tens digit
        jsr     _c1a5db       ; copy damage numeral tile to buffer
@a581:  lda     $6c         ; ones digit
        jsr     _c1a5db       ; copy damage numeral tile to buffer
        shorta0
@a589:  lda     $632e       ; numeral counter
        and     #$03
        sta     $632e
        tax
        ldy     #$0001
        lda     ($76),y     ; numeral target
        sta     $631e,x
        lda     $14
        sta     $6326,x     ; numeral graphics x offset (width / 2)
        stz     $632a,x     ;
        stz     $6322,x     ;
        lda     $1e         ; green numeral flag
        and     #$80
        ora     #$01        ; enable numeral
        sta     $631a,x
        lda     $632e       ; numeral counter
        asl
        tax
        lda     f:_c1a5d3,x   ; pointer to damage numeral graphics in vram
        sta     $6317
        lda     f:_c1a5d3+1,x
        sta     $6318
        inc     $6316       ; enable damage numeral graphics update in vram
        jsr     WaitFrame
        inc     $632e       ; increment damage numeral counter
        rts

; ------------------------------------------------------------------------------

; pointers to damage numeral graphics in vram (bottom of tiles)
_c1a5cb:
@a5cb:  .word   $2d00,$2d40,$2d80,$2dc0

; pointers to damage numeral graphics in vram (top of tiles, where the numbers are)
_c1a5d3:
@a5d3:  .word   $2c00,$2c40,$2c80,$2cc0

; ------------------------------------------------------------------------------

; [ copy damage numeral tile to buffer ]

; +A: numeral (0..9)
; +Y: pointer to graphics buffer (+$7e0000)

_c1a5db:
one_num_set2_local:
        .a16
@a5db:  and     #$00ff
        asl
        tax
        lda     f:_c1a735,x   ; pointer to numeral graphics
        tax
        lda     #$0010      ; 16 bytes per tile
        sta     $12
@a5ea:  lda     $7f0000,x   ; copy tile graphics to graphics buffer
        sta     $0000,y
        inx2
        iny2
        dec     $12
        bne     @a5ea
        rts

; ------------------------------------------------------------------------------

; [ init damage numerals (multiple) ]

_c1a5fa:
damage_set:
        .a8
@a5fa:  jsr     _c1a487
        stz     $7b3e
        lda     $7b3d
        inc     $7b3d
        xba
        lda     #20
        jsr     MultAB
        lda     f:hRDMPYL
        tay
        lda     #$0a
        sta     $10
        stz     $16
        stz     $20
@a619:  stz     $14
        lda     $2bcf,y
        sta     $1e
        cmp     #$ff
        bne     @a627
        jmp     @a6eb
@a627:  and     #$40
        beq     @a655

;
        phb
        lda     #$7f
        pha
        plb
        phy
        lda     $20
        asl
        tax
        longa
        lda     f:_c1a749,x
        tax
        clr_ay
@a63e:  lda     $bc00,y     ; "miss" graphics
        sta     a:$0020,x
        inx2
        iny2
        cpy     #$0040
        bne     @a63e
        shorta0
        ply
        plb
        jmp     @a6bd

;
@a655:  longa
        lda     $2bce,y
        and     #$3fff
        tax
        shorta0
        stz     $68
        jsr     HexToDec
        phb
        lda     #$7f
        pha
        plb
        phy
        lda     $20
        asl
        tax
        longa
        lda     f:_c1a749,x
        tax
        clr_ay
        lda     #$0010
        sta     $14
        lda     $69
        and     #$00ff
        bne     @a6a4
        lda     #$000c
        sta     $14
        lda     $6a
        and     #$00ff
        bne     @a6a9
        lda     #$0008
        sta     $14
        lda     $6b
        and     #$00ff
        bne     @a6ae
        lda     #$0004
        sta     $14
        bra     @a6b3
@a6a4:  lda     $69
        jsr     _c1a715
@a6a9:  lda     $6a
        jsr     _c1a715
@a6ae:  lda     $6b
        jsr     _c1a715
@a6b3:  lda     $6c
        jsr     _c1a715
        shorta0
        ply
        plb
@a6bd:  lda     $20
        tax
        cpx     #$0004
        bcc     @a6d3
        lda     f:BitOrTbl-4,x
        and     $201e
        and     $61ab
        beq     @a6eb
        bra     @a6e2
@a6d3:  lda     f:BitOrTbl,x
        and     $201d
        and     $61ac
        and     $61ad
        beq     @a6eb
@a6e2:  lda     $1e
        and     #$80
        ora     #$01
        sta     $7b3f,x
@a6eb:  lda     $20
        tax
        lda     $14
        sta     $7b53,x
        stz     $7b5d,x
        inc     $20         ; next character/monster
        iny2
        dec     $10
        beq     @a701
        jmp     @a619
@a701:  ldx     #$0c00
        stx     $10
        ldx     #$e400
        ldy     #$2600
        lda     #$7f
        jsr     WaitTfrVRAM
        inc     $7b3e
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1a715:
one_num_set:
        .a16
@a715:  phx
        and     #$00ff
        asl
        tax
        lda     f:_c1a735,x
        tay
        plx
        lda     #$0010
        sta     $12
@a726:  lda     a:$0000,y
        sta     a:$0000,x
        inx2
        iny2
        dec     $12
        bne     @a726
        rts

; ------------------------------------------------------------------------------

; pointers to numeral graphics (+$7f0000)
num_get_poi:
_c1a735:
@a735:  .word   $bc40,$bc60,$bc80,$bca0,$bcc0,$bce0,$bd00,$bd20
        .word   $bd40,$bd60

_c1a749:
@a749:  .word   $e400,$e480,$e500,$e580,$e800,$e880,$e900,$e980
        .word   $ec00,$ec80

ref_target_bit:
_c1a75d:
@a75d:  .word   $0001,$0002,$0004,$0008
        .word   $0100,$0200,$0400,$0800,$1000,$2000

; ------------------------------------------------------------------------------

; [ check which characters blocked the attack ]

CheckBlock:
        .a8
@a771:  phy
        stz     $10
        ldy     #$000a
        lda     $62c0       ; branch if block graphics are ignored
        beq     @a77f
        clr_a
        bra     @a793
@a77f:  lda     ($78),y     ; block type
        beq     @a789       ; branch if not blocked
        lda     $10
        ora     #$10
        sta     $10
@a789:  lsr     $10         ; set bit for characters that blocked
        iny
        cpy     #$000e
        bne     @a77f
        lda     $10
@a793:  sta     $6082
        stz     $6083
        ply
        rts

; ------------------------------------------------------------------------------

; [ battle script command $09:  ]

GfxCmd_09:
@a79b:  jsr     PushMonsterPalID
        inc     $62d1
        clr_ay
        sty     $613d
@a7a6:  lda     ($78),y
        bmi     @a7ce
        tya
        asl
        tax
        lda     f:_c1a75d,x
        ora     $613d
        sta     $613d
        lda     f:_c1a75d+1,x
        ora     $613e
        sta     $613e
        lda     ($78),y
        cmp     #$04
        bcc     @a7cc
        sec
        sbc     #$04
        bra     @a7ce
@a7cc:  ora     #$80
@a7ce:  sta     $6142,y
        iny
        cpy     #$000a
        bne     @a7a6
        jsr     _c1ab43       ; init single thread animation
        clr_ay
        sty     $1e
        ldy     #$0002
        lda     ($76),y
        jsr     InitAnimProp
        lda     $613d
        asl4
        sta     $12
        lda     $613e
        sta     $13
        ldy     #14
        lda     ($78),y
        asl4
        sta     $607e
        iny
        lda     ($78),y
        sta     $607f
        sta     $62af
        longa
        lda     $12
        lsr4
        sta     $12
        lda     $607e
        lsr4
        sta     $607e
        pha
        shorta0
        stz     $890b
        lda     #$01
        sta     $1c
        sta     $6084
        lda     $6082
        ora     $6083
        ora     $6080
        ora     $6081
        bne     @a83e
        ldy     $6273
        bmi     _a8b3
@a83e:  lda     $890b
        cmp     #$04
        bcc     @a847
        ora     #$80
@a847:  sta     $6140
        lda     $890b
        tay
        lda     ($78),y
        cmp     #$04
        bcc     @a856
        ora     #$80
@a856:  sta     $613f
        lda     $890b
        and     #$0f
        longa
        asl
        tax
        lda     f:_c2ce8b,x   ; pointer to animation thread data (+$7e64de)
        tax
        shorta0
        lda     $890b
        cmp     #$04
        bcs     @a87b
        clc
        adc     #$0a
        tay
        lda     ($78),y
        cmp     #$03
        beq     @a88d
@a87b:  lda     $12
        and     #$01
        beq     @a8a5
        ldy     $7b35
        sty     $22
        ldy     $6273
        sty     $24
        bra     @a897
@a88d:  ldy     #$0101
        sty     $22
        ldy     #$0048
        sty     $24
@a897:  ldy     $12
        phy
        lda     #$01
        sta     $607e
        jsr     CreateThread
        ply
        sty     $12
@a8a5:  ror     $13
        ror     $12
        inc     $890b
        lda     $890b
        cmp     #$0a
        bne     @a83e
_a8b3:  ldy     $6275
        bmi     @a8df
        jsr     _c1aac3
        lda     $12
        sta     $613f
        lda     #$01
        sta     $1c
        ldx     #$0500
        ldy     $7b31
        sty     $22
        ldy     $6275
        sty     $24
        jsr     CreateThread
        ldx     #$0500
        lda     $6f86,x
        ora     #$01
        sta     $6f86,x
@a8df:  ldy     $6277
        bmi     @a90b
        jsr     _c1aac3
        lda     $12
        sta     $613f
        lda     #$01
        sta     $1c
        ldx     #$0510
        ldy     $7b33
        sty     $22
        ldy     $6277
        sty     $24
        jsr     CreateThread
        ldx     #$0510
        lda     $6f86,x
        ora     #$02
        sta     $6f86,x
@a90b:  ldy     $627e
        cpy     #$ffff
        beq     @a95e
        lda     #$01
        sta     $1c
        ldy     $7b37
        sty     $22
        ldy     $627e
        sty     $24
        clr_ay
@a923:  lda     ($78),y
        bmi     @a945
        cmp     #$04
        bcc     @a92d
        ora     #$80
@a92d:  sta     $613f
        lda     $62d0
        beq     @a93c
        jsr     GetAttackerID
        lda     $10
        bra     @a94d
@a93c:  tya
        cmp     #$04
        bcc     @a943
        ora     #$80
@a943:  bra     @a94b
@a945:  iny
        cpy     #$000a
        bne     @a923
@a94b:  sta     $10
@a94d:  and     #$0f
        longa
        asl
        tax
        lda     f:_c2ce8b,x   ; pointer to animation thread data (+$7e64de)
        tax
        shorta0
        jsr     CreateExtraThread
@a95e:  clr_ax
        stx     $6080
        plx
        stx     $607e
        phx
        stz     $e9ee
        jsr     InitAnimType
        plx
        stx     $607e
        clr_ax
        stx     $6080
        jsr     _c1ae2f
        jsr     CopyPal
        jsr     ExecAnimScript
        jsr     PopMonsterPalID
        jsr     _c1b085
        stz     $62d1
        stz     $62d0
        jmp     NextGfxCmdData

; ------------------------------------------------------------------------------

; [ battle script command $15:  ]

GfxCmd_15:
@a98f:  jsr     PushMonsterPalID
        inc     $62d0
        inc     $62d1
        clr_ay
        sty     $613d
@a99d:  lda     ($78),y
        bmi     @a9c5
        tya
        asl
        tax
        lda     f:_c1a75d,x
        ora     $613d
        sta     $613d
        lda     f:_c1a75d+1,x
        ora     $613e
        sta     $613e
        lda     ($78),y
        cmp     #$04
        bcc     @a9c3
        sec
        sbc     #$04
        bra     @a9c5
@a9c3:  ora     #$80
@a9c5:  sta     $6142,y
        iny
        cpy     #$000a
        bne     @a99d
        jsr     _c1aac3
        jsr     _c1ab43       ; init single thread animation
        clr_ay
        sty     $1e
        ldy     #$0002
        lda     ($76),y
        jsr     InitAnimProp
        lda     $613d
        asl4
        sta     $12
        lda     $613e
        sta     $13
        longa
        lda     $12
        lsr4
        sta     $12
        pha
        shorta0
        jsr     _c1aac3
        stz     $890b
        lda     #$01
        sta     $1c
        sta     $6084
        lda     $6082
        ora     $6083
        ora     $6080
        ora     $6081
        bne     @aa1c
        ldy     $6273
        bmi     @aa8d
@aa1c:  lda     $890b
        tay
        lda     ($78),y
        cmp     #$04
        bcc     @aa28
        ora     #$80
@aa28:  sta     $613f
        lda     $890b
        and     #$0f
        longa
        asl
        tax
        lda     f:_c2ce8b,x   ; pointer to animation thread data (+$7e64de)
        tax
        shorta0
        lda     $890b
        tay
        lda     $62c0       ; branch if block graphics are ignored
        bne     @aa55
        lda     ($78),y
        cmp     #$04
        bcs     @aa55
        clc
        adc     #$0a
        tay
        lda     ($78),y
        cmp     #$03
        beq     @aa67
@aa55:  lda     $12
        and     #$01
        beq     @aa7f
        ldy     $7b35
        sty     $22
        ldy     $6273
        sty     $24
        bra     @aa71
@aa67:  ldy     #$0101
        sty     $22
        ldy     #$0048
        sty     $24
@aa71:  ldy     $12
        phy
        lda     #$01
        sta     $607e
        jsr     CreateThread
        ply
        sty     $12
@aa7f:  ror     $13
        ror     $12
        inc     $890b
        lda     $890b
        cmp     #$0a
        bne     @aa1c
@aa8d:  jsr     GetAttackerID
        lda     $10
        bmi     @aa9e
        asl5
        tay
        clr_a
        sta     $61bb,y
@aa9e:  jmp     _a8b3

; ------------------------------------------------------------------------------

; [  ]

_c1aaa1:
get_target2_long:
@aaa1:  jsr     _c1aaa5
        rtl

; ------------------------------------------------------------------------------

; [ ??? ]

; $12: character/monster number (out) ???

_c1aaa5:
get_target2:
@aaa5:  lda     $62d1       ;
        bne     _c1aac3
        jmp     GetTargetID

; ------------------------------------------------------------------------------

; [ ??? ]

_c1aaad:
get_super_num:
@aaad:  ldy     #14
        lda     ($78),y     ; ??? characters
        jne     _c11a0f       ; get bit number
        iny
        lda     ($78),y     ; ??? monsters
        jsr     _c11a0f       ; get bit number
        clc
        adc     #$04
        ora     #$80
        rts

; ------------------------------------------------------------------------------

; [ ??? ]

_c1aac3:
get_target_ref:
@aac3:  lda     $62d0
        beq     @aacf
        jsr     _c1aaad       ; get ??? character/monster number
        sta     $6140       ; set attacker number
        rts
@aacf:  clr_ay
@aad1:  lda     ($78),y     ; branch if attacker is a character
        bpl     @aadd
        iny
        cpy     #$000a
        bne     @aad1
        clr_ay
@aadd:  cmp     #$04
        bcc     @aae3
        ora     #$80
@aae3:  sta     $12
        tya
        sta     $6140
        rts

; ------------------------------------------------------------------------------

; [ create bg1 & bg3 animation threads ]

CreateBGThreads:
@aaea:  ldy     $6275       ; branch if bg1 script is disabled
        bmi     @ab16
        jsr     _c1aaa5
        lda     $12
        sta     $613f
        lda     #$01        ; set initial frame delay to 1
        sta     $1c
        ldx     #$0500      ; bg1 thread pointer
        ldy     $7b31       ; bg1 frame width/height
        sty     $22
        ldy     $6275       ; bg1 animation script
        sty     $24
        jsr     CreateThread
        ldx     #$0500
        lda     $6f86,x     ; bg1 thread priority
        ora     #$01
        sta     $6f86,x
@ab16:  ldy     $6277       ; branch if bg3 script is disabled
        bmi     @ab42
        jsr     _c1aaa5
        lda     $12
        sta     $613f
        lda     #$01        ; set initial frame delay to 1
        sta     $1c
        ldx     #$0510      ; bg3 thread pointer
        ldy     $7b33       ; bg3 frame width/height
        sty     $22
        ldy     $6277       ; bg3 animation script
        sty     $24
        jsr     CreateThread
        ldx     #$0510
        lda     $6f86,x     ; bg3 thread priority
        ora     #$02
        sta     $6f86,x
@ab42:  rts

; ------------------------------------------------------------------------------

; [ init single thread animation ]

_c1ab43:
shap_start_init:
@ab43:  lda     #$01
        sta     $7b0e       ; 1 monster thread
        sta     $7b0f       ; 1 character thread
        stz     $60aa       ; disable shared graphics (air anchor)
        stz     $60ac       ; unpause bg1 animation threads
        stz     $60ad       ; unpause bg3 animation threads
        stz     a:$0099       ; unpause sprite animation threads
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1ab58:
init_all_anim:
@ab58:  stz     $62b0       ; esper thread shown above characters & monsters
        jsr     PushMonsterPalID
        jsr     SetAnimTargets
        jsr     _c19aa2
        jmp     _c1ab43       ; init single thread animation

; ------------------------------------------------------------------------------

; [ set animation targets ]

SetAnimTargets:
@ab67:  ldy     #2
        lda     ($78),y     ; animation targets
        sta     $613d
        iny
        lda     ($78),y
        sta     $613e
        rts

; ------------------------------------------------------------------------------

; [ battle script command $0e, $16-$1a: reset graphical action ]

; b1: character number

GfxCmd_0e:
GfxCmd_16:
GfxCmd_17:
GfxCmd_18:
GfxCmd_19:
GfxCmd_1a:
@ab76:  ldy     #$0001
        lda     ($76),y     ; character/monster number
        cmp     #$04
        bcs     @ab8a       ; return if not a character
        and     #$03
        asl5
        tax
        stz     $61bb,x     ; clear graphical action
@ab8a:  rts

; ------------------------------------------------------------------------------

; [ reset attacker graphical action ]

_c1ab8b:
clr_player_pat:
@ab8b:  ldy     #1
        lda     ($78),y     ; character/monster number
        cmp     #$04
        bcs     @ab9e       ; branch if not a character
        asl5
        tay
        clr_a
        sta     $61bb,y     ; set graphical action
@ab9e:  rts

; ------------------------------------------------------------------------------

; [ do pre-attack animation ]

; for magic and summon only

PreMagicAnim:
@ab9f:  ldy     #$0002
        clr_ax
        lda     ($76),y     ; attack number
        cmp     #$18
        bcc     @abbb       ; branch if black magic (x = 0)
        inx2
        cmp     #$36
        bcc     @abbb       ; branch if white or effect magic (x = 2)
        inx2
        cmp     #$51
        bcc     @abbb       ; branch if esper (x = 4)
        stz     $62c0       ; don't ignore block graphics
        bra     @abe7
@abbb:  inc     $62c0       ; ignore block graphics
        longa
        lda     f:PreMagicAnimPropPtrs,x
        sta     $1e
        shorta0
        jsr     InitAnimProp
        jsr     ExecAnim
        jsr     GetAttackerID
        lda     $10
        bmi     @abe1       ; branch if monster
        and     #$03
        tax
        lda     $62a4       ;
        bne     @abe1
        inc     $61ae,x
@abe1:  stz     $62c0       ; don't ignore block graphics
        jsr     _c1ab43       ; init single thread animation
@abe7:  jsr     _c1ab8b       ; reset attacker graphical action
        rts

; ------------------------------------------------------------------------------

; [ attack command $02/$17/$19: magic/x-magic/summon ]

MagicCmdAnim:
CmdAnim_02:
CmdAnim_17:
CmdAnim_19:
anim_magic:
@abeb:  ldy     #$0002
        lda     ($76),y     ; branch if not $f9 ("red card", setzer's desperation attack)
        cmp     #$f9
        bne     @ac06
        clr_a
        sta     ($76),y
        iny
        lda     #$4e        ; do item animation $4e (darts), 3 times
        sta     ($76),y
        jsr     FightCmdAnim
        jsr     FightCmdAnim
        jsr     FightCmdAnim
        rts
@ac06:  jsr     _c1ab58
        jsr     _c1ab8b       ; reset attacker graphical action
        ldy     #1
        lda     ($78),y     ; attacker number
        cmp     #$04
        bcs     @ac1e       ; branch if a monster
        lda     ($78)       ; branch if skipping pre-attack animation
        and     #$10
        bne     @ac1e
        jsr     PreMagicAnim
@ac1e:  jsr     CheckNullTarget
        bcc     @ac31
        clr_ay
        sty     $1e
        iny2
        lda     ($76),y
        jsr     InitAnimProp
        jsr     ExecAnim
@ac31:  jsr     _c1ac35
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1ac35:
screen_all_clr_tfr:
@ac35:  jsr     ClearBGAnimFrames
        ldx     #$0800
        stx     $10
        ldx     #$c400
        lda     #$7f
        ldy     #$0c00
        jsr     WaitTfrVRAM
        jsr     ClearAnimGfxBuf
        ldx     #$0800
        stx     $10
        ldx     #$e400
        lda     #$7f
        ldy     #$5400
        jmp     WaitTfrVRAM

; ------------------------------------------------------------------------------

; [ execute battle animation ]

ExecAnim:
@ac5b:  jsr     InitAnim
        jsr     ExecAnimScript
        jsr     PopMonsterPalID
        jmp     _c1b085

; ------------------------------------------------------------------------------

; [ init battle animation threads (long access) ]

; unused

InitAnim_far:
@ac67:  jsr     InitAnim
        rtl

; ------------------------------------------------------------------------------

; [ init battle animation threads ]

InitAnim:
@ac6b:  ldy     #2
        lda     ($78),y     ; $12 = possible character targets
        asl4
        sta     $12
        iny
        lda     ($78),y     ; $13 = possible monster targets
        sta     $13
        iny
        lda     ($78),y     ; character targets hit
        asl4
        sta     $607e
        iny
        lda     ($78),y     ; monster targets hit
        sta     $607f
        sta     $62af       ;
        iny
        lda     ($78),y     ; character targets reflected off of
        asl4
        sta     $6080
        iny
        lda     ($78),y     ; monster targets reflected off of
        sta     $6081
        longa
        lda     $12
        lsr4
        sta     $12
        lda     $607e
        lsr4
        sta     $607e
        lda     $6080
        lsr4
        sta     $6080
        lda     $62c0       ; branch if block graphics are ignored
        and     #$00ff
        beq     @accc
        stz     $6080
        clr_a
        dec
        sta     $607e
@accc:  shorta0
        ldx     $6080
        phx
        ldx     $607e
        phx
        jsr     GetAttackerID
        sta     $6140
        stz     $890b       ; clear character/monster counter
        lda     #$01        ; set initial frame delay to 1
        sta     $1c
        sta     $6084       ; 1 active thread
        lda     $6082       ;
        ora     $6083
        ora     $6080
        ora     $6081
        bne     @acfa
        ldy     $6273       ; branch if sprite thread is disabled
        bmi     @ad76
@acfa:  lda     $890b       ; current character/monster
        sta     $613f
        and     #$0f
        longa
        asl
        tax
        lda     f:_c2ce8b,x   ; pointer to animation thread data (+$7e64de)
        tax
        shorta0
        lda     $62c0       ; branch if block graphics are disabled
        bne     @ad24
        lda     $890b       ; branch if a monster
        cmp     #$04
        bcs     @ad24
        clc
        adc     #$0a
        tay
        lda     ($78),y     ; branch if character blocked with a shield
        cmp     #$03
        beq     @ad49
@ad24:  lda     $6080       ; branch if target reflected
        and     #$01
        bne     @ad3d
        lda     $12         ; branch if target was not hit
        and     #$01
        beq     @ad5c
        ldy     $7b35       ; animation frame height/width
        sty     $22
        ldy     $6273       ; sprite script number
        sty     $24
        bra     @ad53
@ad3d:  ldy     #$0202      ; 2x2 frame height/width
        sty     $22
        ldy     #$0042      ; script $0042 (reflect)
        sty     $24
        bra     @ad53
@ad49:  ldy     #$0101      ; 1x1 frame height/width
        sty     $22
        ldy     #$0063      ; script $0063 (shield)
        sty     $24
@ad53:  ldy     $12         ; possible targets
        phy
        jsr     CreateThread
        ply
        sty     $12
@ad5c:  ror     $13         ; next target
        ror     $12
        ror     $607f
        ror     $607e
        ror     $6081
        ror     $6080
        inc     $890b       ; increment character/monster counter
        lda     $890b
        cmp     #$0a
        bne     @acfa
@ad76:  jsr     CreateBGThreads
        ldy     $627e       ; esper thread
        cpy     #$ffff
        beq     @adda       ; branch if disabled
        bmi     @addc       ; branch if esper thread
        lda     #$01        ; set initial frame delay to 1
        sta     $1c
        ldy     $7b37       ; esper frame height/width
        sty     $22
        ldy     $627e       ; esper script number
        sty     $24
        jsr     GetAttackerID
        lda     $10
        and     #$0f
        longa
        asl
        tax
        lda     f:_c2ce8b,x   ; pointer to animation thread data (+$7e64de)
        tax
        shorta0
        lda     $627d       ; special animation function
        and     #$7f
        cmp     #$12        ; branch if not esper pre-attack animation
        bne     @adb1
        lda     #$03        ; create 3 threads
        bra     @adbb
@adb1:  cmp     #$11        ; branch if not white/gray pre-attack animation
        bne     @adb9
        lda     #$06        ; create 6 threads
        bra     @adbb
@adb9:  lda     #$01        ; create 1 thread
@adbb:  pha
        phx
        jsr     _c1aaa5
        lda     $12
        sta     $613f       ; character/monster number
        plx
        phx
        jsr     CreateExtraThread
        plx
        longa
        txa                 ; next thread
        clc
        adc     #$0010
        tax
        shorta0
        pla
        dec
        bne     @adbb
@adda:  bra     @ae03
@addc:  jsr     GetAttackerID
        jsr     _c1aaa5
        lda     $12
        sta     $613f       ; character/monster number
        lda     #$01        ; set initial frame delay to 1
        sta     $1c
        ldx     #$0520      ; esper thread 1
        ldy     $7b37
        sty     $22         ; esper frame width/height
        longa
        lda     $627e       ; esper script number
        and     #$7fff
        sta     $24
        shorta0
        jsr     CreateThread
@ae03:  ldy     #6
        lda     ($78),y     ; targets reflected off of
        asl4
        sta     $6080
        iny
        lda     ($78),y
        sta     $6081
        plx
        stx     $607e
        phx
        stz     $e9ee       ;
        jsr     InitAnimType
        plx
        stx     $607e       ;
        plx
        stx     $6080       ;
        jsr     _c1ae2f
        jsr     CopyPal
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1ae2f:
clr_success_flag:
@ae2f:  jsr     GetAttackerID
        lda     $e9ee
        beq     @ae38
        rts
@ae38:  ldx     $6082
        phx
        longa
        ldy     #10
        lda     ($78),y
        sta     $62a5
        iny2
        lda     ($78),y
        sta     $62a7
        lda     $6082
        eor     #$ffff
        sta     $16
        lda     $6080
        eor     #$ffff
        sta     $14
        lda     $607e
        and     $14
        and     $16
        sta     $2a
        shorta0
        lda     $2a
        ora     $2b
        bne     @aec3
        lda     $6080
        ora     $6081
        ora     $6082
        ora     $6083
        ora     $607e
        ora     $607f
        beq     @ae9b
        stz     $6f2e
        stz     $6f3e
        stz     $6f4e
        stz     $6f5e
        stz     $6f6e
        stz     a:$0099       ; unpause sprite animation threads
        stz     $60ad       ; unpause bg3 animation threads
        stz     $60ac       ; unpause bg1 animation threads
@ae9b:  lda     $7488
        ora     #$80
        sta     $7488
        lda     $7498
        ora     #$80
        sta     $7498
        lda     $74a8
        ora     #$80
        sta     $74a8
        lda     $74b8
        ora     #$80
        sta     $74b8
        lda     $74c8
        ora     #$80
        sta     $74c8
@aec3:  clr_ax
@aec5:  lda     $6082
        and     #$01
        bne     @aef9
        lda     $6080
        and     #$01
        bne     @aef9
        lda     $607e
        and     #$01
        bne     @af31
        phx
        lda     #$08
        sta     $18
@aedf:  lda     $6f88,x
        ora     #$80
        sta     $6f88,x
        longa
        txa
        clc
        adc     #$0010
        tax
        shorta0
        dec     $18
        bne     @aedf
        plx
        bra     @af31
@aef9:  lda     $6a3e,x
        and     #$02
        sta     $6a3e,x
        lda     $6a4e,x
        and     #$02
        sta     $6a4e,x
        lda     $6a5e,x
        and     #$02
        sta     $6a5e,x
        lda     $6a6e,x
        and     #$02
        sta     $6a6e,x
        lda     $6a7e,x
        and     #$02
        sta     $6a7e,x
        lda     $6a8e,x
        and     #$02
        sta     $6a8e,x
        lda     $6a9e,x
        and     #$02
        sta     $6a9e,x
@af31:  longa
        txa
        clc
        adc     #$0080
        tax
        shorta
        ror     $6083
        ror     $6082
        ror     $607f
        ror     $607e
        ror     $6081
        ror     $6080
        cpx     #$0500
        jne     @aec5
        plx
        stx     $6082
        rts

; ------------------------------------------------------------------------------

; [ odin/raiden/cleave animation ??? ]

_c1af5a:
type_00b_anim_set:
@af5a:  jsl     AnimType_09_far
        lda     #$06
        sta     $800c
        ldy     #5
        lda     ($78),y
        sta     $607f
        stz     $607e
        stz     $7b67
        jsr     WaitFrame
@af74:  jsr     WaitFrame
        lda     $607e
        tax
        lda     $607f
        and     f:BitOrTbl,x
        beq     @afdd
        pha
        jsr     MonstersToBG1
        jsr     _c1b01a
        jsr     TfrBG1Tiles
        jsr     WaitFrame
        pla
        eor     #$ff
        sta     $60ab
        stz     $5f6d
        lda     #$80
        sta     $10
        lda     #$be
        jsr     PlayAnimSfx
@afa3:  jsr     WaitFrame
        lda     $5f6d
        ldx     #$0010
        stx     $24
        lda     $5f6d
        jsr     CalcSine16
        jsr     _c1b05f
        jsr     _c1b02d
        lda     $5f6d
        clc
        adc     #$02
        sta     $5f6d
        cmp     #$40
        bne     @afa3
        clr_ax
        stx     $28
        jsr     _c1b05f
        lda     $201e
        and     $61ab
        and     $60ab
        sta     $201e
        jsr     ClearBG1Tiles
@afdd:  inc     $607e
        lda     $607e
        cmp     #$06
        bne     @af74
        jsr     WaitFrame
        jsr     ClearBG1Tiles
        clr_ax
        stx     $10
        stx     $64b4
        stx     $64b6
        jsr     SetColorMathHDMA
        lda     #$03
        sta     $800c
        rts

; ------------------------------------------------------------------------------

; [ set color add/sub data ]

SetColorMathHDMA_far:
@b000:  jsr     WaitLine160
        jsr     SetColorMathHDMA
        rtl

; ------------------------------------------------------------------------------

; [ wait for scanline 160 ]

; waits until the ppu reaches the end of the battlefield area

WaitLine160:
@b007:  pha
@b008:  lda     f:hSTAT78
        lda     f:hSLHV
        lda     f:hOPVCT
        cmp     #$a0
        bcc     @b008
        pla
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1b01a:
caster_pri_up2:
@b01a:  jsr     GetAttackerID
        lda     $10
        bmi     @b02c
        asl5
        tay
        lda     #$30
        sta     $61bd,y
@b02c:  rts

; ------------------------------------------------------------------------------

; [  ]

_c1b02d:
target_mon_col_down:
@b02d:  clr_ay
        longa
        ldx     #$0010
        lda     #$00e1
        sta     $14
        sta     $16
        sta     $18
        jsr     InitColorMod
@b040:  lda     $7e60,y
        jsr     DecColor
        sta     $7e60,y
        iny2
        dex
        bne     @b040
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1b052:
@b052:  lda     f:hSLHV
        lda     f:hOPVCT
        cmp     #$a0
        bcc     @b052
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1b05f:
bg1_line2_set:
@b05f:  jsr     _c1b052
        clr_ax
        longa
@b066:  lda     $28
        sta     $63b0,x
        eor     #$ffff
        sta     $63f0,x
        inx4
        cpx     #$0040
        bne     @b066
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ clear bg3 tile data in vram (long access) ]

ClearBG3Tiles_far:
@b07e:  jsr     ClearBG3TileBuf
        jsr     TfrBG3Tiles
        rtl

; ------------------------------------------------------------------------------

; [ reset animation type ??? ]

_c1b085:
magic_type_rset:
@b085:  lda     #$ff
        sta     $60ab
        jsr     ResetSpritePriority
        stz     $7b67
        jsr     WaitFrame
        jsr     ClearBG1Tiles
        jsr     ClearBG3TileBuf
        jsr     TfrBG3Tiles
        clr_ax
        stx     $64b4
        stx     $64b6
        lda     #$17
        sta     $898d
        lda     $896f
        and     #$af
        ora     #$08
        sta     $896f
        jsr     WaitFrame
        clr_ax
        stx     $10
        stx     $64b4
        stx     $64b6
        stx     $4af5
        stx     $4af7
        jsr     SetColorMathHDMA
        lda     #$33
        sta     f:hW12SEL
        sta     f:hW34SEL
        stz     $961b       ; clear circle shape
        jsl     InitCircle_far
        lda     #$ff
        sta     $60ab
        lda     $627d       ; animation init function
        bmi     @b0f3       ; branch if bg1 target
        cmp     #$6b
        beq     @b0f0       ; branch if raiden
        cmp     #$45
        beq     @b0f0       ; branch if odin
        cmp     #$0b
        bne     @b0f3       ; branch if not cleave
@b0f0:  jsr     _c1af5a
@b0f3:  lda     #$17
        sta     $898d       ; main screen designation -> $212c (battlefield region)
        rts

; ------------------------------------------------------------------------------

; [ copy bg3 tile data to vram ]

TfrBG3Tiles:
@b0f9:  ldx     #$0400      ; size = $0400
        stx     $10
        ldx     #$a97f      ; source = $7ea97f (bg tile data buffer)
        lda     #$7e
        ldy     #$5400      ; destination = $5400 (vram)
        jmp     WaitTfrVRAM

; ------------------------------------------------------------------------------

; [ clear bg tile data in vram (long access) ]

ClearBG1TargetTiles_far:
@b109:  jsr     ClearBG1TargetTiles
        rtl

; ------------------------------------------------------------------------------

; [ clear bg tile data in vram ]

; +Y: vram destination

ClearBG1TargetTiles:
summon_clr_screen_tfr:
@b10d:  jsr     _c1b11e       ; clear vram buffer (bg tile data)
        ldx     #$0800      ; size = $0800
        stx     $10
        ldx     #$ae3f      ; source = $7eae3f (vram buffer)
        lda     #$7e
        jsr     WaitTfrVRAM
        rts

; ------------------------------------------------------------------------------

; [ clear vram buffer (bg tile data) ]

_c1b11e:
@b11e:  longa
        clr_ax
        lda     #$02ee
@b125:  sta     $ae3f,x
        sta     $b03f,x
        sta     $b23f,x
        sta     $b43f,x
        inx2
        cpx     #$0200
        bne     @b125
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ init bg tile data and execute init function ]

InitAnimType:
@b13c:  lda     $627d       ; init function
        bpl     @b191       ; branch if using bg1 graphics

; bg1 target
        pha
        jsr     ResetSpritePriority
        stz     $7b67       ;
        lda     $896f       ; make bg1 8x8 tiles and bg3 16x16 tiles ($2105)
        and     #$ef
        ora     #$40
        sta     $896f
        lda     #$ff        ;
        sta     $60ab
        ldy     #$0c00      ; vram destination = $0c00 (bg1 tile data)
        jsr     ClearBG1TargetTiles
        jsr     WaitFrame
        lda     #$0c
        sta     $8971       ; bg1 tile data vram location = $0c00
        jsr     ClearBG1Tiles
        jsr     TfrBG3Tiles
        clr_ax
        stx     $64b4       ;
        stx     $64b6
        stx     $4af5       ; clear bg3 scroll hdma data
        stx     $4af7
        jsr     WaitFrame
.if LANG_EN_REV1
        jsr     _c11e6d       ; copy bg1 monsters to bg1 *** jsr $1e6d in rev 1 ***
.else
        jsr     _c11e79       ; copy bg1 monsters to bg1 *** jsr $1e6d in rev 1 ***
.endif
        jsr     TfrBG1Tiles
        lda     #$01
        sta     $7b67       ; hide bg1 monster sprites
        sta     $7b0e       ; 1 monster thread
        sta     $7b0f       ; 1 character thread
        pla
        jmp     @b1bb       ; execute init function

; bg1 animation graphics
@b191:  pha
        lda     $6167       ; bg1 palette index
        jsr     LoadBG1AnimPal
        jsr     ClearBG1Tiles
        jsr     ClearBG3TileBuf
        jsr     TfrBG3Tiles
        clr_ax
        stx     $64b4       ;
        stx     $64b6
        stx     $4af5       ; clear bg3 scroll hdma data
        stx     $4af7
        lda     $896f       ; make bg1 and bg3 16x16 tiles ($2105)
        ora     #$50
        sta     $896f
        jsr     UpdateSpritePriority
        pla
@b1bb:  jsl     ExecAnimType
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1b1c0:
set_magic_buf3_long:
@b1c0:  jsr     _c1b1c4
        rtl

; ------------------------------------------------------------------------------

; [  ]

; a secret third type of animation thread

_c1b1c4:
set_magic_buf3:
@b1c4:  stx     $7af6
        lda     #$ff
        sta     $607e
        sta     $607f
        stz     $6082
        stz     $6083
        lda     $613f
        sta     $12
        stz     $60a9
        lda     #$01
        sta     $1a
        sta     $1c
        ldx     $22
        phx
        ldx     $24
        phx
        jsr     _c1b399       ; clear current thread data
        ldx     $7af6
        longa
        lda     $22
        sta     $6a2f,x
        lda     $24
        sta     $22
        inc2
        ldx     $7af6
        sta     $6a31,x
        shorta0
        jmp     _c1b2d0

; ------------------------------------------------------------------------------

; [ create extra sprite thread ]

CreateExtraThread:
@b208:  lda     $627d       ; special function
        cmp     #$18        ; branch if not drain, osmose, raid, cold dust
        bne     @b218
        longa        ; skip 6 threads
        txa
        clc
        adc     #$0060
        bra     @b21f
@b218:  longa        ; skip 1 thread
        txa
        clc
        adc     #$0010
@b21f:  tax
        shorta0
        stx     $7af6
        lda     #$ff
        sta     $607e       ; clear all targets ???
        sta     $607f
        lda     $613f       ; character/monster (attacker)
        sta     $12         ; target number
        lda     #$08        ; multi-target delay
        sta     $60a9
        lda     #$03        ; set 3 in active thread flag
        sta     $1a
        bra     _b2a4

; ------------------------------------------------------------------------------

; [ create animation thread ]

;   +X: thread data pointer
;  $1c: initial frame delay
; +$22: frame width/height
; +$24: animation script number

CreateThread:
@b23e:  lda     $6280
        sta     $60a9
        lda     $627d       ; animation init function
        and     #$7f
        cmp     #$05
        bne     @b24f
        bra     @b253
@b24f:  cmp     #$02
        bne     _c1b27a

; special function $02 and $05
@b253:  phx
        phx
        jsr     _c1b27a
        longa
        pla
        clc
        adc     #$0040
        tax
        shorta0
        phx
        jsr     _c1b27a
        longa
        pla
        clc
        adc     #$0010
        tax
        shorta0
        jsr     _c1b27a
        plx
        stx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ ini animation thread ]

InitThread:
_c1b27a:
l_01_ll283:
@b27a:  stx     $7af6       ; thread data pointer
        lda     $6084       ; add 8 to number of active threads
        clc
        adc     #$08
        sta     $6084
        lda     $6140       ; $10 = attacker number
        sta     $10
        lda     $62d1
        beq     @b295
        lda     $613f
        bra     @b29e
@b295:  lda     $613f
        cmp     #$04
        bcc     @b29e
        ora     #$80
@b29e:  sta     $12         ; $12 = target number
        lda     #$01
        sta     $1a         ; $1a = 1 (active thread flag)

set_magic_buf_main:
_b2a4:  lda     #^AttackAnimScript
        sta     $26         ; $26 = #$d0 (script pointer bank)
        ldx     $22
        phx
        ldx     $24
        phx
        jsr     _c1b399       ; clear current thread data
        ldx     $7af6
        longa
        lda     $22
        sta     $6a2f,x     ; frame width/height
        lda     $24
        asl
        tax
        lda     f:AttackAnimScriptPtrs,x
        sta     $22
        inc2
        ldx     $7af6
        sta     $6a31,x     ; set thread script pointer
        shorta0

_c1b2d0:
set_magic_buf_main2:
@b2d0:  lda     $607e
        and     #$01
        sta     $74d4,x
        lda     #$06
        sta     $74d5,x
        lda     $26
        sta     $24
        sta     $6a33,x     ; set script pointer bank
        lda     [$22]       ; animation speed (first byte, high nybble)
        lsr4
        inc
        sta     $6a34,x
        lda     $1c
        sta     $6a35,x     ; initial frame delay
        lda     $1c
        clc
        adc     $60a9       ; add multi-target delay to next thread's initial frame delay
        sta     $1c
        stz     $6a36,x     ; clear thread index
        lda     #$40
        sta     $6a37,x     ; tile 0, flipped horizontally
        lda     $10
        sta     $6a38,x     ; attacker number
        lda     $12
        sta     $6a39,x     ; target number
        jsr     CalcTargetPos
        longa
        lda     $14         ; x position (target)
        sta     $6f82,x
        sta     $6a3a,x
        lda     $16         ; y position (target)
        sta     $6f84,x
        sta     $6a3c,x
        shorta0
        jsr     CalcAttackerPos
        longa
        lda     $14         ; x position (attacker)
        sta     $6f7e,x
        lda     $16         ; y position (attacker)
        sta     $6f80,x
        shorta0
        lda     #$30
        sta     $6f86,x     ; priority 3
        phx
        jsr     GetAttackerID
        plx
        lda     $10         ; branch if attacker is a character
        bpl     @b356
        and     #$0f
        sec
        sbc     #$04
        asl
        tay
        lda     $80f3,y     ; attacker facing direction (monster)
        eor     $617e,y
        eor     #$01
        bra     @b35a
@b356:  tay
        lda     $7b10,y     ; attacker facing direction (character)
@b35a:  asl6
        and     #$40
        sta     $6f87,x     ; animation direction
        lda     $12         ; branch if target is a monster
        bmi     @b375
        lda     #$02
        sta     $74d2,x     ; target width = 2 (character)
        lda     #$03
        sta     $74d3,x     ; target height = 3 (character)
        bra     @b388
@b375:  and     #$7f
        sec
        sbc     #$04
        asl
        tay
        lda     $812f,y     ; target width (monster)
        sta     $74d2,x
        lda     $8130,y     ; target height (monster)
        sta     $74d3,x
@b388:  lda     #$01
        sta     $6f8d,x     ; set counter for graphic index offset to 1
        lda     $1a
        sta     $6a2e,x     ; thread is active
        plx
        stx     $24
        plx
        stx     $22
        rts

; ------------------------------------------------------------------------------

; [ clear current thread data ]

_c1b399:
clr_magic_buf_shap:
@b399:  ldx     $7af6       ; thread pointer
        ldy     #$0010
@b39f:  stz     $6a2e,x     ; clear thread data
        stz     $6f7e,x
        stz     $74ce,x
        stz     $64de,x
        inx
        dey
        bne     @b39f
        rts

; ------------------------------------------------------------------------------

; [ init roulette cursor ]

_c1b3b0:
@b3b0:  stz     $62b6
        stz     $62b9
        stz     $62bb
        stz     $62bc
        jsr     Rand
        and     #$7f
        clc
        adc     #$80
        sta     $62b8
        sta     $62ba
        inc     $62b5       ; enable roulette cursor
        rts

; ------------------------------------------------------------------------------

; [ update roulette cursor ]

_c1b3ce:
auto_kuru_set:
@b3ce:  lda     $62b5       ; return if roulette cursor is disabled
        beq     @b43c
        stz     $3a
        clr_ax
@b3d7:  lda     $2ebd,x     ; current status 1
        asl
        ror     $3a
        txa
        clc
        adc     #$20
        tax
        cpx     #$0080
        bne     @b3d7
        lda     $3a         ; $3a = characters without wound status
        lsr4
        eor     #$ff
        sta     $3a
        lda     $201d       ;
        and     $61ac
        and     $61ad
        and     $6193
        sta     $36         ; $36 = visible characters
        lda     $92         ;
        and     $3a         ; mask characters with wound status
        ora     $36         ; add visible characters
        beq     @b43c       ; return if there are no characters
        lda     $62b9
        beq     @b421       ;
        lda     $0e         ; frame counter
        and     #$01
        beq     @b43c       ; return on even frames
        dec     $62b7       ;
        bne     @b439
        ldx     $62bb
        stx     $2f42
        stz     $62b5
        rts

;
@b421:  lda     $62b6
        beq     @b43f
        lda     $0e         ; frame counter
        and     #$07
        bne     @b49b       ; branch 7/8 frames
        dec     $62b7       ; decrement ??? counter
        bne     @b45b
        inc     $62b9
        lda     #$20        ; set ??? counter to 32 * 8 frames (4.25 seconds)
        sta     $62b7
@b439:  jmp     @b49b

; return
@b43c:  jmp     @b516

;
@b43f:  lda     $62ba
        bne     @b452
        jsr     Rand
        and     #$07
        clc
        adc     #$08        ; (8..15)
        sta     $62b7
        inc     $62b6
@b452:  dec     $62ba
        lda     $0e         ; frame counter
        and     #$03
        bne     @b49b       ; branch 3/4 frames
@b45b:  inc     $62b8
        lda     $62b8
        and     #$08
        beq     @b487
        lda     $62b8
        and     #$07
        tax
        lda     $201d
        and     $61ac
        and     $61ad
        and     $6193
        and     $3a
        and     f:BitOrTbl,x
        beq     @b45b
        sta     $62bb
        stz     $62bc
        bra     @b49b
@b487:  lda     $62b8
        and     #$07
        tax
        lda     $92
        and     f:BitOrTbl,x
        beq     @b45b
        sta     $62bc
        stz     $62bb
@b49b:  ldx     #$38e0      ; +$3a = tile data for cursor
        stx     $3a

; cursor on character
        lda     $62bb       ;
        beq     @b4d5
        jsr     _c11a0f       ; get bit number
        asl
        tax
        lda     $809f,x     ; character front offset (0 if facing left)
        beq     @b4b3       ; branch if facing left
        lda     #$78
        sta     $3b
@b4b3:  lda     $8088,x
        and     #$01
        bne     @b4cd
        lda     $8094,x
        and     #$01
        bne     @b4cd
        lda     $8087,x
        sta     $36
        lda     $8093,x
        sta     $37
        bra     @b500
@b4cd:  lda     #$e0
        sta     $36
        sta     $37
        bra     @b500

; cursor on monster
@b4d5:  lda     $62bc
        beq     @b516
        jsr     _c11a0f       ; get bit number
        asl
        tax
        lda     $807b,x
        beq     @b4e8
        lda     #$78        ; flip horizontally
        sta     $3b
@b4e8:  lda     $8064,x
        and     #$01
        bne     @b4cd
        lda     $8070,x
        and     #$01
        bne     @b4cd
        lda     $8063,x
        sta     $36
        lda     $806f,x
        sta     $37
@b500:  lda     $71         ; next available sprite
        longa
        asl2
        tax
        lda     $36
        sta     $0300,x     ; set sprite data
        lda     $3a
        sta     $0302,x
        shorta0
        inc     $71         ; increment number of active sprites
@b516:  rts

; ------------------------------------------------------------------------------

; [ init cursor sprites ]

_c1b517:
cur_init:
@b517:  clr_ax
        lda     #$38
@b51b:  sta     $88e6,x
        inx4
        cpx     #$0028
        bne     @b51b
        ldx     #$e0e0
        stx     $7a6f
        ldx     #$e2e0
        stx     $7a71
        rts

; ------------------------------------------------------------------------------

; flashing scroll arrows sprite data (both, down, up, not flashing, then flashing)
_c1b534:
@b534:  .word   $38e2,$78e2,$38e2,$b8e4,$38e2,$38e4

; ------------------------------------------------------------------------------

; [ update cursor sprites ]

DrawCursorSprites:
@b540:  shorti
        lda     $62be
        bne     @b595
        lda     $62bd
        bne     @b595
        lda     $632f
        beq     @b595
        lda     $62ca       ; active character (arrow indicator)
        asl5
        tax
        longi
        jsr     _c134a5
        shorti
        lda     $62ca       ; active character (arrow indicator)
        asl
        tax
        lda     $8034,x     ; center x position (high byte)
        and     #$01
        bne     @b595       ; branch if greater than $0100 (hide arrow if character is offscreen)
        lda     $803c,x     ; center y position (high byte)
        and     #$01
        bne     @b595       ; branch if greater than $0100 (hide arrow if character is offscreen)
        lda     $8033,x     ; character center x position - 8 (left y position)
        sec
        sbc     #$08
        sta     $0318       ; set arrow sprite x position
        lda     $803b,x     ; character center y position - 24 (top y position)
        sec
        sbc     #$18
        clc
        adc     $38         ;
        sta     $0319       ; set arrow sprite y position
        lda     #$2e
        sta     $031a
        lda     #$28
        sta     $031b
        bra     @b59d
@b595:  lda     #$e0        ; hide arrow sprite
        sta     $0318
        sta     $0319
@b59d:  lda     $7baf       ;
        beq     @b5c4
        lda     $7bb0
        sta     $88e8
        lda     #$01
        sta     $88e7
        longi
        ldx     $7bb1
        cpx     $7bb3
        bcc     @b5c4
        cpx     #$00ca
        bcs     @b5c4
        lda     $7bb1
        sta     $88e9
        bra     @b5c7
@b5c4:  stz     $88e7
@b5c7:  shorti
        stz     $88eb
        lda     $7bb5
        beq     @b5e0
        lda     $7bb6
        sta     $88ec
        inc     $88eb
        lda     $7bb7
        sta     $88ed
@b5e0:  clr_axy
@b5e3:  lda     $88e3,y
        bne     @b5f2
        lda     #$e0
        sta     $04f0,y     ; hide cursor
        sta     $04f1,y
        bra     @b60a
@b5f2:  lda     $88e4,y     ; cursor x position
        sta     $04f0,y
        lda     $88e5,y     ; cursor y position
        sta     $04f1,y
        lda     $88e6,y     ; cursor vhoopppm
        sta     $04f3,y
        lda     $7a6f,x     ; cursor tile index
        sta     $04f2,y
@b60a:  inx                 ; next cursor
        iny4
        cpy     #$0c
        bne     @b5e3
        lda     $88e3,y     ; scroll arrows
        bne     @b622       ; branch if active
        lda     #$e0
        sta     $04f0,y     ; hide scroll arrows
        sta     $04f1,y
        bra     @b64e
@b622:  lda     $88e4,y     ; scroll arrows x position
        sta     $04f0,y
        lda     $88e5,y     ; scroll arrows y position
        sta     $04f1,y
        lda     $0e         ; frame counter
        lsr3
        and     #$02        ; flash every 16 frames
        sta     $36
        lda     $88e6,y     ; 0 = both, 1 = down, 2 = up
        asl2
        clc
        adc     $36
        tax
        lda     f:_c1b534,x   ; flashing cursor tile data
        sta     $04f2,y
        lda     f:_c1b534+1,x
        sta     $04f3,y
@b64e:  jsr     _c1b684       ; update character/monster cursor sprite data
        clr_ay
@b653:  lda     $88f3,y     ; character/monster cursor
        bne     @b662       ; branch if active
        lda     #$e0
        sta     $0300,y     ; hide cursor
        sta     $0301,y
        bra     @b679
@b662:  lda     $88f4,y     ; cursor x position
        sta     $0300,y
        lda     $88f5,y     ; cursor y position
        sta     $0301,y
        lda     $88f6,y     ; cursor vhoopppm
        sta     $0303,y
        lda     #$e0        ; cursor tile = $e0
        sta     $0302,y
@b679:  iny4                ; next cursor (6 total)
        cpy     #$18
        bne     @b653
        longi
        rts

; ------------------------------------------------------------------------------

; [ update character/monster cursor sprite data ]

_c1b684:
        .i8
@b684:  clr_ax
        lda     #$38        ; vhoopppm for all cursors = $38
@b688:  sta     $88f6,x
        stz     $88f3,x     ; disable all character/monster cursors
        sta     $8902,x
        stz     $88ff,x
        inx4
        cpx     #$0c
        bne     @b688
        lda     $7b7f       ; branch if cursors are on one side only
        beq     @b6a9
        lda     $0e         ; frame counter
        and     #$01
        beq     @b6ae       ; show cursors on monsters on odd frames
        bra     @b702
@b6a9:  lda     $7b7d
        beq     @b702

; cursors on characters
@b6ae:  clr_axy
        lda     $7b7d       ; characters with cursors shown
        and     $201d       ; ignore hidden characters
        and     $61ac       ;
        and     $61ad
        and     $6193       ; clear characters acting as enemies
        sta     $36
@b6c2:  lsr     $36
        bcc     @b6f6       ; skip cursor
        lda     $809f,y     ; character cursor x offset
        beq     @b6d0       ; branch if facing left
        lda     #$78
        sta     $88f6,x     ; vhoopppm = $78 (horizontally flipped)
@b6d0:  lda     $8088,y     ; character right x position (high byte)
        and     #$01
        bne     @b6f6       ; skip if offscreen
        lda     $8094,y     ; character center y position (high byte)
        and     #$01
        bne     @b6f6       ; skip if offscreen
        lda     $8093,y     ; character center y position
        cmp     #$a0
        bcs     @b6f6       ; skip if below battlefield region
        lda     #$01
        sta     $88f3,x     ; enable cursor
        lda     $8087,y     ; character right x position
        sta     $88f4,x
        lda     $8093,y     ; character center x position
        sta     $88f5,x
@b6f6:  iny2                ; next cursor
        inx4
        cpx     #$18
        bne     @b6c2
        bra     @b74a

; cursors on monsters
@b702:  clr_axy
        lda     $7b7e
        and     $92
        sta     $36
@b70c:  lsr     $36
        bcc     @b740
        lda     $807b,y
        beq     @b71a
        lda     #$78
        sta     $88f6,x
@b71a:  lda     $8064,y
        and     #$01
        bne     @b740
        lda     $8070,y
        and     #$01
        bne     @b740
        lda     $806f,y
        cmp     #$a0
        bcs     @b740
        lda     #$01
        sta     $88f3,x
        lda     $8063,y
        sta     $88f4,x
        lda     $806f,y
        sta     $88f5,x
@b740:  iny2
        inx4
        cpx     #$18
        bne     @b70c
@b74a:  rts

; ------------------------------------------------------------------------------

; animation scripts for block animations (knife, sword, shield, zephyr cape, hand up, golem, dog)
BlockAnimScriptTbl:
@b74b:  .byte   $45,$46,$48,$47,$40,$44,$43

; palettes for block animations
BlockPalTbl:
@b752:  .byte   $02,$02,$01,$00,$00,$01,$03

; sound effects for block animations
BlockSfxTbl:
@b759:  .byte   $a0,$a0,$a0,$a0,$a0,$a0,$a0

; ------------------------------------------------------------------------------

; [ battle script command $06: show battle animation ]

anim_command:
GfxCmd_06:
        .i16
@b760:  jsr     _c19c9e                 ; deactivate all animation threads
        stz     $ecbb
        ldy     #$0001
        lda     ($76),y                 ; attack command
        bmi     @b772
        asl
        tax
        jsr     (.loword(CmdAnimTbl),x)
@b772:  jmp     NextGfxCmdData

; attack command jump table
anim_command_jmp:
CmdAnimTbl:
@b775:  .addr   CmdAnim_00
        .addr   CmdAnim_01
        .addr   CmdAnim_02
        .addr   CmdAnim_03
        .addr   CmdAnim_04
        .addr   CmdAnim_05
        .addr   CmdAnim_06
        .addr   CmdAnim_07
        .addr   CmdAnim_08
        .addr   CmdAnim_09
        .addr   CmdAnim_0a
        .addr   CmdAnim_0b
        .addr   CmdAnim_0c
        .addr   CmdAnim_0d
        .addr   CmdAnim_0e
        .addr   CmdAnim_0f
        .addr   CmdAnim_10
        .addr   CmdAnim_11
        .addr   CmdAnim_12
        .addr   CmdAnim_13
        .addr   CmdAnim_14
        .addr   CmdAnim_15
        .addr   CmdAnim_16
        .addr   CmdAnim_17
        .addr   CmdAnim_18
        .addr   CmdAnim_19
        .addr   CmdAnim_1a
        .addr   CmdAnim_1b
        .addr   CmdAnim_1c
        .addr   CmdAnim_1d
        .addr   CmdAnim_1e
        .addr   CmdAnim_1f
        .addr   CmdAnim_20
        .addr   CmdAnim_21
        .addr   CmdAnim_22
        .addr   CmdAnim_23
        .addr   CmdAnim_24
        .addr   CmdAnim_25
        .addr   CmdAnim_26

; ------------------------------------------------------------------------------

; [ attack command $1d: magitek ]

CmdAnim_1d:
@b7c3:  ldy     #2
        lda     ($76),y
        cmp     #$86
        bcc     @b7d7       ; branch if fire, ice, or bolt beam
        lda     #$2a        ; animation for command $2a (animation script $0100)
        jsr     _c1b8a4
        jsr     MagicCmdAnim
        jmp     _c1b86b
@b7d7:  ldy     #4
        lda     ($78),y
        iny
        ora     ($78),y
        bne     @b7e6
        lda     #$2a
        jmp     _c1b8a4
@b7e6:  jmp     MagicCmdAnim

; ------------------------------------------------------------------------------

; [ attack command $22: enemy roulette ]

CmdAnim_22:
@b7e9:  inc     $62a4
        lda     #$29
        jmp     _c1b8a4

; ------------------------------------------------------------------------------

; [ attack command $21:  ]

CmdAnim_21:
@b7f1:  jsr     _c1b3b0       ; init roulette cursor
        rts

; ------------------------------------------------------------------------------

; [ execute single thread animation ]

; +X: pointer to animation data (+$d07fb2)

_c1b7f5:
@b7f5:  phx
        jsr     _c19aa2
        jsr     _c1ab43       ; init single thread animation
        plx
        stx     $1e
        clr_a
        jsr     InitAnimProp
        jsr     ExecAnim
        jsr     _c1ab43       ; init single thread animation
        rts

; ------------------------------------------------------------------------------

; [ attack command $14: row ]

CmdAnim_14:
@b80a:  jsr     GetAttackerID
        lda     $10
        bmi     @b867       ; return if a monster
        asl5
        tay
        lda     $201f       ; battle type
        asl2
        clc
        adc     $10
        tax
        lda     $2ec5,y     ; toggle row
        eor     #$01
        sta     $2ec5,y
        and     #$01
        beq     @b834       ; branch if front
        stz     $11
        lda     f:_c2a86f,x   ; horizontal movement speed (back row)
        bra     @b838
@b834:  lda     f:_c2a87f,x   ; horizontal movement speed (front row)
@b838:  sta     $10
        bpl     @b83e
        dec     $11         ; make $10 16-bit (+$10)
@b83e:  lda     #$04
        sta     $61c0,y     ; secondary graphical action = 4 (walking forward)
        lda     #$06        ; 6 frames
@b845:  pha
        phy
        ldx     $10
        phx
        jsr     WaitFrame
        plx
        stx     $10         ; movement speed
        ply
        longa
        lda     $61c9,y     ; add to character xy angle
        clc
        adc     $10
        sta     $61c9,y
        shorta0
        pla
        dec                 ; decrement frame counter
        bne     @b845
        clr_a
        sta     $61c0,y     ; clear secondary graphical action
@b867:  jsr     WaitFrame
        rts

; ------------------------------------------------------------------------------

; [ step back after attack ]

_c1b86b:
inc_magic_play_start_flag:
@b86b:  jsr     GetAttackerID
        lda     $10
        bmi     @b87f       ; branch if a monster
        and     #$03
        phx
        tax
        lda     $62a4       ;
        bne     @b87e
        inc     $61ae,x     ; disable character stepping forward to attack (enable stepping back ???)
@b87e:  plx
@b87f:  rts

; ------------------------------------------------------------------------------

; [ execute event animation (long access) ]

_c1b880:
set_one_animation_long:
@b880:  jsr     _c1b884       ; execute event animation
        rtl

; ------------------------------------------------------------------------------

; [ execute event animation ]

; +$1e: pointer to animation data (+$d07fb2)

_c1b884:
set_one_animation:
@b884:  stz     $62c0       ; don't ignore block graphics
        ldx     $1e
        clr_a
        jsr     InitAnimProp
        jmp     InitAnim

; ------------------------------------------------------------------------------

; [ execute command animation (block graphics enabled) ]

; A: command animation number (animation data pointer at +$c2b4be)

_c1b890:
set_caster_animation2:
@b890:  asl
        tax
        longa
        ldy     #4
        lda     ($78),y
        pha
        lda     f:_c2b4be,x   ; pointer to animation data (+$d07fb2)
        tax
        shorta0
        bra     _b8c2

; ------------------------------------------------------------------------------

; [ execute command animation ]

; A: command animation number (animation data pointer at +$c2b4be)

_c1b8a4:
set_caster_animation:
@b8a4:  inc     $62c0       ; ignore block graphics
        asl
        tax
        longa
        ldy     #4
        lda     ($78),y     ; targets hit
        pha
        ldy     #2
        lda     ($78),y     ; set targets
        iny2
        sta     ($78),y
        lda     f:_c2b4be,x   ; pointer to animation data (+$d07fb2)
        tax
        shorta0

set_caster_animation_main:
_b8c2:  phx
        jsr     PushMonsterPalID
        jsr     SetAnimTargets
        jsr     _c1ab8b       ; reset attacker graphical action
        plx
        jsr     _c1b7f5       ; execute single thread animation
        jsr     PopMonsterPalID
        jsr     _c1ab8b       ; reset attacker graphical action
        longa
        pla
        ldy     #4
        sta     ($78),y     ; restore targets hit
        shorta0
        stz     $62c0       ; don't ignore block graphics
        rts

; ------------------------------------------------------------------------------

; [ attack command $0c: lore ]

CmdAnim_0c:
@b8e5:  jsr     InitCmdAnim
        lda     ($78)
        and     #$10
        bne     @b8f7
        lda     ($78)
        bmi     @b8f7
        lda     #$28
        jsr     _c1bbe1
@b8f7:  jsr     CheckNullTarget
        bcc     @b8ff
        jsr     MagicCmdAnim
@b8ff:  rts

; ------------------------------------------------------------------------------

; [ attack command $0f: slot ]

CmdAnim_0f:
@b900:  jsr     InitCmdAnim
        ldx     #$0f6c      ; pointer to animation data $011a (walk forward with arms up)
        jsr     _c1b7f5       ; execute single thread animation
        lda     ($78)
        bmi     @b919       ; return if attacker is a monster
        jsr     MagicCmdAnim
        jsr     _c1ac35
        jsr     _c1b86b
        jsr     PopMonsterPalID
@b919:  rts

; ------------------------------------------------------------------------------

; [ attack command $0a: blitz ]

CmdAnim_0a:
@b91a:  jsr     InitCmdAnim
        lda     #$04
        jsr     _c1b8a4
        jsr     CheckNullTarget
        bcc     @b93a
        ldx     #$0516
        stx     $1e
        ldy     #2
        lda     ($76),y
        jsr     InitAnimProp
        jsr     ExecAnim
        jsr     PopMonsterPalID
@b93a:  jsr     _c1b86b
        jsr     _c1ab8b       ; reset attacker graphical action
        rts

; ------------------------------------------------------------------------------

; [ check if there are no targets ]

; carry clear = no targets (out)

CheckNullTarget:
@b941:  ldy     #2
        clr_a
@b945:  ora     ($78),y     ; check possible targets, targets hit, targets reflected off, ...
        iny
        cpy     #$000c
        bne     @b945
        cmp     #0
        beq     @b953
        sec
        rts
@b953:  clc
        rts

; ------------------------------------------------------------------------------

; [ attack command $26: dice roll ]

CmdAnim_26:
@b955:  jsr     InitCmdAnim
        ldy     #2
        lda     ($76),y     ; die 1
        and     #$0f
        sta     $ebfb
        lda     ($76),y
        and     #$f0
        sta     ($76),y
        iny
        lda     ($76),y     ; die 2
        lsr4
        sta     $ebfc
        lda     ($76),y     ; die 3
        and     #$0f
        sta     $ebfd
        lda     #$51
        sta     ($76),y     ; set item $51 (dice)
        lda     $ebfb
        cmp     #$0f
        bne     @b988       ; branch if die 1 is enabled (3 dice)
        lda     #$0d
        bra     @b98a
@b988:  lda     #$0c
@b98a:  jmp     _c1b8a4

; ------------------------------------------------------------------------------

; [ attack command $07: swdtech ]

CmdAnim_07:
@b98d:  jsr     InitCmdAnim
        lda     $60ae
        bne     @b9a4       ; branch if not first swdtech hit (graphics are already loaded)
        jsr     _c1ab8b       ; reset attacker graphical action
        lda     #$03
        jsr     _c1bbe1
        jsr     CheckNullTarget
        bcc     @b9c4
        bra     @b9ac
@b9a4:  jsr     CheckNullTarget
        bcc     @b9c4
        jsr     SetAnimTargets
@b9ac:  jsr     _c19aa2
        ldx     #$04a6
        stx     $1e
        ldy     #2
        lda     ($76),y
        bmi     @b9c4
        jsr     InitAnimProp
        jsr     ExecAnim
        jsr     PopMonsterPalID
@b9c4:  rts

; ------------------------------------------------------------------------------

; [ attack command $08: throw ]

; item jump and throw animation data (d1/0040)
;
; djjjtttt
;   d: use normal "fight" animation when thrown (ignore "t" value)
;   j: jump animation
;        0: unarmed
;        1: thick knife
;        2: thin knife
;        3: sword
;        4: katana
;        5: rod
;        6: spear
;        7: hawk eye/sniper
;   t: throw animation
;        0: thick knife
;        1: thin knife
;        2: sword
;        3: katana
;        4: rod
;        5: spear
;        6: hawk eye/sniper
;        7: ???
;        8: fire skean
;        9: water edge
;        10: bolt edge
;        11: inviz edge
;        12: shadow edge
;        13: full moon/morning star/rising sun
;        14: boomerang
;        15: ???

CmdAnim_08:
@b9c5:  jsr     InitCmdAnim
        ldy     #2
        lda     ($76),y     ; item number
        inc
        tax
        lda     f:ItemJumpThrowAnim,x
        bpl     @b9df
        clr_a
        sta     ($76),y
        txa
        iny
        sta     ($76),y
        jmp     FightCmdAnim
@b9df:  and     #$0f
        clc
        adc     #$14
        jsr     _c1bbe1
        rts

; ------------------------------------------------------------------------------

; [ attack command $0d: sketch ]

CmdAnim_0d:
@b9e8:  inc     $ecbb
        jsr     InitCmdAnim
        lda     #$25
        jsr     _c1b890
        jsr     _c1b86b
        rts

; ------------------------------------------------------------------------------

; [ attack command $16: jump ]

CmdAnim_16:
@b9f7:  lda     ($78)       ; dragon horn effect
        and     #$02
        sta     $ec10
        jsr     _c19aa2
        lda     ($78)
        bpl     @ba18       ; branch if attacker is a character

; monster attacker
        ldy     #4
        lda     ($78),y     ; targets hit
        iny
        ora     ($78),y
        bne     @ba13       ; branch if something was hit
        lda     #$0b
        bra     @ba15
@ba13:  lda     #$09
@ba15:  jmp     _c1bbe1

; character attacker
@ba18:  ldy     #2
        lda     ($78),y     ; targets
        iny
        ora     ($78),y
        bne     @ba27       ; branch if there are targets
        lda     #$0a
        jmp     _c1bbe1
@ba27:  ldy     #1
        lda     ($78),y     ; attacker
        tax
        lda     f:CharEquipPtrs,x
        tax
        lda     $2b87,x     ; branch if right-hand item can be used with jump
        and     #$10
        bne     @ba4a
        lda     $2b9b,x     ; branch if left-hand item can be used with jump
        and     #$10
        bne     @ba44
        lda     #$ff
        bra     @ba4e
@ba44:  lda     $2b9a,x     ; left-hand item
        inc
        bra     @ba4e
@ba4a:  lda     $2b86,x     ; right-hand item
        inc
@ba4e:  tax
        lda     f:ItemJumpThrowAnim,x
        and     #$7f
        lsr4
        clc
        adc     #$2b
        jmp     _c1bbe1

; ------------------------------------------------------------------------------

; [ attack command $24: throw (umaro) ]

CmdAnim_24:
@ba5f:  jsr     InitCmdAnim
        jsr     CheckNullTarget
        bcs     @ba83
        clr_axy
@ba6a:  lda     $2ec6,x
        cmp     #$0d
        beq     @ba7d
        iny
        txa
        clc
        adc     #$20
        tax
        cpx     #$0080
        bne     @ba6a
        rts
@ba7d:  tya
        ldy     #1
        sta     ($78),y
@ba83:  jsr     NullTargetAnim
        bcc     @ba8d
        lda     #$36
        jmp     _c1b8a4
@ba8d:  rts

; ------------------------------------------------------------------------------

; [ attack command $23: tackle (umaro) ]

CmdAnim_23:
@ba8e:  jsr     InitCmdAnim
        jsr     NullTargetAnim
        bcc     @ba9b
        lda     #$35
        jsr     _c1bbe1
@ba9b:  rts

; ------------------------------------------------------------------------------

; [ attack command $1c: possess ]

CmdAnim_1c:
@ba9c:  jsr     NullTargetAnim
        bcc     @baa9
        lda     #$34
        jsr     _c1b890
        jsr     _c1b86b
@baa9:  rts

; ------------------------------------------------------------------------------

; [ attack command $0b: runic ]

CmdAnim_0b:
@baaa:  jsr     InitCmdAnim
        lda     ($78)
        bmi     @bab6
        lda     #$05
        jsr     _c1bbe1
@bab6:  rts

; ------------------------------------------------------------------------------

; [ attack command $25: display long battle dialog ]

CmdAnim_25:
@bab7:  jsr     InitCmdAnim
        lda     ($78)
        and     #$40
        bne     @bac5
        lda     #$37
        jsr     _c1bbe1
@bac5:  rts

; ------------------------------------------------------------------------------

; [ change battle bg ??? ]

_c1bac6:
land_nor_chg_long:
@bac6:  jsr     _c1baca
        rtl

; ------------------------------------------------------------------------------

; [ change battle bg ??? ]

_c1baca:
land_nor_chg:
@baca:  pha
        jsr     CopyPal
        lda     #$00
@bad0:  pha
        sta     $14
        sta     $16
        sta     $18
        jsr     _ebe0
        jsr     WaitFrame
        pla
        inc2
        cmp     #$20
        bne     @bad0
        pla
        pha
        jsr     _c11bdc
        pla
        sta     $ecb8
        clr_ax
        stx     $64b0
        stx     $64b2
        lda     #$1e
@baf7:  pha
        sta     $14
        sta     $16
        sta     $18
        jsr     _ebe0
        jsr     WaitFrame
        pla
        dec2
        bne     @baf7
        rts

; ------------------------------------------------------------------------------

; [ attack command $20: battle change ]

CmdAnim_20:
@bb0a:  jsr     InitCmdAnim
        lda     #$38
        jmp     _c1bbe1

; ------------------------------------------------------------------------------

; [ attack command $13: dance ]

CmdAnim_13:
@bb12:  jsr     InitCmdAnim
        lda     $ecb8       ; battle bg index
        tax
        lda     f:DanceNoChangeBGTbl,x
        bne     _bb2b
        ldy     #3
        lda     ($76),y
        cmp     #$ff
        beq     _bb2b
        jsr     _c1baca
; fall through

; ------------------------------------------------------------------------------

; [ attack command $10: rage ]

CmdAnim_10:
_bb2b:  inc     $ecbb
        jsr     InitCmdAnim
        lda     ($78)
        and     #$10
        bne     @bb40
        lda     ($78)
        bmi     @bb40
        lda     #$06
        jsr     _c1bbe1
@bb40:  jsr     CheckNullTarget
        bcc     @bb48
        jsr     MagicCmdAnim
@bb48:  rts

; ------------------------------------------------------------------------------

; [ attack command $1b: shock ]

CmdAnim_1b:
@bb49:  jsr     NullTargetAnim
        bcc     @bb53
        lda     #$07
        jsr     _c1bbe1
@bb53:  rts

; ------------------------------------------------------------------------------

; [ attack command $0e: control ]

CmdAnim_0e:
@bb54:  jsr     NullTargetAnim
        bcc     @bb61
        lda     #$39
        jsr     _c1b890
        jsr     _c1b86b
@bb61:  rts

; ------------------------------------------------------------------------------

; [ attack command $1a: health ]

CmdAnim_1a:
@bb62:  jsr     NullTargetAnim
        bcc     @bb75
        jsr     InitCmdAnim
        ldx     #$0f6c      ; pointer to animation data $011a (walk forward with arms up)
        jsr     _c1b7f5       ; execute single thread animation
        lda     #$27
        jsr     _c1bbe1
@bb75:  rts

; ------------------------------------------------------------------------------

; [ attack command $11: leap ]

CmdAnim_11:
@bb76:  jsr     InitCmdAnim
        jsr     NullTargetAnim
        bcc     @bb86
        lda     #$26
        jsr     _c1b890
        jsr     _c1b86b
@bb86:  rts

; ------------------------------------------------------------------------------

; [ attack command $05: steal ]

CmdAnim_05:
@bb87:  jsr     InitCmdAnim
        lda     ($78)
        bmi     @bb9b
        jsr     NullTargetAnim
        bcc     @bb9b
        lda     #$02
        jsr     _c1b8a4
        jmp     InitCmdAnim
@bb9b:  jsr     InitCmdAnim
        ldx     #$1626
        jsr     _c1b7f5       ; execute single thread animation
        rts

; ------------------------------------------------------------------------------

; [ attack command $06: capture ]

CmdAnim_06:
@bba5:  jsr     InitCmdAnim
        lda     ($78)       ; attacker
        bmi     @bbdb       ; return if a monster
        jsr     NullTargetAnim
        bcc     @bbdb
        jsr     GetAttackerID
        lda     $10
        and     #$03
        tax
        phx
        lda     $62a4
        bne     @bbc2
        inc     $61ae,x
@bbc2:  lda     #$0e
        jsr     _c1b8a4
        jsr     FightCmdAnim
        lda     #$0f
        jsr     _c1b8a4
        plx
        lda     $62a4
        bne     @bbd8
        stz     $61ae,x
@bbd8:  jsr     InitCmdAnim
@bbdb:  rts

; ------------------------------------------------------------------------------

; [ attack command $04: revert ]

CmdAnim_04:
@bbdc:  jsr     InitCmdAnim
        lda     #$01
; fallthrough

; ------------------------------------------------------------------------------

; [  ]

_c1bbe1:
@bbe1:  jsr     _c1b8a4
        jmp     _c1b86b

; ------------------------------------------------------------------------------

; [ attack command $03: morph ]

CmdAnim_03:
@bbe7:  jsr     InitCmdAnim
        clr_a
        bra     _c1bbe1

; ------------------------------------------------------------------------------

; [ attack command $18: gp rain ]

CmdAnim_18:
@bbed:  jsr     NullTargetAnim
        bcc     @bbf6
        lda     #$24
        bra     _c1bbe1
@bbf6:  rts

; ------------------------------------------------------------------------------

; [ error animation if there are no valid targets ]

; return carry set if no error

NullTargetAnim:
@bbf7:  jsr     CheckNullTarget
        bcs     @bc11
        jsr     InitCmdAnim
        lda     ($78)
        bmi     @bc11
        ldx     #$0f6c      ; pointer to animation data $011a (walk forward with arms up)
        jsr     _c1b7f5       ; execute single thread animation
        jsr     _c1b86b
        jsr     PopMonsterPalID
        clc
        rts
@bc11:  sec
        rts

; ------------------------------------------------------------------------------

; [ attack command $09: tools ]

CmdAnim_09:
@bc13:  jsr     InitCmdAnim
        jsr     NullTargetAnim
        bcc     @bc34
        jsr     InitCmdAnim
        ldx     #$11f0
        stx     $1e
        ldy     #2
        lda     ($76),y
        jsr     InitAnimProp
        jsr     ExecAnim
        jsr     PopMonsterPalID
        jsr     _c1b86b
@bc34:  rts

; ------------------------------------------------------------------------------

; [ init command animation ]

InitCmdAnim:
@bc35:  jsr     PushMonsterPalID
        jsr     SetAnimTargets
        jsr     _c1ab8b       ; reset attacker graphical action
        jmp     _c19aa2

; ------------------------------------------------------------------------------

; [ attack command $01: item ]

CmdAnim_01:
@bc41:  jsr     InitCmdAnim
        lda     ($78)
        bmi     @bc51
        ldx     #$0f6c      ; pointer to animation data $011a (walk forward with arms up)
        jsr     _c1b7f5       ; execute single thread animation
        jsr     _c1b86b
@bc51:  jsr     CheckNullTarget
        bcc     @bc85
        ldy     #2
        lda     ($76),y     ; item number
        cmp     #$e0
        bcc     @bc64       ; branch if not a usable item
        sec
        sbc     #$e0
        bra     @bc66
@bc64:  lda     #$e0
@bc66:  longa
        asl
        tax
        lda     f:ItemAnimPtrs,x
        tax
        shorta0
        cpx     #$ffff      ; branch if no animation
        beq     @bc85
        phx
        jsr     _c1ab43       ; init single thread animation
        plx
        stx     $1e
        clr_a
        jsr     InitAnimProp
        jsr     ExecAnim
@bc85:  jmp     PopMonsterPalID

; ------------------------------------------------------------------------------

; [ attack command $12$15/$1e/$1f: mimic/def./ai/random attack ]

CmdAnim_12:
CmdAnim_15:
CmdAnim_1e:
CmdAnim_1f:
@bc88:  rts

; ------------------------------------------------------------------------------

; [ get attacker number ]

;    A: attacker number (out)
; +$10: attacker number (out)
;  msb: ??? (out)

GetAttackerID:
@bc89:  lda     $62d0
        beq     @bc93
        jsr     _c1aaad
        bra     @bca1
@bc93:  ldx     #$2c6e
        stx     $10
        ldy     #$0001
        lda     ($10)
        and     #$80
        ora     ($10),y
@bca1:  sta     $10
        stz     $11
        rts

; ------------------------------------------------------------------------------

; [ get target number ]

; $12: target number (out)
; msb: 0 for character, 1 for monster

GetTargetID:
@bca6:  lda     $613e       ; branch if there are no monster targets
        beq     @bcb6
        jsr     _c11a0f       ; get bit number
        clc
        adc     #$04
        ora     #$80
        sta     $12
        rts
@bcb6:  lda     $613d       ; character targets
        jsr     _c11a0f       ; get bit number
        sta     $12
        rts

; ------------------------------------------------------------------------------

; [ save character/monster positions ]

PushObjPos:
@bcbf:  clr_axy
        longa
@bcc4:  lda     $61b7,x     ; save character positions
        sta     $813b,y
        lda     $61b9,x
        sta     $813d,y
        iny4
        txa
        clc
        adc     #$0020
        tax
        cpx     #$0080
        bne     @bcc4
        clr_ax
@bce1:  lda     $80c3,x     ; save monster positions
        sta     $813b,y
        lda     $80cf,x
        sta     $813d,y
        iny4
        inx2
        cpx     #$000c
        bne     @bce1
        clr_ax
@bcfa:  lda     $800f,x     ; save center/bottom positions
        sta     $816b,x
        inx2
        cpx     #$003c
        bne     @bcfa
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ restore character/monster positions ]

PopObjPos:
@bd0b:  clr_axy
        longa
@bd10:  lda     $813b,y
        sta     $61b7,x
        lda     $813d,y
        sta     $61b9,x
        iny4
        txa
        clc
        adc     #$0020
        tax
        cpx     #$0080
        bne     @bd10
        clr_ax
@bd2d:  lda     $813b,y
        sta     $80c3,x
        lda     $813d,y
        sta     $80cf,x
        iny4
        inx2
        cpx     #$000c
        bne     @bd2d
        clr_ax
@bd46:  lda     $816b,x
        sta     $800f,x
        inx2
        cpx     #$003c
        bne     @bd46
        shorta0
        jsr     UpdateDrawOrder
        rts

; ------------------------------------------------------------------------------

; [ init block animation ??? ]

_c1bd5a:
set_defend:
@bd5a:  ldy     #8
        lda     ($78),y     ;
        cmp     #$04
        bcs     @bd9a       ; branch if a monster

; character
        tay
        asl
        tax
        phx
        asl4
        tax
        longa
        lda     $61b7,x
        sta     $14
        lda     $61b9,x
        sta     $16
        plx
        lda     $8033,x
        sta     $24
        lda     $803b,x
        sta     $26
        lda     $8043,x
        sta     $28
        shorta0
        lda     $7b10,y
        beq     @bd95
        ldx     #$000c
        bra     @bdd1
@bd95:  ldx     #$0000
        bra     @bdd1

; monster
@bd9a:  and     #$7f
        sec
        sbc     #$04
        asl
        tax
        longa
        lda     $800f,x
        sta     $14
        lda     $8027,x
        sta     $16
        lda     $800f,x
        sta     $24
        lda     $801b,x
        sta     $26
        lda     $8027,x
        sta     $28
        shorta0
        lda     $80f3,x
        eor     $617e,x
        and     #$01
        bne     @bdce
        ldx     #$000c
        bra     @bdd1
@bdce:  ldx     #$0000
@bdd1:  phx
        stx     $22
        ldy     #6
        lda     ($78),y
        sta     $18
        stz     $1a
@bddd:  lsr     $18
        bcc     @be33
        lda     $22
        tax
        longa
        lda     f:BlockOffsetTbl,x
        sta     $10
        lda     f:BlockOffsetTbl+2,x
        sta     $12
        lda     $22
        clc
        adc     #$0004
        sta     $22
        shorta0
        lda     $1a
        asl
        tay
        asl4
        tax
        longa
        lda     $14
        clc
        adc     $10
        sta     $61b7,x
        lda     $16
        clc
        adc     $12
        sta     $61b9,x
        lda     $24
        clc
        adc     $10
        sta     $8033,y
        lda     $26
        clc
        adc     $12
        sta     $803b,y
        lda     $28
        clc
        adc     $12
        sta     $8043,y
        shorta0
@be33:  inc     $1a
        lda     $1a
        cmp     #$04
        bne     @bddd
        plx
        stx     $22
        ldy     #7
        lda     ($78),y
        sta     $18
        stz     $1a
@be47:  lsr     $18
        bcc     @be98
        lda     $22
        tax
        longa
        lda     f:BlockOffsetTbl,x
        sta     $10
        lda     f:BlockOffsetTbl+2,x
        sta     $12
        lda     $22
        clc
        adc     #$0004
        sta     $22
        shorta0
        lda     $1a
        asl
        tax
        longa
        lda     $14
        clc
        adc     $10
        sta     $80c3,x
        lda     $16
        clc
        adc     $12
        sta     $80cf,x
        lda     $24
        clc
        adc     $10
        sta     $800f,x
        lda     $26
        clc
        adc     $12
        sta     $801b,x
        lda     $28
        clc
        adc     $12
        sta     $8027,x
        shorta0
@be98:  inc     $1a
        lda     $1a
        cmp     #$06
        bne     @be47
        rts

; ------------------------------------------------------------------------------

BlockOffsetTbl:
@bea1:  .word   $fff0,$0000,$fff8,$0008,$fff8,$fff8,$0010,$0000
        .word   $0008,$0008,$0008,$fff8

; ------------------------------------------------------------------------------

; [ load block sound effect and palette ]

InitBlockAnim:
@beb9:  phx
        pha
        tax
        lda     f:BlockSfxTbl,x
        sta     $e9e7
        lda     f:BlockPalTbl,x
        jsr     LoadBlockPal
        pla
        plx
        rts

; ------------------------------------------------------------------------------

; [ attack command $00: fight ]

FightCmdAnim:
CmdAnim_00:
anim_command_attack:
@becd:  lda     ($78)       ; monster weapon attack
        and     #$01
        sta     $618a       ; monster attack flag
        sta     $ecbb
        jsr     PushMonsterPalID
        jsr     SetAnimTargets
        jsr     _c19aa2
        lda     ($78)       ; flash screen (critical)
        and     #$20
        sta     $6196
        ldx     #$0400      ; size = $0400
        stx     $10
        ldx     #$b400      ; source = $7fb400 (blocking graphics)
        lda     #$7f
        ldy     #$2400      ; destination = $2400 (battle animation sprite graphics)
        jsr     WaitTfrVRAM
        lda     $618a       ; branch if monster attack
        bne     @beff
        jsr     _c1b86b
@beff:  ldy     #2
        lda     ($76),y     ; left-hand weapon flag
        and     #$80
        sta     $7af4
        iny
        lda     ($76),y     ; weapon animation number
        sta     $7af5
        jsr     GetAttackerID
        lda     $7af5
        jsr     InitWeaponAnim
        lda     $6271       ; weapon sound effect
        sta     $e9e7       ; default animation sound effect
        jsr     PushObjPos
        jsr     _c1bd5a
        jsr     GetAttackerID
        jsr     GetTargetID
        lda     $10
        and     #$7f        ; attacker
        asl
        tax
        longa
        lda     f:_c2ce8b,x   ; pointer to animation thread data (+$7e64de)
        tax
        shorta0
        lda     $7b2d       ; weapon graphics frame width
        sta     $6a2f,x     ; animation thread frame width
        lda     $7b2e       ; weapon graphics frame height
        sta     $6a30,x     ; animation thread frame height
        lda     #$06
        sta     $74d5,x     ; palette 3
        lda     $10
        and     #$03        ; attacker
        tay
        lda     $7af4       ; left-hand flag
        asl
        rol
        and     #$01
        eor     $7b10,y     ; attacker facing direction (characters only)
        and     #$01
        tay
        lda     $10         ; branch if attacker is a character
        bpl     @bf65
        lda     #$62        ; use script $62 for monsters
        bra     @bf68
@bf65:  lda     $626b,y     ; weapon animation script
@bf68:  longa
        asl
        phx
        tax
        lda     f:AttackAnimScriptPtrs,x
        plx
        sta     $22
        inc2
        sta     $6a31,x
        shorta0
        lda     #^AttackAnimScript
        sta     $24
        sta     $6a33,x
        lda     [$22]       ; animation speed
        lsr4
        inc
        sta     $6a34,x
        stz     $64e7,x     ; clear sprite layer priority
        lda     #$01
        sta     $6a35,x     ; thread frame counter
        stz     $6a36,x     ; thread index
        lda     $10
        bpl     @bfad       ; branch if attacker is a character
        and     #$0f
        sec
        sbc     #$04
        asl
        tay
        lda     $80f3,y
        eor     $617e,y
        eor     #$01
        bra     @bfb1
@bfad:  tay
        lda     $7b10,y
@bfb1:  asl6
        and     #$40
        sta     $6f87,x     ; h flip
        phx
        lda     $7af4       ; left-hand flag
        asl
        rol
        and     #$01
        sta     $6f88,x     ;
        stz     $6f8c,x     ; frame offset
        stz     $74d8,x     ;
        lda     #$01
        sta     $6f8d,x     ; frame offset counter
        lda     #$60
        sta     $6a37,x     ; sprite tile number
        lda     $10
        sta     $6a38,x     ; attacker
        lda     $12
        sta     $6a39,x     ; target
        jsr     CalcAttackerPos
        longa
        lda     $14         ; x position
        sta     $6f7e,x
        sta     $6a3a,x
        lda     $16         ; y position
        sta     $6f80,x
        sta     $6a3c,x
        stz     $74ce,x     ; clear xy offset
        stz     $74d0,x
        shorta0
        jsr     CalcTargetPos
        longa
        lda     $14         ; x position
        sta     $6f82,x
        lda     $16         ; y position
        sta     $6f84,x
        shorta0
        lda     #$01
        sta     $6a2e,x     ; thread is active
        lda     $10
        bmi     @c01f       ; branch if ???
        lda     #$30
        sta     $6f86,x     ; make animation sprite high priority
@c01f:  lda     $12
        bmi     @c05c       ; branch if target is a monster ???
        clc
        adc     #$0a
        tay
        lda     ($78),y     ; target character block type
        beq     @c05c       ; branch if not blocked
        dec
        jsr     InitBlockAnim
        pha
        lda     $10
        bpl     @c037       ; branch if attacker is a character
        stz     $6a2e,x     ; deactivate animation thread
@c037:  pla
        phx
        tax
        lda     f:BlockAnimScriptTbl,x
        sta     $626e       ; hit animation script
        stz     $618a       ; clear monster attack flag
        plx
        lda     #$40        ; tile $40
        sta     $14
        lda     $6270
        and     #$7f
        cmp     #$01
        bne     @c065       ; branch if not a star or gambler type
        lda     $6270
        and     #$80
        sta     $6270
        bra     @c065
@c05c:  lda     #$60        ; tile $60
        sta     $14
        lda     $6270       ; branch if weapon was not thrown
        bpl     @c07b
@c065:  lda     $12
        and     #$7f
        asl
        tax
        longa
        lda     f:_c2ce8b,x   ; pointer to animation thread data (+$7e64de)
        clc
        adc     #$0010      ; pointer to next sprite thread
        tax
        shorta0
        bra     @c084
@c07b:  lda     #$60        ; tile $60
        sta     $14
        ldx     #$0500      ; pointer to bg1 thread
        lda     #$01
@c084:  ora     #$30
        sta     $6f86,x     ; tile priority = 3, thread layer is bg1
        stx     $7af6
        lda     $12         ; target
        bmi     @c09c       ; branch if a monster
        lda     #$02
        sta     $74d2,x     ; target width = 2 (character)
        lda     #$03
        sta     $74d3,x     ; target height = 3 (character)
        bra     @c0af
@c09c:  and     #$7f
        sec
        sbc     #$04
        asl
        tay
        lda     $812f,y     ; monster width
        sta     $74d2,x
        lda     $8130,y     ; monster height
        sta     $74d3,x
@c0af:  lda     $7b2f       ; hit graphics width
        sta     $6a2f,x     ; thread frame width
        lda     $7b30       ; hit graphics height
        sta     $6a30,x     ; thread frame height
        lda     #$06
        sta     $74d5,x     ; palette 3
        stz     $22
        stz     $23
        lda     $618a       ; branch if not monster attack
        beq     @c0d7
        lda     $626e       ; hit animation script
        cmp     #$60
        bcc     @c0d7       ; branch if less than $60
        phx
        ldx     #$0200      ; add $0200 to script number
        stx     $22
        plx
@c0d7:  lda     $626e
        longa
        clc
        adc     $22
        asl
        phx
        tax
        lda     f:AttackAnimScriptPtrs,x
        plx
        sta     $22
        inc2
        sta     $6a31,x     ; ++$22 = script pointer
        shorta0
        lda     #^AttackAnimScript
        sta     $24
        sta     $6a33,x
        lda     [$22]
        lsr4
        inc
        sta     $6a34,x     ; animation speed
        stz     $64e7,x     ; low sprite priority
        lda     #$01
        sta     $6a35,x     ; animation frame counter
        stz     $6a36,x     ; thread index
        lda     $14         ; tile number
        sta     $6a37,x
        stx     $14
        plx
        lda     $6f87,x     ; weapon thread h flip
        ldx     $14
        sta     $6f87,x     ; hit thread h flip
        stz     $6f88,x     ;
        stz     $6f8c,x     ; clear frame offset
        stz     $74d8,x     ; movement speed
        lda     #$01
        sta     $6f8d,x     ; frame offset counter
        lda     $10
        sta     $6a38,x     ; attacker
        lda     $12
        sta     $6a39,x     ; target
        jsr     CalcAttackerPos
        longa
        lda     $14
        sta     $6f7e,x     ; x position
        lda     $16
        sta     $6f80,x     ; y position
        stz     $74ce,x     ; clear thread offset
        stz     $74d0,x
        shorta0
        jsr     CalcTargetPos
        longa
        lda     $14
        sta     $6f82,x     ; x position
        sta     $6a3a,x
        lda     $16
        sta     $6f84,x     ; y position
        sta     $6a3c,x
        shorta0
        lda     $12         ; target
        bmi     @c176       ; branch if a monster
        and     #$03
        clc
        adc     #$0a
        tay
        lda     ($78),y     ; block type
        sta     $629b,y     ;
        bne     @c188
@c176:  ldy     #4
        lda     ($78),y     ; targets hit
        iny
        ora     ($78),y     ; targets reflected off of
        bne     @c188       ; branch if something was hit or reflected off of
        lda     #$0d
        sta     $e9e7       ; nothing hit, set default animation sound effect (whiff)
        clr_a                 ; deactivate hit animation thread
        bra     @c18a
@c188:  lda     #$01        ; activate hit animation thread
@c18a:  sta     $6a2e,x
        lda     $6196       ; branch if not flashing screen (critical)
        beq     @c1c6
        stz     $10         ; attacker
        stz     $613f       ; character/monster number
        lda     #$01
        sta     $22
        lda     #^AttackAnimScript
        sta     $26
        longa
        lda     f:AttackAnimScriptPtrs+$01a8*2     ; ++$22 = pointer to animation script $01a8
        sta     $24
        shorta0
        lda     #$01        ; frame delay = 1
        sta     $1c
        ldx     $7af6
        phx
        ldx     #$0510      ; bg3 thread
        phx
        jsr     _c1b1c4       ; create thread (screen flash)
        plx
        lda     $6f86,x     ; set thread layer to bg3
        ora     #$02
        sta     $6f86,x
        plx
        stx     $7af6
@c1c6:  jsr     UpdateDrawOrder
        stz     $7b67       ;
        jsr     WaitFrame
        lda     $6167       ; bg1 palette
        jsr     LoadBG1AnimPal
        jsr     ClearBG1Tiles
        lda     $896f
        ora     #$10
        sta     $896f       ; use 16x16 tiles for bg1
        jsr     InitWeaponType
        jsr     ResetSpritePriority
        jsr     GetTargetID
        jsr     UpdateSpritePriority
        jsr     ExecAnimScript
        ldy     #4
        lda     ($78),y     ; targets hit
        bne     @c201       ; branch if targets were hit
        iny2
        lda     ($78),y     ; targets reflected off of
        beq     @c201       ; branch if no targets were reflected off of
        lda     #$20
@c1fe:  jsr     WaitA       ; wait 32 frames
@c201:  jsr     PopObjPos
        jsr     ClearBG1Tiles
        jsr     ResetSpritePriority
        lda     $896f
        and     #$af
        sta     $896f
        clr_ax
        stx     $64b4
        stx     $64b6
        lda     #$01
        sta     $7b0e       ; 1 monster thread
        sta     $7b0f       ; 1 character thread
        lda     $618a       ; branch if not monster attack
        beq     @c232
        jsr     _c1b86b
        bra     @c232
; *** inaccessible code ***
@c22c:  jsr     PopObjPos
        jsr     PopMonsterPalID
; *************************
@c232:  jsr     _c1ab8b       ; reset attacker graphical action
        stz     $6196       ; clear flash screen flag (critical)
        stz     $618a       ; clear monster attack flag
        rts

; ------------------------------------------------------------------------------

; [ set color add/sub data ]

; +$10: shbo4321 mmss--cd (+$2130)
;         s: 0 = add, 1 = subtract
;         h: 0 = full add/sub, 1 = half add/sub
;         bo4321: layers affected by add/sub
;         m: 0
;         s: 0
;         c: 0 = fixed color add/sub, 1 = subscreen add/sub
;         d: 0
;    A: ---o4321 subscreen designation ($212d)
;         o4321: layers to add/sub

SetColorMathHDMA:
@c23c:  pha
        longa
        clr_ax
        lda     $10
@c243:  sta     $8994,x     ; set hdma data
        sta     $89f8,x
        sta     $8a5c,x
        sta     $8ac0,x
        sta     $8b24,x
        sta     $8b88,x
        inx4
        cpx     #$0064
        bne     @c243
        sta     $8bec
        shorta0
        pla
        sta     $898e       ; set subscreen designation
        rts

; ------------------------------------------------------------------------------

; [ weapon animation init ]

InitWeaponType:
@c269:  lda     $6270
        and     #$7f
        asl
        tax
        jmp     (.loword(WeaponTypeTbl),x)

; jump table for weapon animation init
WeaponTypeTbl:
@c273:  .addr   WeaponType_00
        .addr   WeaponType_01
        .addr   WeaponType_02
        .addr   WeaponType_03
        .addr   WeaponType_04

; ------------------------------------------------------------------------------

; 2: full moon, boomerang, rising sun, wing edge
WeaponType_02:
@c27d:  lda     #$02
        sta     $7b0e       ; 2 monster threads
        sta     $7b0f       ; 2 character threads
        rts

; ------------------------------------------------------------------------------

; 0: normal
WeaponType_00:
@c286:  ldx     #$0102      ; add bg1
        stx     $10
        lda     #$12        ; affect sprite and bg2
        jsr     SetColorMathHDMA
        lda     #$02
        sta     $7b0e       ; 2 monster threads
        sta     $7b0f       ; 2 character threads
        rts

; ------------------------------------------------------------------------------

; 1: all star-type weapons, all gambler-type weapons (shadow sprites)
WeaponType_01:
@c299:  ldx     $7af6
        ldy     #$0010
        lda     $6a38,x
        bmi     @c2d1
        lda     $6a39,x
        bmi     @c2d1
        lda     $201f
        cmp     #$03
        bne     @c2c9
@c2b0:  lda     $6a38,x
@c2b3:  cmp     #$02
        bcc     @c2c0
        lda     $6a39,x
@c2ba:  cmp     #$02
@c2bc:  bcc     @c2d1
        bra     @c2c9
@c2c0:  lda     $6a39,x
        cmp     #$02
        bcc     @c2c9
        bra     @c2d1
@c2c9:  lda     $6f87,x
        eor     #$40
        sta     $6f87,x
@c2d1:  lda     $64de,x
        sta     $64ee,x
        sta     $64fe,x
        lda     $6a2e,x
@c2dd:  sta     $6a3e,x
        sta     $6a4e,x
        lda     $6f7e,x
        sta     $6f8e,x
        sta     $6f9e,x
        lda     $74ce,x
        sta     $74de,x
        sta     $74ee,x
        inx
        dey
        bne     @c2d1
        ldx     $7af6
        lda     $6a35,x
        inc2
        sta     $6a45,x
        inc2
        sta     $6a55,x
        lda     #$05
        sta     $7b0e       ; 5 monster threads
        sta     $7b0f       ; 5 character threads
        rts

; ------------------------------------------------------------------------------

; 3: atma weapon 3 (shadow sprites)
WeaponType_03:
@c312:  jsr     GetAttackerID
        lda     $10
        and     #$7f
        asl
        tax
        longa
        lda     f:_c2ce8b,x   ; pointer to animation thread data (+$7e64de)
        tax
        phx
        ldy     #$0008
@c326:  lda     $64de,x     ; copy thread data
        sta     $64ee,x
        sta     $64fe,x
        lda     $6a2e,x
        sta     $6a3e,x
        sta     $6a4e,x
        lda     $6f7e,x
        sta     $6f8e,x
        sta     $6f9e,x
        lda     $74ce,x
        sta     $74de,x
        sta     $74ee,x
        inx2
        dey
        bne     @c326
        shorta0
        plx
        lda     $6a35,x     ; frame counter
        inc2
        sta     $6a45,x
        inc2
        sta     $6a55,x
        ldx     #$0202      ; add bg2
        stx     $10
        lda     #$10        ; affect bg1
        jsr     SetColorMathHDMA
        lda     #$05
        sta     $7b0e       ; 5 monster threads
        sta     $7b0f       ; 5 character threads
        rts

; ------------------------------------------------------------------------------

; 4: atma weapon 1 & 2
WeaponType_04:
@c373:  ldx     #$0202      ; add bg2
        stx     $10
        lda     #$10        ; affect bg1
        jsr     SetColorMathHDMA
        lda     #$02
        sta     $7b0e       ; 2 monster threads
        sta     $7b0f       ; 2 character threads
        rts

; ------------------------------------------------------------------------------

; [ make all character/monster sprites priority 3 (long access) ]

ResetSpritePriority_far:
@c386:  jsr     ResetSpritePriority
        rtl

; ------------------------------------------------------------------------------

; [ make all character/monster sprites priority 3 ]

ResetSpritePriority:
@c38a:  lda     #$30
        sta     $61bd       ; character sprite layer priority
        sta     $61dd
        sta     $61fd
        sta     $621d
        clr_ax
        lda     #$31
@c39c:  sta     $80dc,x     ; monster sprite layer priority
        inx2
        cpx     #12
        bne     @c39c
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1c3a7:
y_pri_set_long:
@c3a7:  jsr     _c1c3ab
        rtl

; ------------------------------------------------------------------------------

; [  ]

_c1c3ab:
y_pri_set:
@c3ab:  stx     $10
        clr_axy
        longa
@c3b2:  lda     $8043,x
        cmp     $10
        bcs     @c3c3
        shorta
        lda     #$20
        sta     $61bd,y
        clr_a
        longa
@c3c3:  tya
        clc
        adc     #$0020
        tay
        inx2
        cpx     #$0008
        bne     @c3b2
        clr_ax
@c3d2:  lda     $8027,x
        cmp     $10
        bcs     @c3e2
        shorta
        lda     #$21
        sta     $80dc,x
        longa
@c3e2:  inx2
        cpx     #$000c
        bne     @c3d2
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1c3ed:
attack_pri_set_main_long:
@c3ed:  jsr     _c1c3fa
        rtl

; ------------------------------------------------------------------------------

; [ update character/monster layer priority (far) ]

UpdateSpritePriority_far:
@c3f1:  jsr     UpdateSpritePriority
        rtl

; ------------------------------------------------------------------------------

; [ update character/monster layer priority ]

; $12: first sprite behind bg

UpdateSpritePriority:
@c3f5:  jsr     _c1aaa5
        lda     $12

_c1c3fa:
attack_pri_set_main:
@c3fa:  and     #$7f
        ldx     #0
@c3ff:  cmp     $7a21,x     ; character/monster index (in sprite priority order)
        beq     @c40e
        inx4
        cpx     #$0028
        bne     @c3ff
        rts
@c40e:  lda     $7a21,x     ; character/monster index
        cmp     #4
        bcc     @c423       ; branch if a character
        sec
        sbc     #4
        and     #$07
        asl
        tay
        lda     #$21
        sta     $80dc,y     ; layer priority = 2
        bra     @c42e
@c423:  asl5
        tay
        lda     #$20
        sta     $61bd,y     ; layer priority = 2
@c42e:  inx4
        cpx     #$0028
        bne     @c40e
        rts

; ------------------------------------------------------------------------------

; $c0 monster
_c438:  ply
        lda     $812f,y
        asl2
        sta     $14
        stz     $15
        longa
        lda     $14
        clc
        adc     #$0020
        sta     $14
        shorta0
        phx
        lda     $10
        and     #$03
        tax
        lda     $7b10,x
        and     #$01
        bne     @c46e
        longa
        lda     $800f,y
        clc
        adc     $14
        sta     $14
        lda     $8027,y
        sta     $16
        clr_a
        plx
        rts
@c46e:  longa
        lda     $800f,y
        sec
        sbc     $14
        sta     $14
        lda     $8027,y
        sta     $16
        clr_a
        plx
        rts

; ------------------------------------------------------------------------------

; [ get magitek y-offset ]

GetMagitekOffset:
        .a16
@c480:  lda     $64ba       ; branch if magitek mode is disabled
        beq     @c48a
        ldy     #$fff4      ; +$18 = -12
        bra     @c48b
@c48a:  tay                 ; +$18 = 0
@c48b:  sty     $18
        rts

; ------------------------------------------------------------------------------

; [ calculate target position ]

;  $12: target
; +$14: x position (out)
; +$16: y position (out)

CalcTargetPos:
        .a8
@c48e:  jsr     GetMagitekOffset
        lda     #$01
        sta     $14
        lda     $12         ; target
        bra     _c4a0

; ------------------------------------------------------------------------------

; [ calculate attacker position ]

;  $10: attacker
; +$14: x position (out)
; +$16: y position (out)

CalcAttackerPos:
@c499:  jsr     GetMagitekOffset
        stz     $14
        lda     $10         ; attacker

get_pointer_main:
_c4a0:  sta     $ecb1       ; characer/monster number
        jmi     @c58f       ; branch if a monster

; character
        asl
        tay
        phy
        ldy     #$0001
        lda     [$22],y     ; 2nd byte of animation script header
        and     #$e0
        beq     @c51b
        cmp     #$20
        beq     @c519
        cmp     #$40
        beq     @c4e6
        cmp     #$e0
        beq     @c4e1
        cmp     #$80
        beq     @c540
        cmp     #$c0
        beq     @c540
        cmp     #$a0
        bne     @c4e4

; $60 (align with bg3 thread)
        lda     $14
        beq     @c4ee       ; branch if attacker
        longa
        lda     $7b22       ; x position = bg3 animation x position
        sta     $14
        lda     $7b24       ; y position = bg3 animation y position
        sta     $16
        shorta0
        ply
        rts

@c4e1:  jmp     @c573       ; $e0
@c4e4:  bra     @c4ee       ; $a0

; $40 (align to top of attacker/target)
@c4e6:  lda     #$10        ; +$16 = 16
        sta     $16
        stz     $17
        bra     @c525

; $a0
@c4ee:  stz     $ecb1
        stz     $ecb2
@c4f4:  ply
        longa
        lda     $8033,y     ; character center x
        clc
        adc     $ecb1       ;
        bpl     @c503
        clr_a
        bra     @c50b
@c503:  cmp     #$00fc
        bcc     @c50b
        lda     #$00fc
@c50b:  sta     $14
        lda     $8043,y
        clc
        adc     $18
        sta     $16
        shorta0
        rts

@c519:  bra     @c55f       ; $20

; $00 (align to bottom of attacker/target)
@c51b:  lda     $6a30,x     ; +$16 = frame height (in pixels)
        asl3
        sta     $16
        stz     $17
@c525:  ply
        longa
        lda     $8033,y     ; x position = character center x coordinate
        sta     $14
        lda     $8043,y     ; y position = character bottom y coordinate + 8 - frame height + magitek offset
        clc
        adc     #$0008
        sec
        sbc     $16
        clc
        adc     $18
        sta     $16
        shorta0
        rts

; $80, $c0 (align to front of attacker)
@c540:  phx
        lda     $10         ; attacker
        and     #$03
        tax
        lda     $7b10,x     ; facing direction
        and     #$01
        beq     @c552       ; branch if not flipped
        ldx     #$ffe8
        bra     @c555
@c552:  ldx     #$0018
@c555:  stx     $ecb1
        plx
        lda     $14
        beq     @c4ee
        bra     @c4f4

; $20 (align to center of attacker/target)
@c55f:  ply
        longa
        lda     $8033,y     ; x position = character center x coordinate
        sta     $14
        lda     $803b,y     ; y position = character center y coordinate + magitek offset
        clc
        adc     $18
        sta     $16
        shorta0
        rts

; $e0 (capture)
@c573:  ply
        longa
        lda     $8033,y     ; x position = character center x coordinate - 8
        sec
        sbc     #$0008
        sta     $14
        lda     $803b,y     ; y position = character center y coordinate + magitek offset - 8
        clc
        adc     $18
        sec
        sbc     #$0008
        sta     $16
        shorta0
        rts

; monster
@c58f:  and     #$7f
        sec
        sbc     #$04
        asl
        tay
        phy
        ldy     #$0001
        lda     [$22],y     ; 2nd byte of animation script header
        and     #$e0
        beq     @c5cb
        cmp     #$20
        beq     @c5c8
        cmp     #$40
        beq     @c5c5
        cmp     #$80
        beq     @c5d1
        cmp     #$c0
        beq     @c5ce
        cmp     #$a0
        bne     @c5c8

; $a0
        longa
        lda     $7b22
        sta     $14
        lda     $7b24
        sta     $16
        shorta0
        ply
        rts

@c5c5:  jmp     @c60f       ; $40
@c5c8:  jmp     @c642       ; $20, $60, $e0
@c5cb:  jmp     @c620       ; $00
@c5ce:  jmp     _c438       ; $c0

; $80
@c5d1:  ply
        lda     $812f,y
        asl2
        clc
        adc     #$10
        sta     $14
        stz     $15
        phx
        lda     $10
        and     #$03
        tax
        lda     $7b10,x
        and     #$01
        bne     @c5fd
        longa
        lda     $800f,y
        clc
        adc     $14
        sta     $14
        lda     $8027,y
        sta     $16
        clr_a
        plx
        rts
@c5fd:  longa
        lda     $800f,y
        sec
        sbc     $14
        sta     $14
        lda     $8027,y
        sta     $16
        clr_a
        plx
        rts

; $40 monster
@c60f:  ply
        longa
        lda     $800f,y
        sta     $14
        lda     $80cf,y
        sta     $16
        shorta0
        rts

; $00 monster
@c620:  lda     $6a30,x
        asl3
        sta     $16
        stz     $17
        ply
        longa
        lda     $800f,y
        sta     $14
        lda     $8027,y
        clc
        adc     #$0008
        sec
        sbc     $16
        sta     $16
        shorta0
        rts

@c642:  ply
        longa
        lda     $800f,y     ; x position = monster center x position
        sta     $14
        lda     $801b,y     ; y position = monster center y position
        sta     $16
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ execute battle animation script ]

ExecAnimScript:
@c653:  clr_ax
@c655:  stz     $6095,x     ; clear bg scrolling frequency/amplitude
        inx
        cpx     #$0012
        bne     @c655
        jsr     UpdateDrawOrder
        stz     $ebfa       ;
        stz     $60a7       ; enable bg1 animation graphics
        stz     $60a8       ; enable bg3 animation graphics
        clr_ax
@c66c:  stz     $6095,x     ; clear bg scrolling frequency/amplitude (again)
        inx
        cpx     #$0012
        bne     @c66c
        clr_axy
@c678:  lda     $61bc,x     ; save character palette numbers
        sta     $616e,y
        txa
        clc
        adc     #$20
        tax
        iny
        cpy     #$0004
        bne     @c678
        clr_ax
@c68b:  lda     $80db,x     ; save monster palette numbers
        sta     $616e,y
        inx2
        iny
        cpy     #$000a
        bne     @c68b
        clr_ax
@c69b:  stz     $6085,x     ; clear palette shift counters
        inx
        cpx     #$0010
        bne     @c69b
@c6a4:  clr_ax
        stz     $7b14       ; clear the number of active threads
@c6a9:  stz     $9b         ;
        lda     $6a2e,x     ; branch if thread is not active (next thread)
        beq     @c708
        lda     $99         ; branch if sprite animation threads are not paused
        beq     @c6b9
        cpx     #$0500
        bcc     @c708       ; branch if not a bg or esper (next thread)
@c6b9:  inc     $7b14       ; increment number of active threads
        dec     $6a35,x     ; decrement animation frame counter
        bne     @c708       ; branch if it didn't reach 0 (next thread)
        lda     $6a34,x     ; animation speed
        sta     $6a35,x     ; reset frame counter
        ldy     $6a31,x     ; set script pointer
        sty     $5b
        lda     $6a33,x
        sta     $5d
@c6d1:  lda     $6f86,x
        and     #$03
        beq     @c6f6       ; branch if a sprite thread
        and     #$01
        bne     @c6e9       ; branch if a bg1 thread

; bg3 thread
        stz     $64de,x     ; deactivate sprite
        lda     $60ad       ; branch if bg3 animation is paused
        bne     @c760
        jsr     UpdateBG3Thread
        bra     @c758

; bg1 thread
@c6e9:  stz     $64de,x     ; deactivate sprite
        lda     $60ac       ; branch if bg1 animation is paused
        bne     @c760
        jsr     UpdateBG1Thread
        bcc     @c758       ; branch if not acting as a sprite thread
@c6f6:  lda     $9b         ;
        bne     @c714
        lda     [$5b]       ; animation command
        bpl     @c714       ; branch if a frame
        cmp     #$ff
        bne     @c70a       ; branch if not end of script
        stz     $6a2e,x     ; deactivate attacker thread
        stz     $64de,x     ; deactivate thread
@c708:  bra     @c760

; animation command
@c70a:  jsr     ExecAnimCmd
        ldy     $5b         ; increment animation script pointer
        iny
        sty     $5b
        bra     @c6d1

; show frame
@c714:  stz     $9b         ;
        cmp     #$1f
        beq     @c720       ; branch if blank frame ($1f)
        clc
        adc     $6f8c,x     ; add frame offset
        and     #$7f
@c720:  sta     $64e3,x     ; set frame number
        lda     $6a37,x     ; graphic index
        sta     $64e4,x
        longa
        lda     $6a3a,x     ; x position
        clc
        adc     $74ce,x     ; add x offset
        sta     $64df,x     ; sprite x position
        lda     $6a3c,x     ; y position
        clc
        adc     $74d0,x     ; add y offset
        sta     $64e1,x     ; sprite y position
        shorta0
        lda     $6f87,x     ; horizontal flip
        sta     $64e5,x
        lda     $6f86,x     ; sprite priority
        and     #$30
        ora     $74d5,x     ; palette
        sta     $64e6,x
        lda     #$01
        sta     $64de,x     ; make thread active
@c758:  longa
        lda     $5b         ; increment animation script pointer
        inc
        sta     $6a31,x
@c760:  longa        ; next thread
        txa
        clc
        adc     #$0010
        tax
        shorta0
        cpx     #$0550      ; 85 threads total
        jne     @c6a9
        jsr     WaitFrame
        lda     $62d2       ; branch if sprite priority data is up to date
        bne     @c77e
        jsr     UpdateDrawOrder
@c77e:  lda     $7b14       ; continue if there are no more active threads
        jne     @c6a4
        clr_ax
        stx     $10
        jsr     SetColorMathHDMA
        stz     $62d2       ; invalidate sprite priority data
        stz     $62af       ; clear bg1 monsters
        jsr     UpdateDrawOrder
        clr_ax
@c798:  sta     $7b15,x     ; clear bg1/bg3 animation data
        sta     $7b21,x
        inx
        cpx     #$000c
        bne     @c798
        ldx     #$0100
        stx     $43f5       ; set bg1 horizontal scroll position to $0100 (hdma data)
        stx     $64b4       ; set bg1 horizontal scroll position to $0100
        stx     $4af5       ; set bg3 horizontal scroll position to $0100 (hdma data)
        clr_ax
        stx     $64b6       ; set bg1 vertical scroll position to $0100
        stx     $4af7       ; set bg3 vertical scroll position to $0100 (hdma data)
        rts

; ------------------------------------------------------------------------------

; [ update bg1 animation thread ]

; carry set = acting as a sprite thread, clear = acting as a bg thread

UpdateBG1Thread:
bg_main_magic_anim:
@c7b9:  lda     $6f86,x     ; thread type
        and     #$03
        bne     @c7c2       ; branch if not a sprite
        sec
        rts
@c7c2:  lda     [$5b]       ; script byte
        cmp     #$1f
        beq     @c7da       ; branch if blank frame
        cmp     #$ff
        bne     @c7de       ; branch if not end of script
        stz     $6a2e,x     ; deactivate thread
        ldy     #$0100
        sty     $43f5       ; set bg1 horizontal scroll position to $0100 (hdma data)
        sty     $64b4       ; set bg1 horizontal scroll position to $0100
        clc
        rts
@c7da:  lda     #$0f        ; use frame $0f for blank frame
        bra     @c7e6
@c7de:  bmi     @c817       ; branch if script command
        clc
        adc     $6f8c,x     ; add frame offset
        and     #$7f
@c7e6:  longa
        xba
        asl
        clc
        adc     #$c400
        sta     $7b1a       ; pointer to bg1 animation graphics buffer
        lda     $6a3a,x     ; x position
        clc
        adc     $74ce,x     ; x offset
        sta     $7b1d       ; bg1 animation graphics x offset
        lda     $6a3c,x     ; y position
        clc
        adc     $74d0,x     ; y offset
        sta     $7b1f       ; bg1 animation graphics y offset
        shorta0
        lda     #$7f
        sta     $7b1c       ; bank byte of graphics pointer
        stz     $64de,x     ; deactivate sprite
        lda     #$01
        sta     $7b15       ; enable bg1 animation tile data update
        clc
        rts
@c817:  jsr     ExecAnimCmd
        ldy     $5b         ; increment script pointer
        iny
        sty     $5b
        bra     @c7b9       ; next command/frame
        clc
        rts

; ------------------------------------------------------------------------------

; [ update bg3 animation thread ]

UpdateBG3Thread:
bg_main_magic_anim3:
@c823:  lda     [$5b]       ; script byte
        cmp     #$ff
        bne     @c833       ; branch if not end of script
        stz     $6a2e,x     ; deactivate thread
        ldy     #$0100
        sty     $4af5       ; set bg3 horizontal scroll position to $0100 (hdma data)
        rts
@c833:  bmi     @c868       ; branch if script command
        clc
        adc     $6f8c,x     ; add frame offset
        and     #$7f
        longa
        xba
        asl
        clc
        adc     #$e400      ; pointer to bg3 tile data buffer
        sta     $7b26
        lda     $6a3a,x     ; x position
        clc
        adc     $74ce,x     ; x offset
        sta     $7b29       ; bg3 horizontal scroll position
        lda     $6a3c,x     ; y position
        clc
        adc     $74d0,x     ; y offset
        sta     $7b2b       ; bg3 vertical scroll position
        shorta0
        lda     #$7f
        sta     $7b28       ; tile data pointer bank
        lda     #$01
        sta     $7b21       ; enable b3 animation tile data update
        rts
@c868:  jsr     ExecAnimCmd
        ldy     $5b         ; increment script pointer
        iny
        sty     $5b
        bra     @c823       ; next command/frame
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7: animation commands for battle events ]

AnimCmd_c7:
@c873:  jsl     ExecEventAnimCmd
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80 ]

AnimCmd_80:
magic_code00:
@c878:  lda     [$5b]       ; next byte
        longa
        asl
        tax
        shorta0
        ldy     #1
        jsr     (.loword(AnimCmd_80_Tbl),x)
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; battle animation command $80 jump table
AnimCmd_80_Tbl:
magic_init_jmp:
@c88b:  .addr   AnimCmd_80_00
        .addr   AnimCmd_80_01
        .addr   AnimCmd_80_02
        .addr   AnimCmd_80_03
        .addr   AnimCmd_80_04
        .addr   AnimCmd_80_05
        .addr   AnimCmd_80_06
        .addr   AnimCmd_80_07
        .addr   AnimCmd_80_08
        .addr   AnimCmd_80_09
        .addr   AnimCmd_80_0a
        .addr   AnimCmd_80_0b
        .addr   AnimCmd_80_0c
        .addr   AnimCmd_80_0d
        .addr   AnimCmd_80_0e
        .addr   AnimCmd_80_0f
        .addr   AnimCmd_80_10
        .addr   AnimCmd_80_11
        .addr   AnimCmd_80_12
        .addr   AnimCmd_80_13
        .addr   AnimCmd_80_14
        .addr   AnimCmd_80_15
        .addr   AnimCmd_80_16
        .addr   AnimCmd_80_17
        .addr   AnimCmd_80_18
        .addr   AnimCmd_80_19
        .addr   AnimCmd_80_1a
        .addr   AnimCmd_80_1b
        .addr   AnimCmd_80_1c
        .addr   AnimCmd_80_1d
        .addr   AnimCmd_80_1e
        .addr   AnimCmd_80_1f
        .addr   AnimCmd_80_20
        .addr   AnimCmd_80_21
        .addr   AnimCmd_80_22
        .addr   AnimCmd_80_23
        .addr   AnimCmd_80_24
        .addr   AnimCmd_80_25
        .addr   AnimCmd_80_26
        .addr   AnimCmd_80_27
        .addr   AnimCmd_80_28
        .addr   AnimCmd_80_29
        .addr   AnimCmd_80_2a
        .addr   AnimCmd_80_2b
        .addr   AnimCmd_80_2c
        .addr   AnimCmd_80_2d
        .addr   AnimCmd_80_2e
        .addr   AnimCmd_80_2f
        .addr   AnimCmd_80_30
        .addr   AnimCmd_80_31
        .addr   AnimCmd_80_32
        .addr   AnimCmd_80_33
        .addr   AnimCmd_80_34
        .addr   AnimCmd_80_35
        .addr   AnimCmd_80_36
        .addr   AnimCmd_80_37
        .addr   AnimCmd_80_38
        .addr   AnimCmd_80_39
        .addr   AnimCmd_80_3a
        .addr   AnimCmd_80_3b
        .addr   AnimCmd_80_3c
        .addr   AnimCmd_80_3d
        .addr   AnimCmd_80_3e
        .addr   AnimCmd_80_3f
        .addr   AnimCmd_80_40
        .addr   AnimCmd_80_41
        .addr   AnimCmd_80_42
        .addr   AnimCmd_80_43
        .addr   AnimCmd_80_44
        .addr   AnimCmd_80_45
        .addr   AnimCmd_80_46
        .addr   AnimCmd_80_47
        .addr   AnimCmd_80_48
        .addr   AnimCmd_80_49
        .addr   AnimCmd_80_4a
        .addr   AnimCmd_80_4b
        .addr   AnimCmd_80_4c
        .addr   AnimCmd_80_4d
        .addr   AnimCmd_80_4e
        .addr   AnimCmd_80_4f
        .addr   AnimCmd_80_50
        .addr   AnimCmd_80_51
        .addr   AnimCmd_80_52
        .addr   AnimCmd_80_53
        .addr   AnimCmd_80_54
        .addr   AnimCmd_80_55
        .addr   AnimCmd_80_56
        .addr   AnimCmd_80_57
        .addr   AnimCmd_80_58
        .addr   AnimCmd_80_59
        .addr   AnimCmd_80_5a
        .addr   AnimCmd_80_5b
        .addr   AnimCmd_80_5c
        .addr   AnimCmd_80_5d
        .addr   AnimCmd_80_5e
        .addr   AnimCmd_80_5f
        .addr   AnimCmd_80_60
        .addr   AnimCmd_80_61
        .addr   AnimCmd_80_62
        .addr   AnimCmd_80_63
        .addr   AnimCmd_80_64
        .addr   AnimCmd_80_65
        .addr   AnimCmd_80_66
        .addr   AnimCmd_80_67
        .addr   AnimCmd_80_68
        .addr   AnimCmd_80_69
        .addr   AnimCmd_80_6a
        .addr   AnimCmd_80_6b
        .addr   AnimCmd_80_6c
        .addr   AnimCmd_80_6d
        .addr   AnimCmd_80_6e
        .addr   AnimCmd_80_6f
        .addr   AnimCmd_80_70
        .addr   AnimCmd_80_71
        .addr   AnimCmd_80_72
        .addr   AnimCmd_80_73
        .addr   AnimCmd_80_74
        .addr   AnimCmd_80_75
        .addr   AnimCmd_80_76
        .addr   AnimCmd_80_77
        .addr   AnimCmd_80_78
        .addr   AnimCmd_80_79
        .addr   AnimCmd_80_7a
        .addr   AnimCmd_80_7b
        .addr   AnimCmd_80_7c
        .addr   AnimCmd_80_7d
        .addr   AnimCmd_80_7e
        .addr   AnimCmd_80_7f
        .addr   AnimCmd_80_80
        .addr   AnimCmd_80_81
        .addr   AnimCmd_80_82
        .addr   AnimCmd_80_83
        .addr   AnimCmd_80_84
        .addr   AnimCmd_80_85
        .addr   AnimCmd_80_86
        .addr   AnimCmd_80_87
        .addr   AnimCmd_80_88
        .addr   AnimCmd_80_89
        .addr   AnimCmd_80_8a
        .addr   AnimCmd_80_8b
        .addr   AnimCmd_80_8c

; ------------------------------------------------------------------------------

; [ battle animation command $80/$8b: play ??? sound effect ]

AnimCmd_80_8b:
magic_init_139:
@c9a5:  inc     $6281
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$8a: set target monster sprite priority to 0 ]

AnimCmd_80_8a:
magic_init_138:
@c9a9:  ldx     $7af6
        lda     $6a39,x     ; target
        bpl     @c9c0       ; return if a character
        and     #$7f
        sec
        sbc     #$04        ; monster number
        asl
        tay
        lda     $80dc,y     ; set sprite priority to 0
        and     #$cf
        sta     $80dc,y
@c9c0:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$89:  ]

AnimCmd_80_89:
magic_init_137:
@c9c1:  lda     [$5b],y
        sta     $6285
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$88:  ]

AnimCmd_80_88:
magic_init_136:
@c9c9:  ldx     $7af6
        lda     $6a39,x
        asl5
        tay
        longa
        lda     $61b7,y
        clc
        adc     $61c5,y
        clc
        adc     $61d4,y
        clc
        adc     #$0008
        sta     $6a3a,x
        lda     $61b9,y
        clc
        adc     $61c7,y
        sta     $6a3c,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$87:  ]

AnimCmd_80_87:
magic_init_135:
@c9f7:  lda     $ecbb
        beq     @ca06
        ldx     $7af6
        lda     $6f80,x
        sta     $10
        bra     _ca17
@ca06:  jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$8c:  ]

AnimCmd_80_8c:
magic_init_140:
@ca09:  lda     #$80
        sta     $10
        bra     _ca17

; ------------------------------------------------------------------------------

; [ battle animation command $80/$86:  ]

AnimCmd_80_86:
magic_init_134:
@ca0f:  ldx     $7af6
        lda     $6f7e,x
        sta     $10
_ca17:  lda     [$5b],y
        bne     @ca1e
        lda     $e9e7
@ca1e:  jsr     PlayAnimSfx
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$85:  ]

AnimCmd_80_85:
magic_init_133:
@ca24:  jsl     _c2af21
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$84:  ]

AnimCmd_80_84:
magic_init_132:
@ca29:  longa
        ldx     $ecb6
        lda     $ecb4
        sta     $80cf,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$83:  ]

AnimCmd_80_83:
magic_init_131:
@ca38:  jsl     _c2af61
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$82:  ]

AnimCmd_80_82:
magic_init_130:
@ca3d:  stz     $11
        lda     [$5b],y
        sta     $10
        bpl     @ca47
        dec     $11
@ca47:  longa
        clr_ax
@ca4b:  lda     $80c3,x
        clc
        adc     $10
        sta     $80c3,x
        inx2
        cpx     #$000c
        bne     @ca4b
        inc     $5b
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$81:  ]

AnimCmd_80_81:
magic_init_129:
@ca61:  stz     $88cb
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$80:  ]

AnimCmd_80_80:
magic_init_128:
@ca65:  ldx     $5b
        inx
        stx     $5b
        ldx     #$88cb
        jsr     _c1eabb
        clr_a
        jsr     _c1ca85
        lda     #$20
        jsr     _c1ca85
        lda     #$40
        jsr     _c1ca85
        ldx     $5b
        inx2
        stx     $5b
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1ca85:
init_one_col_down:
@ca85:  sta     $10
        ldy     #$0001
        lda     [$5b],y
        sta     $12
        iny
        lda     [$5b],y
        clc
        adc     $10
        sta     $10
        lda     #$01
        sta     $11
        jmp     DecPal

; ------------------------------------------------------------------------------

; [ battle animation command $80/$7f: hide all monsters ]

; used by boss death animation

AnimCmd_80_7f:
magic_init_127:
@ca9d:  stz     $61ab       ; hide all monsters
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$7e: flip target character vertically ]

; used by suplex

AnimCmd_80_7e:
magic_init_126:
@caa1:  ldx     $7af6
        lda     $6a39,x     ; target
        bmi     @cab7       ; return if a monster
        asl5
        tax
        lda     $61be,x     ; flip character vertically
        eor     #$80
        sta     $61be,x
@cab7:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$74:  ]

AnimCmd_80_74:
magic_init_116:
@cab8:  jsl     _c2b017
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$7d: branch if dragon horn is active ]

AnimCmd_80_7d:
magic_init_125:
@cabd:  jsl     _c2b03e
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$79: characters run to left side of screen ]

AnimCmd_80_79:
magic_init_121:
@cac2:  jsl     _c2b2d5
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$7a: characters run to right side of screen ]

AnimCmd_80_7a:
magic_init_122:
@cac7:  jsl     _c2b303
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$7b: flip all characters ]

AnimCmd_80_7b:
magic_init_123:
@cacc:  jsl     _c2b2b4
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$7c: swap target and attacker ]

AnimCmd_80_7c:
magic_init_124:
@cad1:  jsl     _c2b281
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$76:  ]

AnimCmd_80_76:
magic_init_118:
@cad6:  jsl     _c2b38c
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$77:  ]

AnimCmd_80_77:
magic_init_119:
@cadb:  jsl     _c2b331
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$78:  ]

AnimCmd_80_78:
magic_init_120:
@cae0:  jsl     _c2b361
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$75:  ]

AnimCmd_80_75:
magic_init_117:
@cae5:  ldx     $7af6
        lda     $64e8,x
        ora     #$80
        cmp     #$90
        bcc     @caf8
        cmp     #$a0
        bcc     @cafc
        clr_a
        bra     @cafe
@caf8:  lda     #$01
        bra     @cafe
@cafc:  lda     #$02
@cafe:  sta     $6f8c,x
        jsr     _c1cc04
        longa
        lda     $74d0,x
        clc
        adc     $22
        sta     $74d0,x
        shorta0
        jmp     _c1cc27

; ------------------------------------------------------------------------------

_c1cb15:
@cb15:  .byte   $02,$03,$04,$05,$06,$07,$1f,$1f

; ------------------------------------------------------------------------------

; [ battle animation command $80/$73:  ]

AnimCmd_80_73:
magic_init_115:
@cb1d:  lda     $ebfb
        lda     [$5b],y
        tax
        lda     $ebfb,x
        tax
        lda     f:_c1cb15,x
        ldx     $7af6
        sta     $6f8c,x
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$71: restore character palettes ]

AnimCmd_80_71:
magic_init_113:
@cb34:  clr_ax
@cb36:  lda     $7da0,x
        sta     $7fa0,x
        inx
        cpx     #$0060
        bne     @cb36
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$70:  ]

AnimCmd_80_70:
magic_init_112:
@cb43:  jsl     _c2dd53
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$72:  ]

AnimCmd_80_72:
magic_init_114:
@cb48:  jsl     _c2aff8
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$6f:  ]

AnimCmd_80_6f:
magic_init_110:
@cb4d:  inc     $7b96
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$6e:  ]

AnimCmd_80_6e:
@cb51:  jsl     _c2dd71
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$6d:  ]

AnimCmd_80_6d:
magic_init_109:
@cb56:  inc     $628b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$6c:  ]

AnimCmd_80_6c:
magic_init_108:
@cb5a:  jmp     ClearBGAnimFrames

; ------------------------------------------------------------------------------

; [ battle animation command $80/$1b:  ]

AnimCmd_80_1b:
magic_init_27:
@cb5d:  inc     $ebfa
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$1d:  ]

AnimCmd_80_1d:
magic_init_29:
@cb61:  lda     #$20
        sta     $24
        lda     $0e
        jmp     _c1ce31

; ------------------------------------------------------------------------------

; [ battle animation command $80/$1c: decrement screen brightness ]

AnimCmd_80_1c:
magic_init_28:
@cb6a:  lda     $e9f9
        beq     @cb73
        dec
        sta     $e9f9
@cb73:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$1a:  ]

AnimCmd_80_1a:
magic_init_26:
@cb74:  ldx     $7af6
        lda     $6a39,x     ; target
        bpl     @cbab       ; return if a character
        and     #$0f
        sec
        sbc     #$04
        tax
        lda     f:BitOrTbl,x   ; $10 = bit mask
        sta     $10
        ldx     $5b
        inx
        stx     $5b
        lda     [$5b]
        and     #$01
        beq     @cb9d
        lda     $6191
        ora     $10
        sta     $6191
        bra     @cbab
@cb9d:  lda     $10
        eor     #$ff
        sta     $10
        lda     $6191
        and     $10
        sta     $6191
@cbab:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$6a:  ]

AnimCmd_80_6a:
magic_init_106:
@cbac:  jsl     _c2b9c0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$6b:  ]

AnimCmd_80_6b:
magic_init_107:
@cbb1:  jsl     _c2b999
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$69: update sprite layer priority based on attacker ]

AnimCmd_80_69:
magic_init_105:
@cbb6:  jsr     ResetSpritePriority
        ldx     $7af6
        lda     $6a38,x     ; attacker
        bra     _cbca

; ------------------------------------------------------------------------------

; [ battle animation command $80/$17: update sprite layer priority based on target ]

AnimCmd_80_17:
magic_init_23:
@cbc1:  jsr     ResetSpritePriority
        ldx     $7af6
        lda     $6a39,x     ; target
_cbca:  jsr     _c1c3fa       ; update character/monster layer priority
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$68:  ]

AnimCmd_80_68:
magic_init_104:
@cbd1:  jsl     _c2bbb4
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$67:  ]

AnimCmd_80_67:
magic_init_103:
@cbd6:  jsl     _c2bbcf
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$66:  ]

AnimCmd_80_66:
magic_init_102:
@cbdb:  jsl     _c2bbfa
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$65:  ]

AnimCmd_80_65:
magic_init_101:
@cbe0:  jsl     _c2bc08
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$64:  ]

AnimCmd_80_64:
magic_init_100:
@cbe5:  ldx     $7af6
        clr_a
        sta     $6a37,x
        lda     $896f
        and     #$ef
        sta     $896f
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$62:  ]

AnimCmd_80_62:
magic_init_98:
@cbf5:  jsr     _c1cc04
        longa
        lda     $22
        sta     $74ce,x
        shorta0
        bra     _c1cc27

; ------------------------------------------------------------------------------

; [  ]

_c1cc04:
magic_init_97_sub1:
@cc04:  lda     [$5b],y
        sta     $24
        ldx     $7af6
        lda     $64e8,x
        ldy     #$0003
        ora     [$5b],y
        jsr     CalcVecSine
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$61:  ]

AnimCmd_80_61:
magic_init_97:
@cc1a:  jsr     _c1cc04
        longa
        lda     $22
        sta     $74d0,x     ; thread y offset
        shorta0

_c1cc27:
@cc27:  ldy     #$0002
        lda     [$5b],y
        sta     $22
        lda     $64e8,x
        clc
        adc     $22
        sta     $64e8,x
        ldy     $5b
        iny3
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$60:  ]

AnimCmd_80_60:
magic_init_96:
@cc3f:  ldx     $7af6
        lda     $6a38,x
        bmi     @cc8a
        and     #$03
        pha
        asl5
        tax
        ldy     #$0001
@cc53:  lda     [$5b],y
        sta     $000f,y
        iny
        cpy     #$0005
        bne     @cc53
        lda     $2ebd,x
        eor     $10
        sta     $2ebd,x
        lda     $2ebe,x
        eor     $11
        sta     $2ebe,x
        lda     $2ebf,x
        eor     $12
        sta     $2ebf,x
        lda     $2ec0,x
        eor     $13
        sta     $2ec0,x
        pla
        sta     $7b78
        ldx     $7af6
        phx
        jsr     _c12f79       ; update character status change animations
        plx
@cc8a:  ldy     $5b
        iny4
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$5f:  ]

AnimCmd_80_5f:
magic_init_95:
@cc93:  jsl     _c2bc38
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$5e:  ]

AnimCmd_80_5e:
magic_init_94:
@cc98:  lda     $0e
        asl
        eor     #$ff
        inc
        sta     $12
        lda     $e9f0
        sta     $24
        lda     $12
        jsr     CalcSine16
        longa
        lda     $28
        sta     $e9c4
        sta     $e9ca
        shorta0
        lda     $e9f0
        sta     $24
        lda     $12
        clc
        adc     #$40
        jsr     CalcSine16
        longa
        lda     $28
        sta     $e9c6
        eor     #$ffff
        inc
        sta     $e9c8
        shorta0
        lda     $e9f0
        sec
        sbc     #$02
        sta     $e9f0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$5d:  ]

AnimCmd_80_5d:
magic_init_93:
@ccdf:  lda     #$18
        sta     $24
        ldx     $7af6
        lda     $64e8,x
        asl2
        jsr     CalcVecSine
        ldx     $7af6
        longa
        lda     $74d0,x
        clc
        adc     $22
        sta     $74d0,x
        shorta0
        inc     $64e8,x
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$5c:  ]

AnimCmd_80_5c:
magic_init_92:
@cd03:  jsl     _c2bc81
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$5b:  ]

AnimCmd_80_5b:
magic_init_91:
@cd08:  jsl     _c2bc99
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$5a:  ]

AnimCmd_80_5a:
magic_init_90:
@cd0d:  jsl     _c2bcb7
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$59:  ]

AnimCmd_80_59:
magic_init_89:
@cd12:  jsl     _c2bce3
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$58: set circle shape ]

; b1: circle shape

AnimCmd_80_58:
magic_init_88:
@cd17:  lda     [$5b],y
        sta     $961b       ; circle shape
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$57: set bg3/bg4 window mask settings ]

; b1: ----2211
;     2: enable bg3 in window 2
;     1: enable bg3 in window 1

AnimCmd_80_57:
magic_init_87:
@cd1f:  lda     [$5b],y
        sta     f:hW34SEL     ; bg3/bg4 window mask settings
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$56:  ]

AnimCmd_80_56:
magic_init_86:
@cd28:  clr_axy
        longa
        lda     $0e
        asl
        sta     $12
        asl2
        sta     $10
        ldx     $7af6
        lda     $6f87,x
        and     #$00ff
        bne     @cd51
        lda     $10
        eor     #$ffff
        inc
        sta     $10
        lda     $12
        eor     #$ffff
        inc
        sta     $12
@cd51:  clr_ax
@cd53:  lda     f:RNGTbl,x
        bmi     @cd5e
        sec
        sbc     $12
        bra     @cd61
@cd5e:  sec
        sbc     $10
@cd61:  sta     $43f5,y
        inx
        iny4
        cpx     #$0097
        bne     @cd53
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$55:  ]

AnimCmd_80_55:
magic_init_85:
@cd72:  lda     [$5b],y
        beq     @cdbb
        clr_ax
        longa
        lda     $e9d0
        asl2
        sta     $10
        lda     $64b6
@cd84:  sta     $43f7,x
        inx4
        cpx     $10
        bne     @cd84
@cd8f:  sta     $43f7,x
        dec
        inx4
        cpx     #$025c
        bne     @cd8f
        inc     $e9d0
        clr_ax
        lda     $64b4
@cda4:  sta     $43f5,x
        sta     $4521,x
        inx4
        cpx     #$012c
        bne     @cda4
        sta     $464d
        shorta0
        bra     @cdc1
@cdbb:  ldy     #$0001
        sty     $e9d0
@cdc1:  jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$54:  ]

AnimCmd_80_54:
magic_init_84:
@cdc4:  ldx     $7af6
        lda     $6a39,x
        bmi     @cdde
        asl5
        tay
        lda     $2ec5,y
        eor     #$01
        sta     $2ec5,y
        clr_a
        sta     $61c0,y
@cdde:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$53:  ]

AnimCmd_80_53:
magic_init_83:
@cddf:  ldx     $7af6
        lda     $6a39,x
        bmi     @ce28
        and     #$03
        sta     $10
        asl5
        tay
        stz     $11
        lda     $201f
        asl2
        clc
        adc     $10
        tax
        lda     $2ec5,y
        eor     #$01
        and     #$01
        beq     @ce0b
        lda     f:_c2a86f,x
        bra     @ce0f
@ce0b:  lda     f:_c2a87f,x
@ce0f:  sta     $10
        bpl     @ce15
        dec     $11
@ce15:  lda     #$04
        sta     $61c0,y
        longa
        lda     $61c9,y
        clc
        adc     $10
        sta     $61c9,y
        shorta0
@ce28:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$52:  ]

AnimCmd_80_52:
magic_init_82:
@ce29:  lda     #$10
        sta     $24
        lda     $0e
        asl2

_c1ce31:
@ce31:  asl3
        pha
        jsr     CalcVecSine
        ldx     $7af6
        longa
        lda     $74ce,x
        clc
        adc     $22
        sta     $74ce,x
        shorta0
        pla
        clc
        adc     #$40
        jsr     CalcVecSine
        ldx     $7af6
        longa
        lda     $74d0,x
        clc
        adc     $22
        sta     $74d0,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$51:  ]

AnimCmd_80_51:
magic_init_81:
@ce62:  lda     [$5b],y
        beq     @ce6e
        stz     $619c
        stz     $619d
        bra     @ce80
@ce6e:  ldx     $7af6
        lda     $6a38,x
        jsr     _c1ce83
        ldx     $7af6
        lda     $6a39,x
        jsr     _c1ce83
@ce80:  jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [  ]

_c1ce83:
one_duble_flag_set:
@ce83:  bmi     @ce8e
        and     #$03
        jsr     GetBitMask
        sta     $619c
        rts
@ce8e:  and     #$7f
        sec
        sbc     #$04
        jsr     GetBitMask
        sta     $619d
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$50:  ]

AnimCmd_80_50:
magic_init_80:
@ce9a:  clr_ax
        ldy     #$0001
        lda     [$5b]
        bne     @cea4
        dex
@cea4:  stx     $14
        clr_axy
        longa
        lda     $0e
        asl
        sta     $12
        asl2
        sta     $10
        ldx     $7af6
        lda     $6f87,x
        and     #$00ff
        bne     @cecd
        lda     $10
        eor     $14
        inc
        sta     $10
        lda     $12
        eor     $14
        inc
        sta     $12
@cecd:  clr_ax
@cecf:  lda     f:RNGTbl,x
        bmi     @ceda
        sec
        sbc     $12
        bra     @cedd
@ceda:  sec
        sbc     $10
@cedd:  sta     $4af5,y
        inx
        iny4
        cpx     #$0097
        bne     @cecf
        shorta0
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$4f: move thread to attacking character position ]

AnimCmd_80_4f:
magic_init_79:
@cef0:  jsr     GetAttackerThreadPtr
        longa
        lda     $61b7,y
        clc
        adc     $61c5,y
        clc
        adc     $61d4,y
        clc
        adc     #$0008
        sta     $6a3a,x
        lda     $61b9,y
        clc
        adc     $61c7,y
        sta     $6a3c,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$4e: clear frame offset ]

AnimCmd_80_4e:
magic_init_78:
@cf15:  ldx     $7af6
        stz     $6f8c,x     ; clear frame offset
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$4d: set vector from triangle to target ]

AnimCmd_80_4d:
magic_init_77:
@cf1c:  ldx     $7af6
        lda     $6154       ; triangle x position
        sta     $7d
        sta     $6f7e,x     ; attacker x position
        stz     $6f7f,x
        lda     $6155       ; triangle y position
        sta     $7e
        sta     $6f80,x
        stz     $6f81,x
        lda     $6f82,x
        sta     $7f
        lda     $6f84,x
        sta     $80
        jsr     InitVec
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$4c: move triangle to thread position ]

AnimCmd_80_4c:
magic_init_76:
@cf45:  ldx     $7af6
        longa
        lda     $6a3a,x     ; thread x position
        clc
        adc     $74ce,x     ; thread x offset
        sta     $10
        lda     $6a3c,x     ; thread y position
        clc
        adc     $74d0,x     ; thread y offset
        sta     $12
        shorta0
        lda     $10
        sta     $6154       ; triangle x position
        lda     $12
        sta     $6155       ; triangle y position
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$4a:  ]

AnimCmd_80_4a:
magic_init_74:
@cf6a:  stz     $61ae       ; disable stepping forward to attack for all characters
        stz     $61af
        stz     $61b0
        stz     $61b1
        rts

; ------------------------------------------------------------------------------

_c1cf77:
@cf77:  .byte   $39,$3b,$3c,$56,$78,$65,$39,$3b

; ------------------------------------------------------------------------------

; [ battle animation command $80/$49:  ]

AnimCmd_80_49:
magic_init_73:
@cf7f:  jsr     Rand
        and     #$07
        tax
        lda     f:_c1cf77,x
        jsr     LoadSpriteAnimPal
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$48:  ]

AnimCmd_80_48:
magic_init_72:
@cf8d:  ldx     $7af6
        lda     $6a39,x
        bpl     @cfa9
        and     #$7f
        sec
        sbc     #$04
        jsr     GetBitMask
        eor     #$ff
        sta     $22
        lda     $e9e6
        and     $22
        sta     $e9e6
@cfa9:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$47:  ]

AnimCmd_80_47:
magic_init_71:
@cfaa:  lda     [$5b],y
        sta     $897d
        sta     $607d
        and     #$0f
        sta     $62a9
        bra     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$46:  ]

AnimCmd_80_46:
magic_init_70:
@cfb9:  lda     [$5b],y
        sta     $8971
        bra     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$45:  ]

AnimCmd_80_45:
magic_init_69:
@cfc0:  lda     [$5b],y
        sta     f:hW12SEL

_c1cfc6:
@cfc6:  ldy     $5b
        iny
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$44:  ]

AnimCmd_80_44:
magic_init_68:
@cfcc:  ldx     $7af6
        longa
        lda     $6f6e,x
        sta     $6f7e,x
        lda     $6f70,x
        sta     $6f80,x
        lda     $6f72,x
        sta     $6f82,x
        lda     $6f74,x
        sta     $6f84,x
        lda     $6f77,x
        sta     $6f87,x
        lda     $6a2a,x
        sta     $6a3a,x
        lda     $6a2c,x
        sta     $6a3c,x
        lda     $74be,x
        sta     $74ce,x
        lda     $74c0,x
        sta     $74d0,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$43:  ]

AnimCmd_80_43:
magic_init_67:
@d00b:  lda     [$5b],y
        beq     @d05b
        clr_ax
        longa
        lda     $e9d0
        asl2
        sta     $10
        lda     $64b6
        clc
        adc     $e9d0
@d021:  sta     $43f7,x
        dec
        inx4
        cpx     $10
        bne     @d021
        lda     $64b6
@d030:  sta     $43f7,x
        inx4
        cpx     #$025c
        bne     @d030
        dec     $e9d0
        clr_ax
        lda     $64b4
@d044:  sta     $43f5,x
        sta     $4521,x
        inx4
        cpx     #$012c
        bne     @d044
        sta     $464d
        shorta0
        bra     @d061
@d05b:  ldy     #$0080
        sty     $e9d0
@d061:  jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$42: set mode7 settings register ($211a) ]

; b1 = ------vh
;      v: vertical flip
;      h: horizontal flip

AnimCmd_80_42:
magic_init_66:
@d064:  lda     [$5b],y
        sta     f:hM7SEL
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$41: zoom/move bg1 (mode7) ]

; b1 = x zoom change
; b2 = y zoom change
; b3 = x position change
; b4 = y position change

AnimCmd_80_41:
magic_init_65:
@d06d:  stz     $11
        lda     [$5b],y
        bpl     @d075
        dec     $11
@d075:  sta     $10
        longa
        lda     $e9c4       ; x zoom
        clc
        adc     $10
        sta     $e9c4
        shorta0
        iny
        stz     $11
        lda     [$5b],y
        bpl     @d08e
        dec     $11
@d08e:  sta     $10
        longa
        lda     $e9ca       ; y zoom size
        clc
        adc     $10
        sta     $e9ca
        shorta
        iny
        stz     $11
        lda     [$5b],y
        bpl     @d0a6
        dec     $11
@d0a6:  sta     $10
        iny
        stz     $13
        lda     [$5b],y
        bpl     @d0b1
        dec     $13
@d0b1:  sta     $12
        longa
        lda     $e9cc       ; x position
        clc
        adc     $10
        sta     $e9cc
        lda     $e9ce       ; y position
        clc
        adc     $12
        sta     $e9ce
        lda     $5b
        clc
        adc     #$0004
        sta     $5b
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$40: set screen mode ($2105) ]

; b1 = -----mmm
;      m: screen mode

AnimCmd_80_40:
magic_init_64:
@d0d3:  lda     $896f
        and     #$f8
        ora     [$5b],y
        sta     $896f
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$3f:  ]

AnimCmd_80_3f:
magic_init_63:
@d0e0:  ldx     $7af6
        lda     $6f7e,x
        lsr3
        sta     $10
        lda     $6f7e,x
        eor     #$ff
        inc
        lsr3
        sta     $12
        lda     $201f
        and     #$03
        cmp     #$02
        bne     @d102
        clr_a
        bra     @d104
@d102:  lda     #$08
@d104:  sta     $14
        lda     $6f3b
        and     #$01
        bne     @d11e
        lda     $6f3a
        sec
        sbc     $14
        lsr3
        cmp     $10
        beq     @d125
        cmp     $12
        beq     @d125
@d11e:  ldy     $5b
        dey3
        sty     $5b
@d125:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$3e: set main screen layers ]

; b1: ---s4321
;     s: enable sprites
;     4: enable bg4
;     3: enable bg3
;     2: enable bg2
;     1: enable bg1

AnimCmd_80_3e:
magic_init_62:
@d126:  lda     [$5b],y
        sta     $898d       ; main screen designation (->$212c)
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$3d:  ]

AnimCmd_80_3d:
magic_init_61:
@d12e:  jsr     GetAttackerThreadPtr
        lda     $6f87,x
        and     #$40
        bne     @d13c
        lda     #$18
        bra     @d13e
@d13c:  lda     #$e8
@d13e:  sta     $26
        lda     $6a39,x
        bmi     @d15c
        and     #$03
        asl
        tay
        lda     $8033,y
        clc
        adc     $26
        bcc     @d154
        lda     $8033,y
@d154:  sta     $6f82,x
        lda     $8043,y
        bra     @d16d
@d15c:  sec
        sbc     #$04
        asl
        tay
        lda     $800f,y
        clc
        adc     $26
        sta     $6f82,x
        lda     $8027,y
@d16d:  sec
        sbc     #$08
        sta     $6f84,x
        jsr     CalcCharAttackVec
        ldx     $7af6
        lda     $85
        clc
        adc     #$28
        sta     $74db,x
        lda     #$04
        sta     $60af
        stz     $60b0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$3c: return target's palette to normal ]

AnimCmd_80_3c:
magic_init_60:
@d18a:  ldx     $7af6
        lda     $6a39,x
        bmi     @d1a1       ; branch if target is a monster
        tax
        asl5
        tay
        lda     $616e,x     ; restore palette (character)
        sta     $61bc,y
        bra     @d1af
@d1a1:  and     #$0f
        tax
        sec
        sbc     #$04
        asl
        tay
        lda     $616e,x     ; restore palette (monster)
        sta     $80db,y
@d1af:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$3b: swap target's palette w/ animation palette ]

AnimCmd_80_3b:
magic_init_59:
@d1b0:  ldx     $7af6
        lda     $6a39,x
        bmi     @d1cb       ; branch if target is a monster
        tax
        asl5
        tay
        lda     $61bc,y     ; set palette index to 3 (character)
        and     #$f1
        ora     #$06
        sta     $61bc,y
        bra     @d1dd
@d1cb:  and     #$0f
        tax
        sec
        sbc     #$04
        asl
        tay
        lda     $80db,y    ; set palette index to 3 (monster)
        and     #$f1
        ora     #$06
        sta     $80db,y
@d1dd:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$3a: set gradient line intensity ]

AnimCmd_80_3a:
magic_init_58:
@d1de:  lda     [$5b],y
        sta     $62ae
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$39: update blue gradient lines ]

; b1: change in color intensity (signed)

AnimCmd_80_39:
magic_init_57:
@d1e6:  lda     #$80
        sta     $16
        ldy     #$0001
        lda     $62ae
        clc
        adc     [$5b],y
        sta     $62ae
        sta     $12
        lda     #$e0
        sta     $8996       ; fixed color add/sub data -> $2132
        lda     $16
        sta     $10
        lda     $62ad
        and     #$1f
        tax
        ldy     #$0004
        phy
@d20b:  lda     f:_c1d29c,x
        sec
        sbc     $12
        bpl     @d215
        clr_a
@d215:  ora     $10
        sta     $8996,y
        sta     $8a16,y
        sta     $8a96,y
        sta     $8b16,y
        inx
        txa
        and     #$1f
        tax
        bne     @d22e
        lda     $16
        sta     $10
@d22e:  iny4
        cpy     #$0084
        bne     @d20b
        ply
@d238:  lda     $8996,y
        sta     $8b96,y
        iny4
        cpy     #$005c
        bne     @d238
        inc     $62ad
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$38: enable high priority bg3 ]

AnimCmd_80_38:
magic_init_56:
@d24d:  lda     $896f
        ora     #$08
        sta     $896f
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$37: clear fixed color value hdma data ]

AnimCmd_80_37:
magic_init_55:
@d256:  clr_ax
        lda     #$e0
@d25a:  sta     $8996,x     ; fixed color value hdma data
        inx4
        cpx     #$025c
        bne     @d25a
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$36: restore palettes for monster sprite data ]

AnimCmd_80_36:
magic_init_54:
@d267:  clr_ax
@d269:  lda     $80db,x
        sec
        sbc     #$0a
        sta     $80db,x
        inx2
        cpx     #$000c
        bne     @d269
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$35: use character palettes for monster sprite data ]

AnimCmd_80_35:
magic_init_53:
@d27a:  clr_ax
@d27c:  lda     $80db,x     ; monster sprite data
        clc
        adc     #$0a        ;
        sta     $80db,x
        inx2
        cpx     #$000c
        bne     @d27c
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$34: copy monster palettes to character palettes ]

AnimCmd_80_34:
magic_init_52:
@d28d:  clr_ax
@d28f:  lda     $7f00,x     ; monster palettes
        sta     $7fa0,x     ; character palettes
        inx
        cpx     #$0060
        bne     @d28f
        rts

; ------------------------------------------------------------------------------

_c1d29c:
@d29c:  .byte   $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f
        .byte   $0f,$0e,$0d,$0c,$0b,$0a,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00

_c1d2bc:
@d2bc:  .byte   $80,$40,$60,$20,$a0,$c0,$80,$20,$20,$60,$20,$60,$20,$60,$20,$60

; ------------------------------------------------------------------------------

; [ battle animation command $80/$4b: update red/yellow gradient lines ]

; b1: color intensity (0..15)

AnimCmd_80_4b:
magic_init_75:
@d2cc:  lda     #$08
        sta     $16
        bra     _d2d4

; ------------------------------------------------------------------------------

; [ battle animation command $80/$33: update rainbow gradient lines ]

; b1: color intensity (0..15)

AnimCmd_80_33:
magic_init_51:
@d2d2:  stz     $16
_d2d4:  lda     [$5b],y
        sta     $12
        lda     #$e0
        sta     $8996
        lda     $62ae       ; fixed color for gradient lines
        and     #$e0
        lsr5
        clc
        adc     $16
        tax
        sta     $14
        lda     f:_c1d2bc,x
        sta     $10
        lda     $62ad
        and     #$1f
        tax
        ldy     #$0004
@d2fc:  lda     f:_c1d29c,x
        sec
        sbc     $12
        bpl     @d306
        clr_a
@d306:  ora     $10
        sta     $8996,y
        inx
        txa
        and     #$1f
        tax
        bne     @d326
        lda     $14
        inc
        and     #$07
        sta     $14
        clc
        adc     $16
        tax
        lda     f:_c1d2bc,x
        sta     $10
        ldx     #$0000
@d326:  iny4
        cpy     #$025c
        bne     @d2fc
        ldy     $5b
        iny
        sty     $5b
        inc     $62ad
        inc     $62ae
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$32:  ]

AnimCmd_80_32:
magic_init_50:
@d33e:  ldx     $7af6
        lda     $6f87,x
        beq     @d34a
        lda     #$01
        bra     @d34b
@d34a:  clr_a
@d34b:  longa
        asl
        sta     $22
        lda     $5b
        inc
        clc
        adc     $22
        sta     $5b
        lda     [$5b]
        dec
        sta     $5b
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$63: move in vertical sine wave (narrow) ]

; b1: speed

AnimCmd_80_63:
magic_init_99:
@d361:  lda     #$20
        bra     _d367

; ------------------------------------------------------------------------------

; [ battle animation command $80/$31: move in vertical sine wave (wide) ]

; b1: speed

AnimCmd_80_31:
magic_init_49:
@d365:  lda     #$50
_d367:  sta     $24
        ldx     $7af6
        lda     $64e9,x
        jsr     CalcVecSine
        ldx     $7af6
        longa
        lda     $22
        sta     $74d0,x     ; thread y offset
        shorta0
        ldy     #$0001
        lda     $64e9,x
        clc
        adc     [$5b],y
        sta     $64e9,x
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$30: load animation palette for character 1 ]

; b1: palette index

AnimCmd_80_30:
magic_init_48:
@d38e:  lda     [$5b],y     ; palette index
        longa
        asl4
        tax
        clr_ay
@d399:  lda     f:AttackPal,x
        sta     $7f80,y
        inx2
        iny2
        cpy     #$0010
        bne     @d399
        shorta0
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$2f:  ]

AnimCmd_80_2f:
magic_init_47:
@d3af:  ldx     $7af6
        lda     #$08
        sta     $60af
        stz     $60b0
        jsr     Rand
        and     #$07
        sta     $22
        lda     $6f87,x
        bne     @d3ca       ; branch if mirrored
        lda     #$7c
        bra     @d3d2
@d3ca:  lda     #$fc
        ldy     #$0002
        clc
        adc     [$5b],y
@d3d2:  clc
        adc     $22
        ldy     #$0001
        adc     [$5b],y
        sta     $74db,x     ; vector angle
        ldy     $5b
        iny2
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$2e: move thread ]

; b1: x position
; b2: y position

AnimCmd_80_2e:
magic_init_46:
@d3e4:  longa
        ldx     $7af6
        ldy     #$0001
        lda     [$5b],y
        and     #$00ff
        sta     $6a3a,x     ; thread x position
        iny
        lda     [$5b],y
        and     #$00ff
        sta     $6a3c,x     ; thread y position
        inc     $5b
        inc     $5b
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ check battle type ]

_c1d405:
get_mode_type:
@d405:  ldx     $7af6
        lda     $201f
        and     #$03
        cmp     #$03
        bne     @d422
        lda     $6a38,x     ; attacker
        bmi     @d41e       ; branch if a monster
        cmp     #$02
        bcc     @d41e
        lda     #$01
        bra     @d422
@d41e:  lda     #$02
        rts
        clr_a
@d422:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$2d: jump based on battle type ]

; +b1: jump address for normal attack
; +b3: jump address for back attack (or side attack if attacker is character 3/4)
; +b5: jump address for pincer attack (or side attack if attacker is character 1/2 or monster)

AnimCmd_80_2d:
magic_init_45:
@d423:  jsr     _c1d405
        longa
        asl
        sta     $22
        lda     $5b
        inc
        clc
        adc     $22
        sta     $5b
        lda     [$5b]
        dec
        sta     $5b
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$2b: load animation palette (bg1) ]

; b1: palette index

AnimCmd_80_2b:
magic_init_43:
@d43c:  lda     [$5b],y
        jsr     LoadBG1AnimPal
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$2c: load animation palette (bg3) ]

; b1: palette index

AnimCmd_80_2c:
magic_init_44:
@d444:  lda     [$5b],y
        jsr     LoadBG3AnimPal
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$2a: load animation palette (sprite) ]

; b1: palette index

AnimCmd_80_2a:
magic_init_42:
@d44c:  lda     [$5b],y
        jsr     LoadSpriteAnimPal
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$29: hide/show cursor sprites (during esper attack) ]

AnimCmd_80_29:
magic_init_41:
@d454:  lda     [$5b],y
        sta     $62be       ; hide/show cursor sprites (during esper attack
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$28:  ]

AnimCmd_80_28:
magic_init_40:
@d45c:  lda     [$5b],y
        sta     $10
        lda     $61bd
        and     #$cf
        ora     $10
        sta     $61bd
        lda     $61dd
        and     #$cf
        ora     $10
        sta     $61dd
        lda     $61fd
        and     #$cf
        ora     $10
        sta     $61fd
        lda     $621d
        and     #$cf
        ora     $10
        sta     $621d
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$27: hide/show characters for esper attack ]

; b1: 1 = hide, 0 = show

AnimCmd_80_27:
magic_init_39:
@d48b:  lda     [$5b],y
        sta     $62bd
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$26:  ]

AnimCmd_80_26:
magic_init_38:
@d493:  lda     [$5b],y
        sta     $62bf
        jmp     _c1cfc6

; ------------------------------------------------------------------------------

; [ battle animation command $80/$24:  ]

AnimCmd_80_24:
magic_init_36:
@d49b:  clr_ax
        longa
@d49f:  stz     $4af5,x
        inx2
        cpx     #$025c
        bne     @d49f
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$25:  ]

AnimCmd_80_25:
magic_init_37:
@d4ad:  clr_ax
        longa
@d4b1:  stz     $43f5,x
        inx2
        cpx     #$025c
        bne     @d4b1
        shorta
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$23:  ]

AnimCmd_80_23:
magic_init_35:
@d4be:  shorti
        longa
        clr_ax
        lda     $4653
        pha
@d4c8:  dec     $43f7,x
        dec     $4443,x
        dec     $448f,x
        dec     $44db,x
        dec     $4527,x
        dec     $4573,x
        dec     $45bf,x
        dec     $460b,x
        inx4
        cpx     #$4c
        bne     @d4c8
        pla
        sta     $4653
        shorta0
        longi
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$22:  ]

AnimCmd_80_22:
magic_init_34:
@d4f2:  longa
        lda     $7b18
        sec
        sbc     $7b1f
        sta     $10
        clr_ayx
@d500:  lda     f:_c2d39f,x
        and     #$00ff
        sta     $12
        lda     $10
@d50b:  sta     $43f7,y
        dec
        iny4
        cpy     #$012c
        beq     @d524
        dec     $12
        bne     @d50b
        dec
        sta     $10
        inc     $14
        inx
        bra     @d500
@d524:  dec
        sta     $10
@d527:  lda     f:_c2d39f,x
        and     #$00ff
        sta     $12
        lda     $10
@d532:  sta     $43f7,y
        dec
        iny4
        cpy     #$025c
        beq     @d54a
        dec     $12
        bne     @d532
        dec
        sta     $10
        dec     $14
        bra     @d527
@d54a:  shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$21: update sprite layer priority based on polar angle ]

AnimCmd_80_21:
magic_init_33:
@d54e:  ldx     $7af6
        lda     $74d8,x     ; vector angle
        clc
        adc     #$40
        bmi     @d562       ; branch if between 180 and 360 degrees
        lda     $64e7,x     ; set sprite layer priority to low
        and     #$fe
        sta     $64e7,x
        rts
@d562:  lda     $64e7,x     ; set sprite layer priority to high
        ora     #$01
        sta     $64e7,x
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$1e: scroll bg3 for pearl ]

AnimCmd_80_1e:
magic_init_30:
@d56b:  shorti
        longa
        clr_ax
        lda     $4d53       ; save menu region bg3 scroll hdma data (vertical)
        pha
@d575:  dec     $4af7,x     ; decrement all bg3 scroll hdma values (vertical)
        dec     $4b43,x
        dec     $4b8f,x
        dec     $4bdb,x
        dec     $4c27,x
        dec     $4c73,x
        dec     $4cbf,x
        dec     $4d0b,x
        inx4
        cpx     #$4c
        bne     @d575
        pla
        sta     $4d53       ; restore menu region bg3 scroll hdma data (vertical)
        shorta0
        longi
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$20: init bg3 hdma scroll data for pearl (vertical) ]

AnimCmd_80_20:
magic_init_32:
@d59f:  longa
        lda     $7b24       ; bg3 thread y offset
        sec
        sbc     $7b2b       ; bg3 thread y position
        sta     $10
        clr_ayx
@d5ad:  lda     f:_c2d39f,x
        and     #$00ff
        sta     $12
        lda     $10
@d5b8:  sta     $4af7,y     ; bg3 scroll hdma data (vertical)
        dec                 ; decrement vertical scroll
        iny4
        cpy     #$012c
        beq     @d5d1
        dec     $12
        bne     @d5b8
        dec
        sta     $10
        inc     $14
        inx
        bra     @d5ad
@d5d1:  dec
        sta     $10
@d5d4:  lda     f:_c2d39f,x
        and     #$00ff
        sta     $12
        lda     $10
@d5df:  sta     $4af7,y     ; bg3 scroll hdma data (vertical)
        dec
        iny4
        cpy     #$025c
        beq     @d5f8
        dec     $12
        bne     @d5df
        dec
        sta     $10
        dec     $14
        dex
        bra     @d5d4
@d5f8:  shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$1f: init bg3 hdma scroll data for pearl (horizontal) ]

; pearl

AnimCmd_80_1f:
magic_init_31:
@d5fc:  lda     #$4c
        sta     $9613       ; circle size
        lda     $961b       ; save circle shape
        pha
        stz     $961b       ; circle shape 0 (circle)
        lda     #$4c
        sta     $9615       ; circle y position
        lda     #$80
        sta     $9614       ; circle x position
        jsr     UpdateCircle_near
        clr_ax
@d617:  lda     $9a21,x     ; window position hdma data buffer
        sta     $4af5,x     ; bg3 scroll hdma data (horizontal)
        stz     $4af6,x
        inx4
        cpx     #$025c
        bne     @d617
        pla
        sta     $961b       ; restore circle shape
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$19:  ]

AnimCmd_80_19:
magic_init_25:
@d62e:  ldx     #$002c
        stx     $24
        lda     #$10
        sec
        sbc     $616c
        bne     @d640
        ldx     #$0034
        stx     $24
@d640:  longa
        asl3
        sta     $22
        ldx     $7af6
        lda     $6a3c,x
        clc
        adc     $22
        sec
        sbc     $24
        sta     $6a3c,x
        shorta0
        jsr     ResetSpritePriority
        ldx     $7af6
        lda     $6a38,x
        jsr     _c1c3fa
        ldx     $7af6
        lda     $6a38,x
        asl5
        tay
        lda     #$30
        sta     $61bd,y
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$18: load sketched monster palette ]

AnimCmd_80_18:
magic_init_24:
@d677:  ldx     $6169       ; pointer to sketched monster palette
        clr_ay
@d67c:  lda     f:MonsterPal,x
        sta     $7e60,y     ; bg palette 2
        sta     $7c60,y
        inx
        iny
        cpy     #$0020
        bne     @d67c
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$16:  ]

AnimCmd_80_16:
magic_init_22:
@d68e:  ldx     $7af6
        stz     $64e8,x
        stz     $64e9,x
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$15: move circle to thread position ]

AnimCmd_80_15:
magic_init_21:
@d698:  ldx     $7af6
        longa
        lda     $6a3a,x     ; thread x position
        clc
        adc     $74ce,x     ; thread x offset
        sta     $22
        lda     $6a3c,x     ; thread y position
        clc
        adc     $74d0,x     ; thread y offset
        sta     $24
        shorta0
        lda     $22
        sta     $9614       ;
        lda     $24
        sta     $9615
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$14: make target vanish ]

AnimCmd_80_14:
magic_init_20:
@d6bd:  ldx     $7af6
        lda     $6a39,x     ; target
        bmi     @d6e4       ; return if a monster
        and     #$03
        sta     $10
        asl5
        tax
        lda     $2ebd,x     ; set vanish status
        ora     #$10
        sta     $2ebd,x
        lda     $10
        sta     $7b78
        ldx     $7af6
        phx
        jsr     _c12f79       ; update character status change animations
        plx
@d6e4:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$13: toggle imp graphics for target ]

AnimCmd_80_13:
magic_init_19:
@d6e5:  ldx     $7af6
        lda     $6a39,x     ; target
        bmi     @d70d       ; branch if a monster
        and     #$03
        sta     $10
        asl5
        tax
        lda     $2ebd,x     ; toggle imp status
        eor     #$20
        sta     $2ebd,x
        lda     $10
        sta     $7b78       ; character index for status change animations
        ldx     $7af6
        phx
        jsr     _c12f79       ; update character status change animations
        plx
        rts
@d70d:  and     #$7f
        sec
        sbc     #$04
        tay
        lda     $62c2,y     ; toggle imp graphics
        eor     #$01
        sta     $62c2,y
        ldx     $7af6
        phx
        jsr     InitMonsterGfx
        jsr     WaitTfrMonsterGfx
        plx
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$11: randomize vector angle ]

AnimCmd_80_11:
magic_init_17:
@d727:  jsr     Rand
        ldx     $7af6
        sta     $74d8,x
        stz     $74d9,x
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$12: init polar movement ]

AnimCmd_80_12:
magic_init_18:
@d734:  ldx     $7af6
        stz     $74d8,x     ; polar angle
        stz     $74d9,x     ; polar radius
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$10:  ]

AnimCmd_80_10:
magic_init_16:
@d73e:  longa
        ldx     $7af6
        lda     $6f82,x     ; target x position
        sta     $6a3a,x     ; thread x position
        lda     $6f84,x
        sta     $6a3c,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$0c:  ]

AnimCmd_80_0c:
magic_init_12:
@d753:  longa
        lda     $7af6
        tax
        and     #$ff80      ; pointer to first sprite thread
        tay
        lda     $6a3a,y     ; thread x position
        sta     $6a3a,x
        lda     $6a3c,y     ; thread y position
        sta     $6a3c,x
        lda     $74ce,y     ; thread x offset
        sta     $74ce,x
        lda     $74d0,y     ; thread y offset
        sta     $74d0,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$0f:  ]

AnimCmd_80_0f:
magic_init_15:
@d779:  ldx     $7af6
        lda     #$08
        sta     $60af       ;
        stz     $60b0       ;
        jsr     Rand
        and     #$07
        sta     $22
        lda     $6f87,x
        bne     @d794       ; branch if mirrored
        lda     #$7c
        bra     @d796
@d794:  lda     #$fc
@d796:  clc
        adc     $22
        sta     $74db,x     ; vector angle
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$0e:  ]

AnimCmd_80_0e:
magic_init_14:
@d79d:  ldx     $7af6
        lda     $6a38,x     ; attacker
        bpl     @d7c3       ; return if a character
        and     #$7f
        sec
        sbc     #$04
        asl
        tay
        longa
        lda     $80c3,y     ; monster left x coordinate
        sta     $64e8,x
        lda     $80cf,y     ; monster top y coordinate
        sta     $64ea,x
        clr_a
        sta     $80b7,y     ;
        sta     $80ab,y
        shorta
@d7c3:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$0d:  ]

AnimCmd_80_0d:
magic_init_13:
@d7c4:  ldx     $7af6
        longa
        lda     $74d9,x
@d7cc:  clc
        adc     #$0008
        cmp     $74dc,x
        bcc     @d7cc
        sec
        sbc     #$0008
        sta     $74d9,x
        shorta0
        jsr     CalcJumpHeight
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$0b: update esper pre-animation balls position ]

AnimCmd_80_0b:
magic_init_11:
@d7e3:  ldx     $7af6
        lda     $74d9,x     ;
        sta     $24
        lda     $74d8,x     ; direction
        jsr     CalcVecSine
        ldx     $7af6
        longa
        lda     $22
        sta     $74d0,x     ; x position
        shorta0
        lda     $74d8,x     ; direction + 90 degrees
        clc
        adc     #$40
        jsr     CalcVecSine
        ldx     $7af6
        longa
        lda     $22
        sta     $74ce,x     ; y position
        shorta0
        lda     $74d8,x     ; rotate 4 counterclockwise
        sec
        sbc     #$04
        sta     $74d8,x
        lda     $74d9,x     ; increase radius by 2
        clc
        adc     #$02
        cmp     #$30        ; max 48
        bcs     @d82a
        sta     $74d9,x
@d82a:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$0a:  ]

AnimCmd_80_0a:
magic_init_10:
@d82b:  ldx     $7af6
        lda     #$30
        sta     $24
        lda     $74d8,x
        eor     $74d9,x
        jsr     CalcVecSine
        ldx     $7af6
        longa
        lda     $22
        sta     $74d0,x
        shorta0
        lda     $74d8,x
        clc
        adc     #$20
        jsr     CalcVecSine
        ldx     $7af6
        longa
        lda     $22
        sta     $74ce,x
        shorta0
        lda     $74d8,x
        sec
        sbc     #$04
        sta     $74d8,x
        rts

; ------------------------------------------------------------------------------

; [ +$22 = $24 * sin (a) ]

CalcVecSine:
@d868:  jsr     CalcSine8
        bmi     @d872       ; branch if negative
        sta     $22
        stz     $23
        rts
@d872:  sta     $22
        lda     #$ff
        sta     $23
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$09: update character/monster sprite tile priority for tornado ]

; w wind/spiraler

AnimCmd_80_09:
magic_init_9:
@d879:  lda     #$30
        sta     $61bd       ; show all sprites in front of bg1
        sta     $61dd
        sta     $61fd
        sta     $621d
        lda     #$31
        sta     $80dc
        sta     $80de
        sta     $80e0
        sta     $80e2
        sta     $80e4
        sta     $80e6
        ldx     $7af6
        longa
        lda     $6a3c,x     ; thread y position
        clc
        adc     $74d0,x     ; thread y offset
        clc
        adc     #$0046
        sta     $24
        clr_axy
@d8b0:  lda     $24
        cmp     $8043,y     ; character bottom y coordinate
        bcc     @d8c1
        shorta
        lda     #$20
        sta     $61bd,x     ; show sprite behind bg1
        clr_a                 ; next character
        longa
@d8c1:  txa
        clc
        adc     #$0020
        tax
        iny2
        cpy     #$0008
        bne     @d8b0
        clr_ay
@d8d0:  lda     $24
        cmp     $8027,y     ; monster bottom y coordinate
        bcc     @d8e0
        shorta
        lda     #$21
        sta     $80dc,y     ; show sprite behind bg1
        longa
@d8e0:  iny2
        cpy     #$000c
        bne     @d8d0
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$08: move thread to vector position ]

; w wind/spiraler

AnimCmd_80_08:
magic_init_8:
@d8eb:  ldx     $7af6
        jsr     MoveAnimToVector
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$07: move tornado to thread position ]

; w wind/spiraler

AnimCmd_80_07:
magic_init_7:
@d8f2:  ldx     $7af6
        longa
        lda     $74ce,x     ; thread x offset
        sta     $5f9e       ; tornado x position
        lda     $74d0,x     ; thread y offset
        sta     $5f8e       ; tornado y position
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$06: init tornado ]

; w wind/spiraler

AnimCmd_80_06:
magic_init_6:
@d907:  clr_ax
@d909:  stz     $5f6d,x     ; clear tornado data
        inx
        cpx     #$0040
        bne     @d909
        jsr     Rand
        clr_a
        sta     $5f6d
        clc
        adc     #$10
        sta     $5f7d
        lda     #$08
        sta     $24
        sta     $1a
        ldx     #$0100
        stx     $1c
        ldx     #$44f5
        clr_a
        jsr     _c10d8b
        jsr     _c1e5b4
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$05:  ]

; bum rush

AnimCmd_80_05:
magic_init_5:
@d938:  jsr     GetAttackerThreadPtr
        longa
        lda     $61c5,y
        sta     $74ce,x
        lda     $61c7,y
        sta     $74d0,x
        shorta0
        lda     $6a38,x
        tay
        lda     $7b10,y
        beq     @d958
        clr_a
        bra     @d95a
@d958:  lda     #$80
@d95a:  sta     $6a3a,x
        lda     #$04
        sta     $6a3b,x
        lda     $74d2,x
        asl2
        clc
        adc     #$08
        sta     $6a3c,x
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$04: randomize vector angle and position ]

AnimCmd_80_04:
magic_init_4:
@d96e:  jsr     Rand
        ldx     $7af6
        sta     $74d8,x     ; vector angle
        jsr     Rand
        ldx     $7af6
        sta     $74d9,x     ; vector position
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$02:  ]

AnimCmd_80_02:
magic_init_2:
@d981:  jsr     GetAttackerThreadPtr
        lda     $61be,y
        sta     $60b2
        lda     $6a38,x
        tay
        lda     $7b10,y
        sta     $60b1
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$03:  ]

AnimCmd_80_03:
magic_init_3:
@d995:  jsr     GetAttackerThreadPtr
        lda     $60b2
        sta     $61be,y
        lda     $6a38,x
        tay
        lda     $60b1
        sta     $7b10,y
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$01:  ]

AnimCmd_80_01:
magic_init_1:
@d9a9:  jsr     GetAttackerThreadPtr
        longa
        clr_a
        sta     $61c5,y
        sta     $61c7,y
        sta     $74ce,x
        sta     $74d0,x
        shorta
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$00:  ]

AnimCmd_80_00:
magic_init_0:
@d9be:  jsr     GetAttackerThreadPtr
        longa
        lda     $61b7,y     ; character x position
        clc
        adc     $61d4,y     ; character x offset
        sta     $6f82,x     ; target x position
        lda     $61b9,y     ; character y position
        sta     $6f84,x     ; target y position
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ execute battle animation command ]

ExecAnimCmd:
set_magic_code:
@d9d7:  and     #$7f
        asl
        stx     $7af6
        tax
        ldy     $5b
        iny
        sty     $5b
        jmp     (.loword(AnimCmdTbl),x)

; ------------------------------------------------------------------------------

; battle animation command jump table ($80-$fe)
AnimCmdTbl:
@d9e6:  .addr   AnimCmd_80
        .addr   AnimCmd_81
        .addr   AnimCmd_82
        .addr   AnimCmd_83
        .addr   AnimCmd_84
        .addr   AnimCmd_85
        .addr   AnimCmd_86
        .addr   AnimCmd_87
        .addr   AnimCmd_88
        .addr   AnimCmd_89
        .addr   AnimCmd_8a
        .addr   AnimCmd_8b
        .addr   AnimCmd_8c
        .addr   AnimCmd_8d
        .addr   AnimCmd_8e
        .addr   AnimCmd_8f
        .addr   AnimCmd_90
        .addr   AnimCmd_91
        .addr   AnimCmd_92
        .addr   AnimCmd_93
        .addr   AnimCmd_94
        .addr   AnimCmd_95
        .addr   AnimCmd_96
        .addr   AnimCmd_97
        .addr   AnimCmd_98
        .addr   AnimCmd_99
        .addr   AnimCmd_9a
        .addr   AnimCmd_9b
        .addr   AnimCmd_9c
        .addr   AnimCmd_9d
        .addr   AnimCmd_9e
        .addr   AnimCmd_9f
        .addr   AnimCmd_a0
        .addr   AnimCmd_a1
        .addr   AnimCmd_a2
        .addr   AnimCmd_a3
        .addr   AnimCmd_a4
        .addr   AnimCmd_a5
        .addr   AnimCmd_a6
        .addr   AnimCmd_a7
        .addr   AnimCmd_a8
        .addr   AnimCmd_a9
        .addr   AnimCmd_aa
        .addr   AnimCmd_ab
        .addr   AnimCmd_ac
        .addr   AnimCmd_ad
        .addr   AnimCmd_ae
        .addr   AnimCmd_af
        .addr   AnimCmd_b0
        .addr   AnimCmd_b1
        .addr   AnimCmd_b2
        .addr   AnimCmd_b3
        .addr   AnimCmd_b4
        .addr   AnimCmd_b5
        .addr   AnimCmd_b6
        .addr   AnimCmd_b7
        .addr   AnimCmd_b8
        .addr   AnimCmd_b9
        .addr   AnimCmd_ba
        .addr   AnimCmd_bb
        .addr   AnimCmd_bc
        .addr   AnimCmd_bd
        .addr   AnimCmd_be
        .addr   AnimCmd_bf
        .addr   AnimCmd_c0
        .addr   AnimCmd_c1
        .addr   AnimCmd_c2
        .addr   AnimCmd_c3
        .addr   AnimCmd_c4
        .addr   AnimCmd_c5
        .addr   AnimCmd_c6
        .addr   AnimCmd_c7
        .addr   AnimCmd_c8
        .addr   AnimCmd_c9
        .addr   AnimCmd_ca
        .addr   AnimCmd_cb
        .addr   AnimCmd_cc
        .addr   AnimCmd_cd
        .addr   AnimCmd_ce
        .addr   AnimCmd_cf
        .addr   AnimCmd_d0
        .addr   AnimCmd_d1
        .addr   AnimCmd_d2
        .addr   AnimCmd_d3
        .addr   AnimCmd_d4
        .addr   AnimCmd_d5
        .addr   AnimCmd_d6
        .addr   AnimCmd_d7
        .addr   AnimCmd_d8
        .addr   AnimCmd_d9
        .addr   AnimCmd_da
        .addr   AnimCmd_db
        .addr   AnimCmd_dc
        .addr   AnimCmd_dd
        .addr   AnimCmd_de
        .addr   AnimCmd_df
        .addr   AnimCmd_e0
        .addr   AnimCmd_e1
        .addr   AnimCmd_e2
        .addr   AnimCmd_e3
        .addr   AnimCmd_e4
        .addr   AnimCmd_e5
        .addr   AnimCmd_e6
        .addr   AnimCmd_e7
        .addr   AnimCmd_e8
        .addr   AnimCmd_e9
        .addr   AnimCmd_ea
        .addr   AnimCmd_eb
        .addr   AnimCmd_ec
        .addr   AnimCmd_ed
        .addr   AnimCmd_ee
        .addr   AnimCmd_ef
        .addr   AnimCmd_f0
        .addr   AnimCmd_f1
        .addr   AnimCmd_f2
        .addr   AnimCmd_f3
        .addr   AnimCmd_f4
        .addr   AnimCmd_f5
        .addr   AnimCmd_f6
        .addr   AnimCmd_f7
        .addr   AnimCmd_f8
        .addr   AnimCmd_f9
        .addr   AnimCmd_fa
        .addr   AnimCmd_fb
        .addr   AnimCmd_fc
        .addr   AnimCmd_fd
        .addr   AnimCmd_fe

; ------------------------------------------------------------------------------

; [ battle animation command $c9:  ]

AnimCmd_c9:
magic_code49:
@dae4:  ldx     $7af6
        lda     $6f82,x
        sta     $10
        lda     [$5b]
        jne     PlayAnimSfx
        lda     $e9e7
        jmp     PlayAnimSfx

; ------------------------------------------------------------------------------

; [ battle animation command $f9: set magitek armor action ]

; b1: magitek animation type
; b2: 0 = attacker, 1 = target
; b3: character index (used if msb set)

AnimCmd_f9:
magic_code79:
@daf9:  ldx     $7af6
        ldy     #$0002
        lda     [$5b],y
        bmi     @db14
        dey
        lda     [$5b],y
        beq     @db0f
        lda     $6a39,x     ; target
        bmi     @db1c       ; branch if a monster
        bra     @db14
@db0f:  lda     $6a38,x     ; attacker
        bmi     @db1c       ; branch if a monster
@db14:  and     #$03
        tay
        lda     [$5b]
        sta     $64cc,y     ; magitek animation type
@db1c:  ldy     $5b
        iny2
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $fa: jump ]

; +b1: jump address

AnimCmd_fa:
magic_code7a:
@db23:  ldx     $7af6
        longa
        lda     [$5b]
        dec
        sta     $5b         ; set script pointer
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $f8: jump based on magitek mode ]

; +b1: jump address
; +b3: jump address if magitek mode

AnimCmd_f8:
magic_code78:
@db31:  ldx     $7af6
        lda     $64ba
        beq     @db3b
        lda     #$01
@db3b:  longa
        asl
        sta     $22
        lda     $5b
        clc
        adc     $22
        sta     $5b
        lda     [$5b]
        dec
        sta     $5b
        clr_a
@db4d:  shorta
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $f7: wait for scanline ]

; b1: scanline

AnimCmd_f7:
magic_code77:

.if LANG_EN_REV1
; **** added in rev 1 ****
@db4d:  lda     f:hHVBJOY
        bmi     @db4d       ; branch if in vblank
@db53:  lda     f:hHVBJOY
        and     #$40
        beq     @db53       ; branch if not in hblank
@db5b:  lda     f:hHVBJOY
        and     #$40
        bne     @db5b       ; branch if in hblank
; ************************
.endif

@db50:  lda     f:hSTAT78
        lda     f:hSLHV
        lda     f:hOPVCT
        cmp     [$5b]
        bcc     @db50
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $f3: jump based on attacker ]

; +b1 = jump address if char 1 is attacker
; +b3 = jump address if char 2 is attacker
; +b5 = jump address if char 3 is attacker
; +b7 = jump address if char 4 is attacker
; +b9 = jump address if monster is attacker (any)

AnimCmd_f3:
magic_code73:
@db64:  ldx     $7af6
        lda     $6a38,x     ; attacker number
        bra     _db72

; ------------------------------------------------------------------------------

; [ battle animation command $f0: jump based on target ]

AnimCmd_f0:
magic_code70:
@db6c:  ldx     $7af6
        lda     $6a39,x     ; target number
_db72:  bmi     @db78       ; branch if a monster
        and     #$03
        bra     @db7a
@db78:  lda     #$04
@db7a:  longa
        asl
        sta     $22
        lda     $5b
        clc
        adc     $22
        sta     $5b
        lda     [$5b]
        dec
        sta     $5b
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $ed:  ]

AnimCmd_ed:
magic_code6d:
@db8f:  ldx     $7af6
        longa
        lda     $6a3a,x     ; thread x position
        sta     $22
        and     #$0100
        beq     @dba1
        dec
        sta     $22
@dba1:  lda     $6a3c,x     ; thread y position
        sta     $24
        and     #$0100
        beq     @dbae
        dec
        sta     $24
@dbae:  shorta0
        lda     $22
        sta     $7d
        lda     $24
        sta     $7e
        lda     $6f82,x     ; target x position
        sta     $7f
        lda     $6f84,x     ; target y position
        sta     $80
        jsr     CalcVector
        ldx     $7af6
        lda     #$07
        sta     $24
        jsr     _c1e7ba
        lda     $85
        sec
        sbc     $74db,x     ; vector angle
        bmi     @dbe3
        lda     $74db,x
        clc
        adc     $22
        sta     $74db,x
        bra     @dbec
@dbe3:  lda     $74db,x     ; vector angle
        sec
        sbc     $22
        sta     $74db,x
@dbec:  lda     [$5b]
        clc
        adc     #$04
        sta     $24
        ldx     $7af6
        lda     $86
        cmp     $24
        bcs     @dc02
        ldy     $5b
        iny
        sty     $5b
        rts
@dc02:  lda     [$5b]
        tay
        sty     $24
        lda     $74db,x     ; vector angle
        clc
        adc     #$40
        jsr     CalcSine16
        ldx     $7af6
        longa
        lda     $6a3a,x     ; thread x position += +$28
        clc
        adc     $28
        sta     $6a3a,x
        shorta0
        ldx     $7af6
        lda     [$5b]
        tay
        sty     $24
        lda     $74db,x
        jsr     CalcSine16
        ldx     $7af6
        longa
        lda     $6a3c,x     ; thread y position += +$28
        clc
        adc     $28
        sta     $6a3c,x
        ldy     #$0001
        lda     [$5b],y
        and     #$00ff
        sta     $22
        lda     $5b
        sec
        sbc     $22
        sta     $5b
        shorta0
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $ec: change thread layer ]

; b1: thread layer (0 = sprite, 1 = bg1, 2 = bg3)

AnimCmd_ec:
magic_code6c:
@dc55:  ldx     $7af6
        lda     $6f86,x     ; thread layer
        and     #$fc
        ora     [$5b]
        sta     $6f86,x
        stz     $6f8c,x     ; clear frame offset
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $eb: jump based on thread index ]

;  +b1: jump address for thread 0
;  +b3: jump address for thread 1
;  +b5: jump address for thread 2
;  +b7: jump address for thread 3
;  +b9: jump address for thread 4
; +b11: jump address for thread 5
; +b13: jump address for thread 6
; +b15: jump address for thread 7

AnimCmd_eb:
magic_code6b:
@dc66:  ldx     $7af6
        lda     $6a36,x     ; thread index
        longa
        asl
        sta     $22
        lda     $5b         ; animation script pointer += thread index * 2
        clc
        adc     $22
        sta     $5b
        lda     [$5b]       ; jump address
        dec
        sta     $5b         ; set new script pointer
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $ea: set bg tile data location ]

; b1: 13--xxxx
;       1: affect bg1
;       3: affect bg3
;       x: tile data location (0 = top-left, 1 = top-right, 2 = bottom-left, 3 = bottom-right)
;          for bg1 only (4 = monster tile data, 5 = ???, 6 = top-left of bg3, 7 = top-right of bg3)

AnimCmd_ea:
magic_code6a:
@dc81:  lda     [$5b]
        bpl     @dc8a
        and     #$0f
        sta     $62c8       ; bg1 tile data quadrant
@dc8a:  lda     [$5b]
        and     #$40
        beq     @dc97
        lda     [$5b]
        and     #$0f
        sta     $62c9       ; bg3 tile data quadrant
@dc97:  ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $e9: move randomly ]

; b1: x distance (mask)
; b2: y distance (mask)

AnimCmd_e9:
magic_code69:
@dc9b:  jsr     Rand
        sta     $10
        jsr     Rand
        sta     $12
        ldx     $7af6
        lda     $10
        and     [$5b]
        sta     $74ce,x     ; set x offset
        stz     $74cf,x
        lda     $6f87,x     ; h flip
        beq     @dcc6       ; branch if not flipped
        longa
        lda     $74ce,x     ; invert x offset
        eor     #$ffff
        inc
        sta     $74ce,x
        shorta0
@dcc6:  ldy     #$0001
        lda     $12
        and     [$5b],y
        sta     $74d0,x     ; set y offset
        stz     $74d1,x
        ldy     $5b
        iny
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $ef: move in flattened polar coordinates ]

; b1: angle
; b2: radius

AnimCmd_ef:
magic_code6f:
@dcd9:  lda     #$01
        sta     $1a
        bra     _dce1

; ------------------------------------------------------------------------------

; [ battle animation command $e8: move in polar coordinates ]

; b1: angle
; b2: radius

AnimCmd_e8:
magic_code68:
@dcdf:  stz     $1a
_dce1:  ldx     $7af6
        lda     $74d9,x     ; current vector position
        sta     $24
        lda     $74d8,x     ; vector angle
        jsr     CalcVecSine
        ldx     $7af6
        longa
        lda     $6f87,x
        and     #$00ff
        beq     @dd03       ; branch if not mirrored
        lda     $22
        eor     #$ffff
        sta     $22
@dd03:  lda     $22
        sta     $74ce,x     ; x offset
        shorta0
        lda     $1a
        beq     @dd11       ; branch if not flattened
        lsr     $24
@dd11:  lda     $74d8,x     ; vector angle + $40
        clc
        adc     #$40
        jsr     CalcVecSine
        ldx     $7af6
        longa
        lda     $22
        sta     $74d0,x     ; y offset
        shorta0
        lda     $74d9,x     ; current vector position
        clc
        adc     [$5b]
        sta     $74d9,x     ; current vector position
        ldy     #$0001
        lda     $74d8,x     ; vector angle
        clc
        adc     [$5b],y
        sta     $74d8,x     ; vector angle
        ldy     $5b
        iny
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $e3:  ]

AnimCmd_e3:
magic_code63:
@dd42:  clr_a
        inc
        jsr     _c2ddd9
        ldx     $7af6
        lda     [$5b]
        sta     $26
        stz     $27
        longa
        lda     $74d7,x
        sec
        sbc     $26
        sta     $74d7,x
        bpl     @dd6d
        lda     $64e8,x
        sta     $80c3,y
        lda     $64ea,x
        sta     $80cf,y
        inc     $5b
        bra     @dd86
@dd6d:  lda     $14
        clc
        adc     $28
        sta     $80cf,y
        ldy     #$0001
        lda     [$5b],y
        and     #$00ff
        sta     $22
        lda     $5b
        sec
        sbc     $22
        sta     $5b
@dd86:  shorta0
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $e2:  ]

AnimCmd_e2:
magic_code62:
@dd8d:  clr_a
        jsr     _c2ddd9
        ldx     $7af6
        lda     [$5b]
        sta     $26
        stz     $27
        longa
        lda     $74d7,x
        sec
        sbc     $26
        sta     $74d7,x
        bpl     @ddb9
        lda     $14
        sta     $80cf,y
        lda     $74d9,x
        and     #$00ff
        sta     $74d7,x
        inc     $5b
        bra     @ddd2
@ddb9:  lda     $14
        clc
        adc     $28
        sta     $80cf,y
        ldy     #$0001
        lda     [$5b],y
        and     #$00ff
        sta     $22
        lda     $5b
        sec
        sbc     $22
        sta     $5b
@ddd2:  shorta0
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2ddd9:
set_mon_line_vec:
@ddd9:  pha
        ldx     $7af6
        lda     $6a38,x
        and     #$7f
        sec
        sbc     #$04
        asl
        tay
        sty     $7af8
        lda     [$5b]
        longa
        sta     $26
        lda     $80ab,y
        sta     $10
        lda     $80b7,y
        sta     $12
        shorta0
        pla
        beq     @de05
        jsr     _c2defe
        bra     @de08
@de05:  jsr     _c2dfa0
@de08:  ldx     $7af6
        lda     #$ff
        sta     f:hWRDIVL
        sta     f:hWRDIVH
        lda     $74d9,x
        sta     f:hWRDIVB
        ldy     $7af8
        longa
        lda     $10
        sta     $80ab,y
        clc
        adc     $64e8,x
        sta     $80c3,y
        lda     $12
        sta     $80b7,y
        clc
        adc     $64ea,x
        pha
        sta     $80cf,y
        lda     $74d7,x
        and     #$00ff
        sta     $22
        lda     f:hRDDIVL
        sta     $24
        jsr     Mult816
        shorta0
        ldx     #$0020
        stx     $24
        lda     $27
        lsr
        clc
        adc     #$80
        jsr     CalcSine16
        plx
        stx     $14
        ldy     $7af8
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [  ]

; unused ???

@de66:  ldx     $7af6
        lda     $6a38,x
        and     #$7f
        sec
        sbc     #$04
        asl
        tay
        sty     $7af8
        lda     $74d9,x
        sta     $24
        lda     $74da,x
        sta     $25
        lda     $74db,x
        clc
        adc     #$40
        jsr     CalcSine16
        ldx     $7af6
        ldy     $7af8
        longa
        lda     $28
        clc
        adc     $64e8,x
        sta     $80c3,y
        shorta0
        lda     $74db,x
        jsr     CalcSine16
        ldx     $7af6
        lda     #$ff
        sta     f:hWRDIVL
        sta     f:hWRDIVH
        lda     $74dd,x
        beq     @deb9
        lda     #$ff
        bra     @debc
@deb9:  lda     $74dc,x
@debc:  sta     f:hWRDIVB
        ldy     $7af8
        lda     $74d9,x
        longa
        sta     $22
        lda     $28
        pha
        lda     f:hRDDIVL
        sta     $24
        jsr     Mult816
        shorta0
        ldx     #$0020
        stx     $24
        lda     $27
        lsr
        clc
        adc     #$80
        jsr     CalcSine16
        ldy     $7af8
        ldx     $7af6
        longa
        pla
        clc
        adc     $28
        clc
        adc     $64ea,x
        sta     $80cf,y
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2defe:
vec_line_set:
@defe:  lda     $74dc,x
        sta     $22
        lda     $74dd,x
        sta     $24
        stz     $23
        stz     $25
        stz     $29
        lda     $22
        cmp     $24
        bcc     @df5a
        ldy     $12
        lda     $74da,x
        bmi     @df29
        longa
        lda     $10
        sec
        sbc     $26
        sta     $10
        shorta0
        bra     @df35
@df29:  longa
        lda     $10
        clc
        adc     $26
        sta     $10
        shorta0
@df35:  lda     $74db,x
        bmi     @df4a
        lda     $74d6,x
        sta     $28
        jsr     _c2e07c
        lda     $28
        sta     $74d6,x
        sty     $12
        rts
@df4a:  lda     $74d6,x
        sta     $28
        jsr     _c2e099
        lda     $28
        sta     $74d6,x
        sty     $12
        rts
@df5a:  ldy     $10
        lda     $74db,x
        bmi     @df6f
        longa
        lda     $12
        sec
        sbc     $26
        sta     $12
        shorta0
        bra     @df7b
@df6f:  longa
        lda     $12
        clc
        adc     $26
        sta     $12
        shorta0
@df7b:  lda     $74da,x
        bmi     @df90
        lda     $74d6,x
        sta     $28
        jsr     _c2e042
        lda     $28
        sta     $74d6,x
        sty     $10
        rts
@df90:  lda     $74d6,x
        sta     $28
        jsr     _c2e05f
        lda     $28
        sta     $74d6,x
        sty     $10
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2dfa0:
vec_line_set_ret:
@dfa0:  lda     $74dc,x
        sta     $22
        lda     $74dd,x
        sta     $24
        stz     $23
        stz     $25
        stz     $29
        lda     $22
        cmp     $24
        bcc     @dffc
        ldy     $12
        lda     $74da,x
        bmi     @dfcb
        longa
        lda     $10
        clc
        adc     $26
        sta     $10
        shorta0
        bra     @dfd7
@dfcb:  longa
        lda     $10
        sec
        sbc     $26
        sta     $10
        shorta0
@dfd7:  lda     $74db,x
        bmi     @dfec
        lda     $74d6,x
        sta     $28
        jsr     _c2e099
        lda     $28
        sta     $74d6,x
        sty     $12
        rts
@dfec:  lda     $74d6,x
        sta     $28
        jsr     _c2e07c
        lda     $28
        sta     $74d6,x
        sty     $12
        rts
@dffc:  ldy     $10
        lda     $74db,x
        bmi     @e011
        longa
        lda     $12
        clc
        adc     $26
        sta     $12
        shorta0
        bra     @e01d
@e011:  longa
        lda     $12
        sec
        sbc     $26
        sta     $12
        shorta0
@e01d:  lda     $74da,x
        bmi     @e032
        lda     $74d6,x
        sta     $28
        jsr     _c2e05f
        lda     $28
        sta     $74d6,x
        sty     $10
        rts
@e032:  lda     $74d6,x
        sta     $28
        jsr     _c2e042
        lda     $28
        sta     $74d6,x
        sty     $10
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2e042:
x_dec:
@e042:  lda     $22
        beq     @e05e
        longa
@e048:  lda     $28
        clc
        adc     $22
        cmp     $24
        bcc     @e055
        sec
        sbc     $24
        dey
@e055:  sta     $28
        dec     $26
        bne     @e048
        shorta0
@e05e:  rts

; ------------------------------------------------------------------------------

; [  ]

_c2e05f:
x_inc:
@e05f:  lda     $22
        beq     @e07b
        longa
@e065:  lda     $28
        clc
        adc     $22
        cmp     $24
        bcc     @e072
        sec
        sbc     $24
        iny
@e072:  sta     $28
        dec     $26
        bne     @e065
        shorta0
@e07b:  rts

; ------------------------------------------------------------------------------

; [  ]

_c2e07c:
y_dec:
@e07c:  lda     $24
        beq     @e098
        longa
@e082:  lda     $28
        clc
        adc     $24
        cmp     $22
        bcc     @e08f
        sec
        sbc     $22
        dey
@e08f:  sta     $28
        dec     $26
        bne     @e082
        shorta0
@e098:  rts

; ------------------------------------------------------------------------------

; [  ]

_c2e099:
y_inc:
@e099:  lda     $24
        beq     @e0b5
        longa
@e09f:  lda     $28
        clc
        adc     $24
        cmp     $22
        bcc     @e0ac
        sec
        sbc     $22
        iny
@e0ac:  sta     $28
        dec     $26
        bne     @e09f
        shorta0
@e0b5:  rts

; ------------------------------------------------------------------------------

; [  ]

_c2e0b6:
set_play_line_vec:
@e0b6:  pha
        jsr     GetAttackerThreadPtr
        lda     [$5b]
        longa
        sta     $26
        lda     $61c5,y
        sta     $10
        lda     $61c7,y
        sta     $12
        shorta0
        pla
        beq     @e0d5
        jsr     _c2defe
        bra     @e0d8
@e0d5:  jsr     _c2dfa0
@e0d8:  ldx     $7af6
        lda     #$ff
        sta     f:hWRDIVL
        sta     f:hWRDIVH
        lda     $74d9,x
        sta     f:hWRDIVB
        ldy     $7af8
        longa
        lda     $ebfa
        and     #$00ff
        beq     @e105
        lda     $10
        sta     $61c5,y
        lda     $12
        sta     $61c7,y
        bra     @e115
@e105:  lda     $10
        sta     $61c5,y
        sta     $74ce,x
        lda     $12
        sta     $61c7,y
        sta     $74d0,x
@e115:  lda     $74d7,x
        and     #$00ff
        sta     $22
        lda     f:hRDDIVL
        sta     $24
        jsr     Mult816
        shorta0
        ldy     #$0002
        lda     [$5b],y
        sta     $24
        stz     $25
        lda     $27
        lsr
        clc
        adc     #$80
        jsr     CalcSine16
        ldy     $7af8
        ldx     $7af6
        longa
        lda     $ebfa
        and     #$00ff
        bne     @e154
        lda     $74d0,x
        clc
        adc     $28
        sta     $74d0,x
@e154:  lda     $28
        sta     $61d2,y
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $e5: jump forward along vector ]

; b1: speed
; b2: number of bytes to branch backwards
; b3: jump height

AnimCmd_e5:
magic_code65:
@e15d:  clr_a
        jsr     _c2e0b6
        ldx     $7af6
        lda     [$5b]
        sta     $26
        stz     $27
        jsr     GetAttackerThreadPtr
        longa
        lda     $74d7,x
        sec
        sbc     $26
        sta     $74d7,x
        bpl     @e19b
        lda     $ebfa
        and     #$00ff
        bne     @e188
        lda     $61c7,y
        sta     $74d0,x
@e188:  lda     $74d9,x
        and     #$00ff
        sta     $74d7,x
        clr_a
        sta     $61d2,y
        inc     $5b
        inc     $5b
        bra     @e1ac
@e19b:  ldy     #$0001
        lda     [$5b],y
        and     #$00ff
        sta     $22
        lda     $5b
        sec
        sbc     $22
        sta     $5b
@e1ac:  shorta0
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $e6: jump backward along vector ]

; b1: speed
; b2: number of bytes to branch backwards
; b3: jump height

AnimCmd_e6:
magic_code66:
@e1b3:  clr_a
        inc
        jsr     _c2e0b6
        ldx     $7af6
        lda     [$5b]
        sta     $26
        stz     $27
        jsr     GetAttackerThreadPtr
        longa
        lda     $74d7,x
        sec
        sbc     $26
        sta     $74d7,x
        bpl     @e1e4
        stz     $74d0,x
        clr_a
        sta     $61d2,y
        sta     $61c5,y
        sta     $61c7,y
        inc     $5b
        inc     $5b
        bra     @e1f5
@e1e4:  ldy     #$0001
        lda     [$5b],y
        and     #$00ff
        sta     $22
        lda     $5b
        sec
        sbc     $22
        sta     $5b
@e1f5:  shorta0
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2e1fc:
get_jmp_vect:
@e1fc:  ldx     $7af6
        lda     $6a38,x
        bpl     @e219
        and     #$7f
        sec
        sbc     #$04
        asl
        tay
        lda     $800f,y
        sta     $614c
        lda     $8027,y
        sta     $614d
        bra     @e229
@e219:  and     #$03
        asl
        tay
        lda     $8033,y
        sta     $614c
        lda     $8043,y
        sta     $614d
@e229:  lda     $6a39,x
        bpl     @e246
        and     #$7f
        sec
        sbc     #$04
        asl
        tay
        lda     $800f,y
        sta     $614e
        lda     $8027,y
        clc
        adc     #$04
        sta     $614f
        bra     @e259
@e246:  and     #$03
        asl
        tay
        lda     $8033,y
        sta     $614e
        lda     $8043,y
        clc
        adc     #$04
        sta     $614f
@e259:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $e7: calculate vector from attacker to target ]

AnimCmd_e7:
magic_code67:
@e25a:  ldx     $7af6
        lda     $6f7e,x     ; attacker x position
        sta     $614c       ; vector x0
        lda     $6f80,x     ; attacker y position
        sta     $614d       ; vector y0
        lda     $6f82,x     ; target x position
        sta     $614e       ; vector x1
        lda     $64ba
        and     #$ff
        beq     @e27e       ; branch if not in magitek mode
        lda     $6f84,x     ; target y position
        sec
        sbc     #$18
        bra     @e281
@e27e:  lda     $6f84,x     ; target y position
@e281:  sta     $614f       ; vector y1
        bra     _e289

; ------------------------------------------------------------------------------

; [ battle animation command $e4:  ]

AnimCmd_e4:
magic_code64:
@e286:  jsr     _c2e1fc
_e289:  jsl     _c2dcc8
        ldx     $7af6
        longa
        dec     $5b
        lda     $6150
        sta     $74da,x
        lda     $6152
        sta     $74dc,x
        shorta0
        lda     $6152
        cmp     $6153
        bcc     @e2b0
        lda     $6152
        bra     @e2b3
@e2b0:  lda     $6153
@e2b3:  sta     $74d7,x
        sta     $74d9,x
        stz     $74d6,x
        stz     $74d8,x
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $f1: show/hide target ]

; b1: m------s
;       m: 0 = characters affected, 1 = monsters affected
;       s: 0 = hide, 1 = show

AnimCmd_f1:
magic_code71:
@e2c0:  jsr     GetAttackerThreadPtr
        lda     [$5b]
        bpl     @e2f8       ;
        lda     $6a39,x     ; target
        bpl     @e324       ; return if a character
        and     #$0f
        sec
        sbc     #$04
        tax
        lda     f:BitOrTbl,x
        sta     $10
        lda     [$5b]
        and     #$01
        beq     @e2e8
        lda     $61ab
        ora     $10
        sta     $61ab
        bra     @e324
@e2e8:  lda     $10
        eor     #$ff
        sta     $10
        lda     $61ab
        and     $10
        sta     $61ab
        bra     @e324
@e2f8:  lda     $6a39,x     ; target
        bmi     @e324       ; return if a monster
        and     #$03
        tax
        lda     f:BitOrTbl,x   ; bit masks
        sta     $10
        lda     [$5b]
        and     #$01
        beq     @e316       ;
        lda     $61ac       ; show character
        ora     $10
        sta     $61ac
        bra     @e324
@e316:  lda     $10
        eor     #$ff
        sta     $10
        lda     $61ac       ; hide character
        and     $10
        sta     $61ac
@e324:  ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $e1: show/hide attacker ]

; b1: m------s
;     m: 0 = characters affected, 1 = monsters affected
;     s: 0 = hide, 1 = show

AnimCmd_e1:
magic_code61:
@e328:  jsr     GetAttackerThreadPtr
        lda     [$5b]
        bpl     @e360
        lda     $6a38,x     ; attacker
        bpl     @e39c       ; return if a character
        and     #$0f
        sec
        sbc     #$04
        tax
        lda     f:BitOrTbl,x   ; bit mask
        sta     $10
        lda     [$5b]
        and     #$01
        beq     @e350
        lda     $61ab
        ora     $10
        sta     $61ab
        bra     @e39c
@e350:  lda     $10
        eor     #$ff
        sta     $10
        lda     $61ab
        and     $10
        sta     $61ab
        bra     @e39c
@e360:  lda     $6a38,x     ; attacker
        bmi     @e39c       ; return if a monster
        and     #$03
        tax
        lda     f:BitOrTbl,x   ; bit mask
        sta     $10
        lda     [$5b]
        and     #$01
        beq     @e386       ;
        lda     $61ac       ; characters shown
        ora     $10
        sta     $61ac
        lda     $2ec0,y     ; status 4
        and     #$df        ; clear hide status
        sta     $2ec0,y
        bra     @e39c
@e386:  lda     $10
        eor     #$ff
        sta     $10
        lda     $61ac
        and     $10
        sta     $61ac
        lda     $2ec0,y
        ora     #$20        ; set hide status
        sta     $2ec0,y
@e39c:  ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $e0:  ]

AnimCmd_e0:
magic_code60:
@e3a0:  ldx     $7af6
        lda     [$5b]
        sta     $22
        ldy     #$0001
        lda     [$5b],y
        sta     $24
        lda     $6f87,x
        and     #$01
        beq     @e3bc
        lda     $22
        eor     #$ff
        inc
        sta     $22
@e3bc:  lda     $6154
        clc
        adc     $22
        sta     $6154
        lda     $6155
        clc
        adc     $24
        sta     $6155
        ldy     #$0002
        lda     $6156
        clc
        adc     [$5b],y
        sta     $6156
        iny
        lda     $6157
        clc
        adc     [$5b],y
        sta     $6157
        ldy     $5b
        iny3
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $df: move triangle to target position ]

AnimCmd_df:
magic_code5f:
@e3ec:  ldx     $7af6
        lda     $6f82,x     ; target x position
        sta     $6154       ; triangle x position
        lda     $6f84,x     ; target y position
        sta     $6155       ; triangle y position
        ldy     $5b
        dey
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $de: move triangle to attacker position ]

AnimCmd_de:
magic_code5e:
@e401:  ldx     $7af6
        lda     $6f7e,x     ; attacker x position
        sta     $6154       ; triangle x position
        lda     $6f80,x     ; attacker y position
        sta     $6155       ; triangle y position
        ldy     $5b
        dey
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $dd: init triangle ]

AnimCmd_dd:
magic_code5d:
@e416:  clr_ay
        lda     [$5b]
        sta     $6154       ; triangle x position
        iny
        lda     [$5b],y
        sta     $6155       ; triangle y position
        iny
        lda     [$5b],y
        sta     $6156       ; triangle diameter
        iny
        lda     [$5b],y
        sta     $6157       ; triangle rotation angle
        ldy     $5b
        iny3
        sty     $5b
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $dc: update triangle (2d) ]

AnimCmd_dc:
magic_code5c:
@e43a:  lda     $6156                   ; circle radius
        sta     $24
        lda     $6157
        jsr     CalcSine8
        clc
        adc     #$80
        sta     $615b
        lda     $6157
        clc
        adc     #$40
        jsr     CalcSine8
        clc
        adc     #$80
        sta     $615c
        lda     $6157
        clc
        adc     #(255/3)
        jsr     CalcSine8
        clc
        adc     #$80
        sta     $615d
        lda     $6157
        clc
        adc     #(255/3)+$40
        jsr     CalcSine8
        clc
        adc     #$80
        sta     $615e
        lda     $6157
        clc
        adc     #(255*2/3)
        jsr     CalcSine8
        clc
        adc     #$80
        sta     $615f
        lda     $6157
        clc
        adc     #(255*2/3)+$40
        jsr     CalcSine8
        clc
        adc     #$80
        sta     $6160
        jsr     UpdateTriangle_near
        ldy     $5b
        dey
        sty     $5b
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $f6: update triangle (3d) ]

AnimCmd_f6:
magic_code76:
@e4a2:  lda     $6156
        sta     $24
        lda     $6157
        eor     #$ff
        sta     $10
        jsr     CalcSine8
        clc
        adc     #$80
        sta     $615b
        lda     $10
        clc
        adc     #$40
        jsr     CalcSine8
        clc
        adc     #$80
        sta     $615c
        lda     $10
        clc
        adc     #$50
        jsr     CalcSine8
        clc
        adc     #$80
        sta     $615d
        lda     $10
        clc
        adc     #$90
        jsr     CalcSine8
        clc
        adc     #$80
        sta     $615e
        lda     $10
        clc
        adc     #$90
        jsr     CalcSine8
        clc
        adc     #$80
        sta     $615f
        lda     $10
        clc
        adc     #$4a
        jsr     CalcSine8
        clc
        adc     #$80
        sta     $6160
        jsr     UpdateTriangle_near
        ldy     $5b
        dey
        sty     $5b
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $db: branch if character stepped forward to attack ]

; b1: number of bytes to branch forward in script

AnimCmd_db:
magic_code5b:
@e509:  ldx     $7af6
        lda     $6a38,x     ; attacker
        bmi     @e517       ; branch if a monster
        tay
        lda     $61ae,y     ;
        beq     @e527
@e517:  lda     [$5b]
        longa
        sta     $22
        lda     $5b
        clc
        adc     $22
        sta     $5b
        shorta0
@e527:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $da:  ]

; w wind/spiraler

AnimCmd_da:
magic_code5a:
@e528:  lda     $5f9d
        sta     $24
        stz     $25
        lda     $5f7d
        jsr     CalcSine16
        ldx     $7af6
        longa
        lda     $28
        clc
        adc     $5f9e
        sta     $74ce,x
        shorta0
        lda     $5f8d
        sta     $24
        lda     $5f6d
        jsr     CalcSine16
        ldx     $7af6
        longa
        lda     $28
        clc
        adc     $5f8e
        sta     $74d0,x
        lda     [$5b]
        sta     $22
        inc     $5b
        shorta0
        lda     $5f7d
        clc
        adc     $22
        sta     $5f7d
        lda     $5f6d
        clc
        adc     $23
        sta     $5f6d
        lda     $5f9d
        clc
        adc     #$01
        cmp     #$40
        bcc     @e586
        lda     #$40
@e586:  sta     $5f9d
        lsr
        sta     $5f8d
        lda     $5fa1
        inc     $5fa1
        inc     $5fa1
        asl2
        tay
        clr_ax
        shorti
        longa
@e59f:  lda     $44f5,y
        sta     $63b0,x
        iny2
        inx2
        bne     @e59f
        shorta0
        longi
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1e5b4:
clr_line_buf2:
@e5b4:  clr_ax
        longa
@e5b8:  sta     $63b0,x
        inx2
        cpx     #$0100
        bne     @e5b8
        shorta
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $ee:  ]

AnimCmd_ee:
magic_code6e:
@e5c5:  ldx     $7af6
        lda     $6a39,x
        bmi     @e5de
        asl5
        tay
        lda     $61bd,y
        and     #$cf
        ora     [$5b]
        sta     $61bd,y
        rts
@e5de:  and     #$7f
        sec
        sbc     #$04
        asl
        tay
        lda     $80dc,y
        and     #$cf
        ora     [$5b]
        sta     $80dc,y
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $d9: set attacker sprite tile priority ]

; b1: --oo----
;     o = sprite tile priority

AnimCmd_d9:
magic_code59:
@e5f0:  jsr     GetAttackerThreadPtr
        lda     [$5b]
        sta     $61bd,y     ; sprite tile priority
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $d8:  ]

AnimCmd_d8:
magic_code58:
@e5f9:  ldx     $7af6
        lda     $6a38,x     ; attacker
        tay
        stz     $10
        lda     $7b10,y
        beq     @e609       ; branch if character is not facing right
        dec     $10
@e609:  lda     $6a3b,x     ; thread x position (high byte)
        sta     $24
        stz     $25
        lda     $6a3a,x     ; thread x position
        clc
        adc     #$40
        jsr     CalcSine16
        jsr     GetAttackerThreadPtr
        longa
        lda     $74ce,x     ; thread x offset
        clc
        adc     $28
        sta     $61c5,y     ; character x offset
        lsr     $24
        shorta0
        lda     $6a3a,x     ; thread x position
        jsr     CalcSine16
        jsr     GetAttackerThreadPtr
        longa
        lda     $74d0,x
        clc
        adc     $28
        sta     $61c7,y
        ldy     #$0002
        lda     [$5b],y
        and     #$00ff
        sta     $24
        lda     [$5b]
        sta     $22
        inc     $5b
        inc     $5b
        shorta0
        lda     $6a3b,x
        clc
        adc     $22
        bpl     @e65e
        clr_a
@e65e:  cmp     $6a3c,x
        bcc     @e672
        longa
        lda     $5b
        clc
        adc     $24
        sta     $5b
        shorta0
        lda     $6a3c,x
@e672:  sta     $6a3b,x
        lda     $10
        bne     @e683
        lda     $6a3a,x
        sec
        sbc     $23
        sta     $6a3a,x
        rts
@e683:  lda     $6a3a,x
        clc
        adc     $23
        sta     $6a3a,x
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $d7: update fire dance sprites ]

; b1: movement magnitude

AnimCmd_d7:
magic_code57:
@e68d:  lda     [$5b]
        sta     $24
        ldx     $7af6
        lda     $74d8,x     ; vector angle
        jsr     CalcVecSine
        longa
        ldx     $7af6
        lda     $22
        sta     $74ce,x     ; thread x offset
        shorta0
        lda     $74d9,x     ; current vector position
        jsr     CalcVecSine
        longa
        ldx     $7af6
        lda     $22
        sta     $74d0,x     ; thread y offset
        shorta0
        lda     $74d8,x     ; add 4 to vector angle
        clc
        adc     #$04
        sta     $74d8,x
        lda     $74d9,x     ; add 6 to vector position
        clc
        adc     #$06
        sta     $74d9,x
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $d6: scroll background ]

; b1: horizontal scroll
; b2: vertical scroll

AnimCmd_d6:
magic_code56:
@e6cd:  ldx     $7af6
        clr_ay
        lda     [$5b]
        sta     $10
        iny
        lda     [$5b],y
        sta     $12
        lda     $6f87,x
        beq     @e6e7       ; branch if not mirrored
        lda     $10
        eor     #$ff
        inc
        sta     $10
@e6e7:  longa
        clr_ay
@e6eb:  lda     $10
        sta     $6330,y     ; bg2 scroll hdma table buffer (horizontal)
        lda     $12
        sta     $6332,y     ; bg2 scroll hdma table buffer (vertical)
        iny4
        cpy     #$0080
        bne     @e6eb
        inc     $5b
        shorta0
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $d5: flip target monster ]

; b1: ------vh
;       v: flip vertical
;       h: flip horizontal

AnimCmd_d5:
magic_code55:
@e707:  ldx     $7af6
        lda     $6a39,x
        bpl     @e721
        and     #$0f
        sec
        sbc     #$04
        asl
        tay
        lda     $80f3,y
        eor     [$5b]
        eor     $617e,y
        sta     $80f3,y
@e721:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $d4:  ]

AnimCmd_d4:
magic_code54:
@e722:  ldy     #$0001
        lda     [$5b]
        sta     $10
        lda     [$5b],y
        sta     $11
        iny
        lda     [$5b],y
        jsr     SetColorMathHDMA
        ldx     $7af6
        ldy     $5b
        iny2
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $d1: validate/invalidate character/monster order priority ]

; b1: 0 = validate, 1 = invalidate

AnimCmd_d1:
magic_code51:
@e73d:  lda     [$5b]
        sta     $62d2
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $d0: set sprite tile priority for all characters/monsters ]

; b1: --oo----
;     o = tile priority

AnimCmd_d0:
magic_code50:
@e746:  lda     [$5b]
        sta     $61bd
        sta     $61dd
        sta     $61fd
        sta     $621d
        clr_ay
        lda     [$5b]
        ora     #$01
@e75a:  sta     $80dc,y
        iny2
        cpy     #$000c
        bne     @e75a
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1e768:
clr_bunsin_buf:
@e768:  clr_ay
        longa
@e76c:  sta     $62d6,y
        iny2
        cpy     #$0040
        bne     @e76c
        shorta
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $cb: enable/disable echo sprites ]

; b1 = eddddddd
;      e: 1 = enable, 0 = disable
;      d: frame delay between echo sprites

AnimCmd_cb:
magic_code4b:
@e779:  ldx     $7af6
        lda     $6a38,x     ; attacker
        bmi     @e797       ; return if a monster
        sta     $62d3       ; set echo sprite character
        lda     [$5b]
        and     #$7f
        sta     $62d5       ; echo sprite frame delay
        lda     [$5b]
        and     #$80
        sta     $62d4
        bne     @e797
        jsr     _c1e768
@e797:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $ca:  ]

AnimCmd_ca:
magic_code4a:
@e798:  jsr     GetAttackerThreadPtr
        lda     [$5b]
        sta     $61d0,y     ;
        rts

; ------------------------------------------------------------------------------

; [ get pointer to attacker animation thread data ]

GetAttackerThreadPtr:
@e7a1:  ldx     $7af6
        lda     $6a38,x     ; attacker
        asl5
        tay
        sty     $7af8
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c8: set secondary attacker action ]

; b1: action index

AnimCmd_c8:
magic_code48:
@e7b1:  jsr     GetAttackerThreadPtr
        lda     [$5b]
        sta     $61c0,y     ; character secondary graphic
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1e7ba:
get_margin_size:
@e7ba:  lda     $85         ; angle
        sec
        sbc     $74db,x     ; current vector angle
        bmi     @e7cc
@e7c2:  cmp     $60af
        bcc     @e7d1
        lda     $60af       ;
        bra     @e7d1
@e7cc:  eor     #$ff
        inc
        bra     @e7c2
@e7d1:  sta     $22
        lda     $60af
        cmp     #$10
        bcs     @e7e7
        inc     $60b0
        lda     $60b0
        and     $24
        bne     @e7e7
        inc     $60af
@e7e7:  rts

; ------------------------------------------------------------------------------

; [ calculate vector from attacking character to target ]

CalcCharAttackVec:
@e7e8:  jsr     GetAttackerThreadPtr
        longa
        lda     $61b7,y     ; character x position
        clc
        adc     $61c5,y     ; character x offset
        clc
        adc     $61d4,y     ; character x offset
        sta     $22
        lda     $61b9,y     ; character y position
        clc
        adc     $61c7,y     ; character y offset
        sta     $24
        shorta0
        lda     $23
        and     #$01
        beq     @e810
        lda     #$ff
        bra     @e812
@e810:  lda     $22
@e812:  sta     $7d
        lda     $25
        and     #$01
        beq     @e81e
        lda     #$ff
        bra     @e820
@e81e:  lda     $24
@e820:  sta     $7e
        lda     $6f82,x     ; target x position
        sta     $7f
        lda     $6f84,x     ; target y position
        sta     $80
        jsr     CalcVector
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c6:  ]

AnimCmd_c6:
magic_code46:
@e830:  jsr     CalcCharAttackVec
        ldx     $7af6
        lda     #$03
        sta     $24
        jsr     _c1e7ba
        lda     $85         ; angle
        sec
        sbc     $74db,x     ; current vector angle
        bmi     @e850
        lda     $74db,x
        clc
        adc     $22
        sta     $74db,x
        bra     @e859
@e850:  lda     $74db,x
        sec
        sbc     $22
        sta     $74db,x
@e859:  lda     [$5b]
        clc
        adc     #$04
        sta     $24
        ldx     $7af6
        lda     $86
        cmp     $24
        bcs     @e86f
        ldy     $5b
        iny
        sty     $5b
        rts
@e86f:  lda     [$5b]
        tay
        sty     $24
        lda     $74db,x
        clc
        adc     #$40
        jsr     CalcSine16
        ldx     $7af8
        longa
        lda     $61c5,x
        clc
        adc     $28
        sta     $61c5,x
        clc
        adc     $61b7,x
        clc
        adc     $61d4,x
        and     #$01ff
        tax
        shorta0
        cpx     #$0010
        bcc     @e8a4
        cpx     #$00f0
        bcc     @e8a9
@e8a4:  lda     #$ff
        sta     $60af
@e8a9:  ldx     $7af6
        lda     [$5b]
        tay
        sty     $24
        lda     $74db,x
        jsr     CalcSine16
        ldx     $7af8
        longa
        lda     $61c7,x
        clc
        adc     $28
        sta     $61c7,x
        clc
        adc     $61b9,x
        and     #$01ff
        sta     $28
        tax
        shorta0
        cpx     #$0010
        bcc     @e8dc
        cpx     #$00f0
        bcc     @e8e1
@e8dc:  lda     #$ff
        sta     $60af
@e8e1:  longa
        ldy     #$0001
        lda     [$5b],y
        and     #$00ff
        sta     $22
        lda     $5b
        sec
        sbc     $22
        sta     $5b
        shorta0
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c5: jump based on swdtech hit ]

AnimCmd_c5:
magic_code45:
@e8fb:  ldx     $7af6
        lda     $60ae       ; swdtech hit index
        longa
        asl
        sta     $22
        lda     $5b
        clc
        adc     $22
        sta     $5b
        lda     [$5b]
        dec
        sta     $5b
        shorta0
        inc     $60ae       ; increment swdtech hit index
        rts

; ------------------------------------------------------------------------------

; [ calculate jump height ]

CalcJumpHeight:
@e919:  lda     $74d9,x     ; +$24 = current vector position
        sta     $24
        lda     $74da,x
        sta     $25
        lda     $74db,x     ; vector angle
        clc
        adc     #$40
        jsr     CalcSine16
        jsr     GetAttackerThreadPtr
        longa
        lda     $28
        sta     $61c5,y
        sta     $74ce,x
        shorta0
        lda     $74db,x
        jsr     CalcSine16
        ldx     $7af6
        lda     #$ff
        sta     f:hWRDIVL
        sta     f:hWRDIVH
        lda     $74dd,x
        beq     @e958
        lda     #$ff
        bra     @e95b
@e958:  lda     $74dc,x
@e95b:  sta     f:hWRDIVB
        ldy     $7af8
        lda     $74d9,x
        longa
        sta     $22
        lda     $28
        sta     $61c7,y
        sta     $74d0,x
        lda     f:hRDDIVL
        sta     $24
        jsr     Mult816
        shorta0
        ldx     #$0020
        stx     $24
        lda     $27
        lsr
        clc
        adc     #$80
        jsr     CalcSine16
        ldy     $7af8
        ldx     $7af6
        longa
        lda     $28
        sta     $61d2,y
        shorta0
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c4: move bg1/bg3 thread to this thread's position ]

; b1: ab------
;       a: affect bg1
;       b: affect bg3

AnimCmd_c4:
magic_code44:
@e99f:  ldx     $7af6
        lda     [$5b]
        bpl     @e9c5       ; branch if not affecting bg1
        longa
        lda     $6a3a,x     ; thread x position
        clc
        adc     $74ce,x     ; add thread x offset
        sta     $7b1d       ; set bg1 animation x position
        sta     $7b16       ; set bg1 animation x offset
        lda     $6a3c,x     ; thread y position
        clc
        adc     $74d0,x     ; add thread y offset
        sta     $7b1f       ; set bg1 animation y position
        sta     $7b18       ; set bg1 animation y offset
        shorta0
@e9c5:  lda     [$5b]
        and     #$40
        beq     @e9ea       ; return if not affecting bg3
        longa
        lda     $6a3a,x
        clc
        adc     $74ce,x
        sta     $7b29
        sta     $7b22
        lda     $6a3c,x
        clc
        adc     $74d0,x
        sta     $7b2b
        sta     $7b24
        shorta0
@e9ea:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $c2: unpause animation ]

; b1 = 13s-----
;      1: unpause bg1 animation
;      3: unpause bg3 animation
;      s: unpause sprite animation

AnimCmd_c2:
magic_code42:
@e9eb:  ldx     $7af6
        lda     [$5b]
        bpl     @e9f5
        stz     $60ac       ; unpause bg1 animation threads
@e9f5:  and     #$40
        beq     @e9fc
        stz     $60ad       ; unpause bg3 animation threads
@e9fc:  lda     [$5b]
        and     #$20
        beq     @ea04
        stz     $99         ; unpause sprite animation threads
@ea04:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $c1:  ]

AnimCmd_c1:
magic_code41:
@ea05:  ldx     $7af6
        lda     [$5b]
        sta     $74d8,x     ; vector movement speed
        jsr     MoveAnimToVector
        longa
        lda     $74d8,x
        and     #$00ff
        sta     $22
        lda     $74d9,x
        clc
        adc     $22
        sta     $74d9,x
        cmp     #$00f0
        bcs     @ea5d
        cmp     $74dc,x
        bcc     @ea61
        lda     #$00f0
        sta     $74dc,x
        stz     $74d9,x
        lda     $6a3a,x
        clc
        adc     $74ce,x
        sta     $6a3a,x
        stz     $74ce,x
        lda     $6a3c,x
        clc
        adc     $74d0,x
        sta     $6a3c,x
        stz     $74d0,x
        shorta
        lda     $74db,x
        clc
        adc     #$18
        sta     $74db,x
        longa
@ea5d:  inc     $5b
        bra     @ea72
@ea61:  ldy     #$0001
        lda     [$5b],y     ; branch backwards
        and     #$00ff
        sta     $22
        lda     $5b
        sec
        sbc     $22
        sta     $5b
@ea72:  shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c0: return from subroutine ]

AnimCmd_c0:
magic_code40:
@ea76:  ldx     $7af6
        longa
        lda     $64ec,x
        inc
        sta     $5b
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $bf: jump to subroutine ]

; +b1: subroutine address

AnimCmd_bf:
magic_code3f:
@ea85:  ldx     $7af6
        longa
        lda     $5b
        sta     $64ec,x
        lda     [$5b]
        dec
        sta     $5b
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $be: set screen mosaic ]

; b1: mmmm4321 ($2106)
;       m: mosaic size
;       4321: affect bg1/2/3/4

AnimCmd_be:
magic_code3e:
@ea98:  lda     [$5b]
        sta     $8970       ; screen mosaic register for battlefield region -> $2106
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $bd: hide/show bg1/bg3 animation thread graphics ]

; b1: abcd----
;       a: affect bg1
;       b: affect bg3
;       c: bg1 (0 = show, 1 = hide)
;       d: bg3 (0 = show, 1 = hide)

AnimCmd_bd:
magic_code3d:
@eaa1:  lda     [$5b]
        bpl     @eaaa       ; branch if not affecting bg1
        and     #$20
        sta     $60a7       ; hide/show bg1 graphics
@eaaa:  lda     [$5b]
        and     #$40
        beq     @eab7       ; branch if not affecting bg3
        lda     [$5b]
        and     #$10
        sta     $60a8       ; hide/show bg3 graphics
@eab7:  ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1eabb:
get_col_offset_main:
@eabb:  stx     $1a
        clr_ay
        lda     [$5b]
@eac1:  asl
        bcs     @eaca
        iny
        cpy     #$0003
        bne     @eac1
@eaca:  lda     ($1a),y
        and     #$1f
        sta     $10
        lda     [$5b]
        and     #$10
        beq     @eaeb
        lda     [$5b]
        and     #$0f
        sta     $22
        lda     $10
        sec
        sbc     $22
        sta     $10
        and     #$e0
        beq     @eafc
        stz     $10
        bra     @eafc
@eaeb:  lda     [$5b]
        and     #$0f
        clc
        adc     $10
        sta     $10
        and     #$e0
        beq     @eafc
        lda     #$1f
        sta     $10
@eafc:  lda     [$5b]
        and     #$e0
        sta     $12
        lda     [$5b]
        bmi     @eb0a
        lda     ($1a)
        bra     @eb0e
@eb0a:  lda     $10
        sta     ($1a)
@eb0e:  sta     $14
        ldy     #$0001
        lda     [$5b]
        and     #$40
        bne     @eb1d
        lda     ($1a),y
        bra     @eb21
@eb1d:  lda     $10
        sta     ($1a),y
@eb21:  sta     $16
        iny
        lda     [$5b]
        and     #$20
        bne     @eb2e
        lda     ($1a),y
        bra     @eb32
@eb2e:  lda     $10
        sta     ($1a),y
@eb32:  sta     $18
        rts

; ------------------------------------------------------------------------------

; [ increment color palette ]

IncPal:
@eb35:  stz     $15
        stz     $13
        longa
        ldx     $10
        jsr     InitColorMod
@eb40:  lda     $7c00,x
        jsr     IncColor
        sta     $7e00,x
        inx2
        dec     $12
        bne     @eb40
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ decrement color palette ]

DecPal:
@eb53:  stz     $15
        stz     $13
        longa
        ldx     $10
        jsr     InitColorMod
@eb5e:  lda     $7c00,x
        jsr     DecColor
        sta     $7e00,x
        inx2
        dec     $12
        bne     @eb5e
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1eb71:
color_offset_init:
@eb71:  stx     $1a
        clr_ay
        sta     ($1a)
        iny
        sta     ($1a),y
        iny
        sta     ($1a),y
        stz     $14
        stz     $16
        stz     $18
        lda     [$5b]
        and     #$1f
        sta     $10
        lda     [$5b]
        bpl     @eb93
        lda     $10
        sta     $14
        sta     ($1a)
@eb93:  lda     [$5b]
        and     #$40
        beq     @eba2
        lda     $10
        sta     $16
        ldy     #$0001
        sta     ($1a),y
@eba2:  lda     [$5b]
        and     #$20
        beq     @ebb1
        lda     $10
        sta     $18
        ldy     #$0002
        sta     ($1a),y
@ebb1:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $b5:  ]

AnimCmd_b5:
magic_code35:
@ebb2:  ldx     #$88c2
        jsr     _c1eabb
        jmp     _ebca

; ------------------------------------------------------------------------------

; [ battle animation command $b6:  ]

AnimCmd_b6:
magic_code36:
@ebbb:  ldx     #$88c2
        jsr     _c1eabb
        jmp     _ebe0

; ------------------------------------------------------------------------------

; [ battle animation command $b0:  ]

AnimCmd_b0:
magic_code30:
@ebc4:  ldx     #$88c2
        jsr     _c1eb71
_ebca:  ldx     #$00a0
        stx     $10
        lda     #$30
        sta     $12
        jsr     IncPal
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $af:  ]

AnimCmd_af:
magic_code2f:
@ebda:  ldx     #$88c2
        jsr     _c1eb71

magic_code2f_x:
_ebe0:  ldx     #$00a0
        stx     $10
        lda     #$30
        sta     $12
        jsr     DecPal
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $ce:  ]

AnimCmd_ce:
magic_code4e:
@ebf0:  ldx     #$88c5
        jsr     _c1eabb
        jmp     _ec08

; ------------------------------------------------------------------------------

; [ battle animation command $cf:  ]

AnimCmd_cf:
magic_code4f:
@ebf9:  ldx     #$88c5
        jsr     _c1eabb
        jmp     _ec2a

; ------------------------------------------------------------------------------

; [ battle animation command $cd:  ]

AnimCmd_cd:
magic_code4d:
@ec02:  ldx     #$88c5
        jsr     _c1eb71
_ec08:  ldx     #$0060
        stx     $10
        lda     #$10
        sta     $12
        jsr     IncPal
        ldx     #$0080
        stx     $10
        lda     #$08
        sta     $12
        jsr     IncPal
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $cc:  ]

AnimCmd_cc:
magic_code4c:
@ec24:  ldx     #$88c5
        jsr     _c1eb71
_ec2a:  ldx     #$0060
        stx     $10
        lda     #$10
        sta     $12
        jsr     DecPal
        ldx     #$0080
        stx     $10
        lda     #$08
        sta     $12
        jsr     DecPal
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $b4:  ]

AnimCmd_b4:
magic_code34:
@ec46:  ldx     #$88bf
        jsr     _c1eabb
        jmp     _ec74

; ------------------------------------------------------------------------------

; [ battle animation command $b3:  ]

AnimCmd_b3:
magic_code33:
@ec4f:  ldx     #$88bf
        jsr     _c1eabb
        jmp     _ec5e

; ------------------------------------------------------------------------------

; [ battle animation command $ab:  ]

AnimCmd_ab:
magic_code2b:
@ec58:  ldx     #$88bf
        jsr     _c1eb71
_ec5e:  ldx     #$0020
        stx     $10
        lda     #$04
        sta     $12
        jsr     IncPal
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $aa:  ]

AnimCmd_aa:
magic_code2a:
@ec6e:  ldx     #$88bf
        jsr     _c1eb71
_ec74:  ldx     #$0020
        stx     $10
        lda     #$04
        sta     $12
        jsr     DecPal
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $b7:  ]

AnimCmd_b7:
magic_code37:
@ec84:  ldx     #$88c8
        jsr     _c1eabb
        jmp     _ec9c

; ------------------------------------------------------------------------------

; [ battle animation command $b8:  ]

AnimCmd_b8:
magic_code38:
@ec8d:  ldx     #$88c8
        jsr     _c1eabb
        jmp     _ecb2

; ------------------------------------------------------------------------------

; [ battle animation command $b2:  ]

AnimCmd_b2:
magic_code32:
@ec96:  ldx     #$88c8
        jsr     _c1eb71
_ec9c:  ldx     #$0160
        stx     $10
        lda     #$10
        sta     $12
        jsr     IncPal
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $b1:  ]

AnimCmd_b1:
magic_code31:
@ecac:  ldx     #$88c8
        jsr     _c1eb71
_ecb2:  ldx     #$0160
        stx     $10
        lda     #$10
        sta     $12
        jsr     DecPal
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $bc:  ]

AnimCmd_bc:
magic_code3c:
@ecc2:  ldx     #$88cb
        jsr     _c1eabb
        jmp     _ecf0

; ------------------------------------------------------------------------------

; [ battle animation command $bb:  ]

AnimCmd_bb:
magic_code3b:
@eccb:  ldx     #$88cb
        jsr     _c1eabb
        jmp     _ecda

; ------------------------------------------------------------------------------

; [ battle animation command $ba:  ]

AnimCmd_ba:
magic_code3a:
@ecd4:  ldx     #$88cb
        jsr     _c1eb71
_ecda:  lda     #$30
        sta     $12
        ldx     #$0100
        stx     $10
        jsr     IncPal
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $b9:  ]

AnimCmd_b9:
magic_code39:
@ecea:  ldx     #$88cb
        jsr     _c1eb71
_ecf0:  lda     #$30
        sta     $12
        ldx     #$0100
        stx     $10
        jsr     DecPal
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $fd:  ]

AnimCmd_fd:
magic_code7d:
@ed00:  ldx     #$88ce
        jsr     _c1eabb
        jmp     _ed18

; ------------------------------------------------------------------------------

; [ battle animation command $fe:  ]

AnimCmd_fe:
magic_code7e:
@ed09:  ldx     #$88ce
        jsr     _c1eabb
        jmp     _ed52

; ------------------------------------------------------------------------------

; [ battle animation command $fc:  ]

AnimCmd_fc:
magic_code7c:
@ed12:  ldx     #$88ce
        jsr     _c1eb71
_ed18:  lda     #$10
        sta     $12
        ldx     #$0180
        stx     $10
        jsr     IncPal
        lda     #$10
        sta     $12
        ldx     #$01a0
        stx     $10
        jsr     IncPal
        lda     #$10
        sta     $12
        ldx     #$01c0
        stx     $10
        jsr     IncPal
        lda     #$10
        sta     $12
        ldx     #$01e0
        stx     $10
        jsr     IncPal
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $fb:  ]

AnimCmd_fb:
magic_code7b:
@ed4c:  ldx     #$88ce
        jsr     _c1eb71
_ed52:  lda     #$0c
        sta     $12
        ldx     #$0180
        stx     $10
        jsr     DecPal
        lda     #$0c
        sta     $12
        ldx     #$01a0
        stx     $10
        jsr     DecPal
        lda     #$0c
        sta     $12
        ldx     #$01c0
        stx     $10
        jsr     DecPal
        lda     #$0c
        sta     $12
        ldx     #$01e0
        stx     $10
        jsr     DecPal
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $ae:  ]

AnimCmd_ae:
magic_code2e:
@ed86:  lda     [$5b]
        and     #$04
        beq     @edd8
        lda     [$5b]
        bpl     @edb1
        lda     $6096
        sta     $24
        lda     $609a
        sta     $14
        lda     $6098
        sta     $16
        ldx     #$63b2
        stx     $10
        jsr     _c1ef34
        lda     $6098
        clc
        adc     $609a
        sta     $6098
@edb1:  lda     [$5b]
        and     #$40
        beq     @edd8
        lda     $6095
        sta     $24
        lda     $6099
        sta     $14
        lda     $6097
        sta     $16
        ldx     #$63b0
        stx     $10
        jsr     _c1ef34
        lda     $6097
        clc
        adc     $6099
        sta     $6097
@edd8:  lda     [$5b]
        and     #$02
        beq     @ee2a
        lda     [$5b]
        bpl     @ee03
        lda     $609c
        sta     $24
        lda     $60a0
        sta     $14
        lda     $609e
        sta     $16
        ldx     #$6332
        stx     $10
        jsr     _c1ef34
        lda     $609e
        clc
        adc     $60a0
        sta     $609e
@ee03:  lda     [$5b]
        and     #$40
        beq     @ee2a
        lda     $609b
        sta     $24
        lda     $609f
        sta     $14
        lda     $609d
        sta     $16
        ldx     #$6330
        stx     $10
        jsr     _c1ef34
        lda     $609d
        clc
        adc     $609f
        sta     $609d
@ee2a:  lda     [$5b]
        and     #$01
        beq     @ee98
        lda     [$5b]
        bpl     @ee63
        lda     $60a2
        sta     $24
        lda     $60a6
        sta     $14
        lda     $60a4
        sta     $16
        ldx     #$4af7
        stx     $10
        longa
        lda     $7b24
        sec
        sbc     $7b2b
        sta     $18
        shorta0
        jsr     _c1ef6a
        lda     $60a4
        clc
        adc     $60a6
        sta     $60a4
@ee63:  lda     [$5b]
        and     #$40
        beq     @ee98
        lda     $60a1
        sta     $24
        lda     $60a5
        sta     $14
        lda     $60a3
        sta     $16
        ldx     #$4af5
        stx     $10
        longa
        lda     $7b22
        sec
        sbc     $7b29
        sta     $18
        shorta0
        jsr     _c1ef6a
        lda     $60a3
        clc
        adc     $60a5
        sta     $60a3
@ee98:  ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $ac:  ]

AnimCmd_ac:
magic_code2c:
@ee9c:  ldy     #$0001
        lda     [$5b]
        bpl     @eec7
        lda     [$5b],y
        bpl     @eeb3
        and     #$3f
        sta     $6096
        lda     [$5b]
        and     #$1f
        sta     $609a
@eeb3:  lda     [$5b],y
        and     #$40
        beq     @eec7
        lda     [$5b],y
        and     #$3f
        sta     $6095
        lda     [$5b]
        and     #$1f
        sta     $6099
@eec7:  lda     [$5b]
        and     #$40
        beq     @eef1
        lda     [$5b],y
        bpl     @eedd
        and     #$3f
        sta     $609c
        lda     [$5b]
        and     #$1f
        sta     $60a0
@eedd:  lda     [$5b],y
        and     #$40
        beq     @eef1
        lda     [$5b],y
        and     #$3f
        sta     $609b
        lda     [$5b]
        and     #$1f
        sta     $609f
@eef1:  lda     [$5b]
        and     #$20
        beq     @ef1b
        lda     [$5b],y
        bpl     @ef07
        and     #$3f
        sta     $60a2
        lda     [$5b]
        and     #$1f
        sta     $60a6
@ef07:  lda     [$5b],y
        and     #$40
        beq     @ef1b
        lda     [$5b],y
        and     #$3f
        sta     $60a1
        lda     [$5b]
        and     #$1f
        sta     $60a5
@ef1b:  ldy     $5b
        iny
        sty     $5b
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

get_laster_poi:
_c1ef24:
@ef24:  .word   $e7bf,$e7ff,$e83f,$e87f,$e8bf,$e8ff,$e93f,$e97f

; ------------------------------------------------------------------------------

; [  ]

_c1ef34:
bg_laster_set:
@ef34:  lda     $24
        and     #$0e
        tax
        longa
        lda     f:_c1ef24,x
        sta     $22
        lda     $16
        and     #$00ff
        asl
        and     #$003f
        tay
        lda     #$0020
        sta     $12
        ldx     $10
@ef52:  lda     ($22),y
        sta     a:$0000,x
        inx4
        iny2
        tya
        and     #$003f
        tay
        dec     $12
        bne     @ef52
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1ef6a:
bg_laster_set_bg3:
@ef6a:  lda     $24
        and     #$0e
        tax
        longa
        lda     f:_c1ef24,x
        sta     $22
        lda     $16
        and     #$00ff
        asl
        and     #$003f
        tay
        lda     #$0020
        sta     $12
        ldx     $10
@ef88:  lda     ($22),y
        clc
        adc     $18
        sta     a:$0000,x
        inx4
        iny2
        tya
        and     #$003f
        tay
        dec     $12
        bne     @ef88
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $ad: set bg hdma scroll type ]

; b1: lltttttt
;     l: (0 = bg1, 1 = bg2, 2 = bg3)
;     t: hdma scroll type

AnimCmd_ad:
magic_code2d:
@efa3:  ldx     $7af6
        lda     [$5b]
        and     #$c0
        bne     @efb4
        lda     [$5b]
        and     #$3f
        sta     $800c       ; bg1 hdma scroll type
        rts
@efb4:  cmp     #$40
        bne     @efc0
        lda     [$5b]
        and     #$3f
        sta     $800d       ; bg2 hdma scroll type
        rts
@efc0:  lda     [$5b]
        and     #$3f
        sta     $800e       ; bg3 hdma scroll type
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $a9: move circle ]

AnimCmd_a9:
magic_code29:
@efc8:  ldx     $7af6
        lda     [$5b]
        sta     $22
        ldy     #$0001
        lda     [$5b],y
        sta     $24
        lda     $6a38,x
        bmi     @f01d
        tay
        lda     $7b10,y
@efdf:  and     #$01
        beq     @efea
        lda     $22
        eor     #$ff
        inc
        sta     $22
@efea:  lda     $22
        bpl     @eff5
        lda     $9614
        cmp     #$21
        bcc     @f003
@eff5:  lda     $9614
        clc
        adc     $22
        cmp     $9617
        bcc     @f003
        lda     $9617
@f003:  sta     $9614
        lda     $9615
        clc
        adc     $24
        cmp     $9618
        bcc     @f014
        lda     $9618
@f014:  sta     $9615
        ldy     $5b
        iny
        sty     $5b
        rts
@f01d:  and     #$7f
        sec
        sbc     #$04
        asl
        tay
        lda     $80f3,y
        eor     $617e,y
        eor     #$01
        jmp     @efdf

; ------------------------------------------------------------------------------

; [ battle animation command $c3: move circle to target ]

AnimCmd_c3:
magic_code43:
@f02f:  ldx     $7af6
        lda     $6f82,x     ; target x position
        sta     $9614       ; circle x position
        lda     $6f84,x     ; target y position
        sta     $9615       ; circle y position
        ldy     $5b
        dey
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $d3: move circle to attacking character ]

AnimCmd_d3:
magic_code53:
@f044:  jsr     GetAttackerThreadPtr
        longa
        lda     $61b7,y     ; character x position
        clc
        adc     $61c5,y     ; add offsets
        clc
        adc     $61d4,y
        clc
        adc     #$0008      ; add 8 to get center of sprite
        sta     $22
        lda     $61b9,y     ; character y position
        clc
        adc     $61c7,y     ; add offset
        sta     $24
        dec     $5b
        shorta0
        lda     $22         ; set circle position
        sta     $9614
        lda     $24
        sta     $9615
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $a8: move circle to attacker ]

AnimCmd_a8:
magic_code28:
@f073:  ldx     $7af6
        lda     $6f7e,x
        sta     $9614
        lda     $6f80,x
        sta     $9615
        ldy     $5b
        dey
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $a7: update circle ]

AnimCmd_a7:
magic_code27:
@f088:  jsr     UpdateCircle_near
        ldy     $5b
        dey
        sty     $5b
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $a6: move circle and change size ]

AnimCmd_a6:
magic_code26:
@f094:  lda     [$5b]
        sta     $22
        ldy     #$0001
        lda     [$5b],y
        sta     $24
        iny
        lda     [$5b],y
        sta     $26
        ldy     $5b
        iny2
        sty     $5b
        lda     $22
        bpl     @f0b5
        lda     $9614
        cmp     #$21
        bcc     @f0c3
@f0b5:  lda     $9614
        clc
        adc     $22
        cmp     $9617
        bcc     @f0c3
        lda     $9617
@f0c3:  sta     $9614
        lda     $9615
        clc
        adc     $24
        cmp     $9618
        bcc     @f0d4
        lda     $9618
@f0d4:  sta     $9615
        lda     $9613
        clc
        adc     $26
        cmp     $9616
        bcc     @f0e5
        lda     $9616
@f0e5:  sta     $9613
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $a5: set circle parameters ]

; b1: initial x position
; b2: initial y position
; b3: initial size
; b4: final x position
; b5: final y position
; b6: final size
; b7: speed

AnimCmd_a5:
magic_code25:
@f0ec:  lda     [$5b]
        sta     $9614       ; initial x position
        ldy     #$0001
        lda     [$5b],y
        sta     $9615       ; initial y position
        iny
        lda     [$5b],y
        sta     $9613       ; initial size
        iny
        lda     [$5b],y
        sta     $9617       ; final x position
        iny
        lda     [$5b],y
        sta     $9618       ; final y position
        iny
        lda     [$5b],y
        sta     $9616       ; final size
        iny
        lda     [$5b],y
        sta     $9619       ; circle speed
        ldx     $7af6
        lda     $6a38,x     ; attacker
        bpl     @f130       ; branch if a character
        and     #$7f
        sec
        sbc     #$04
        asl
        tay
        lda     $80f3,y
        eor     $617e,y
        eor     #$01
        bra     @f134
@f130:  tay
        lda     $7b10,y
@f134:  and     #$01
        beq     @f13c       ; branch if not mirrored
        lda     #$c0
        bra     @f13e
@f13c:  lda     #$40
@f13e:  sta     $961a       ; circle vh flip
        longa
        lda     $5b
        clc
        adc     #$0006
        sta     $5b
        shorta0
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [  ]

CyclePalLeft:
@f152:  phx
        asl     $22
        stz     $23
        lda     $22
        tax
        stz     $25
        longa
        lda     $28
        and     #$00f0
        asl
        sta     $28
        txa
        clc
        adc     $28
        tax
        dec     $24
        lda     $7e00,x
        pha
        lda     $7c00,x
        pha
@f175:  lda     $7e02,x
        sta     $7e00,x
        lda     $7c02,x
        sta     $7c00,x
        inx2
        dec     $24
        bne     @f175
        pla
        sta     $7c00,x
        pla
        sta     $7e00,x
        shorta0
        plx
        rts

; ------------------------------------------------------------------------------

; [  ]

CyclePalRight:
@f194:  phx
        asl     $22
        stz     $23
        dec     $24
        lda     $24
        asl
        clc
        adc     $22
        tax
        stz     $25
        longa
        lda     $28
        and     #$00f0
        asl
        sta     $28
        txa
        clc
        adc     $28
        tax
        lda     $7e00,x
        pha
        lda     $7c00,x
        pha
@f1bb:  lda     $7dfe,x
        sta     $7e00,x
        lda     $7bfe,x
        sta     $7c00,x
        dex2
        dec     $24
        bne     @f1bb
        pla
        sta     $7c00,x
        pla
        sta     $7e00,x
        shorta0
        plx
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1f1da:
get_pal_poi:
@f1da:  ldy     #$0001
        lda     [$5b],y
        lsr4
        tax
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $a3:  ]

AnimCmd_a3:
magic_code23:
@f1e5:  jsr     _c1f1da
        lda     $6085,x
        bne     @f211
        lda     [$5b]
        and     #$f0
        lsr4
        sta     $22
        lda     [$5b]
        and     #$0f
        sta     $24
        ldy     #$0001
        lda     [$5b],y
        sta     $28
        jsr     CyclePalRight
        ldy     #$0001
        lda     [$5b],y
        and     #$0f
        sta     $6085,x
@f211:  dec     $6085,x
        ldy     $5b
        iny
        sty     $5b
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $a4:  ]

AnimCmd_a4:
magic_code24:
@f21d:  jsr     _c1f1da
        lda     $6085,x
        bne     @f249
        lda     [$5b]
        and     #$f0
        lsr4
        sta     $22
        lda     [$5b]
        and     #$0f
        sta     $24
        ldy     #$0001
        lda     [$5b],y
        sta     $28
        jsr     CyclePalLeft
        ldy     #$0001
        lda     [$5b],y
        and     #$0f
        sta     $6085,x
@f249:  dec     $6085,x
        ldy     $5b
        iny
        sty     $5b
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $90: set sprite layer priority ]

; b1: --oo---- o: layer priority

AnimCmd_90:
magic_code10:
@f255:  ldx     $7af6
        lda     $6f86,x     ; sprite layer priority
        and     #$cf
        ora     [$5b]
        sta     $6f86,x     ; sprite layer priority
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $8d & $8f: move thread if animation is flipped horizontally ]

AnimCmd_8d:
AnimCmd_8f:
magic_code0d:
magic_code0f:
@f263:  ldx     $7af6
        lda     $6a38,x     ; attacker
        bmi     @f279       ; return if a monster
        tay
        lda     $7b10,y     ; character facing direction
        eor     $6f88,x     ; animation direction
        and     #$01
        jeq     AnimCmd_83       ; move thread
@f279:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $8e:  ]

; b1 = ??-----?

AnimCmd_8e:
magic_code0e:
@f27a:  ldx     $7af6
        lda     $6a38,x     ; attacker
        bmi     @f2a1       ; return if a monster
        tay
        lda     [$5b]       ; $10 = sprite priority (above/below)
        and     #$01
        sta     $10
        lda     [$5b]
        bmi     @f29e       ; branch if shown behind
        and     #$40
        beq     @f294       ; branch if shown in front
        clr_a
        bra     @f29e
@f294:  lda     $7b10,y     ; character facing direction
        eor     $6f88,x     ; animation direction
        and     #$01
        eor     $10
@f29e:  sta     $64e7,x     ; sprite layer priority
@f2a1:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $9c:  ]

AnimCmd_9c:
magic_code1c:
@f2a2:  ldx     $7af6
        lda     $6a39,x
        bmi     @f2b5
        tay
        lda     $7b10,y
        and     #$01
        jeq     AnimCmd_83
@f2b5:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $9e:  ]

AnimCmd_9e:
magic_code1e:
@f2b6:  ldx     $7af6
        lda     $6a39,x
        bmi     @f2db
        tay
        lda     $7b10,y
        and     #$01
        bne     @f2cc
        lda     [$5b]
        sta     $10
        bra     @f2d3
@f2cc:  ldy     #$0001
        lda     [$5b],y
        sta     $10
@f2d3:  lda     $6f87,x
        eor     $10
        sta     $6f87,x
@f2db:  ldy     $5b
        iny
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $a2: toggle horizontal flip ]

; b1: must be $40

AnimCmd_a2:
magic_code22:
@f2e1:  ldx     $7af6
        lda     [$5b]
        sta     $10
        lda     $6f87,x     ; toggle horizontal flip
        eor     $10
        sta     $6f87,x
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $9d:  ]

AnimCmd_9d:
magic_code1d:
@f2f1:  ldx     $7af6
        lda     $6a39,x     ; target
        bmi     @f30e       ; return if a monster
        tay
        lda     $7b10,y     ; character facing direction
        and     #$01
        bne     @f307       ; branch if facing right
        lda     [$5b]
        sta     $9b         ;
        bra     @f30e
@f307:  ldy     #$0001
        lda     [$5b],y
        sta     $9b
@f30e:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $f4: set sprite layer priority ]

AnimCmd_f4:
magic_code74:
@f30f:  ldx     $7af6
        lda     [$5b]
        and     #$01
        sta     $64e7,x
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $9b:  ]

AnimCmd_9b:
magic_code1b:
@f31a:  ldx     $7af6
        lda     $6a39,x     ; target
        bmi     @f33e       ; return if a monster
        tay
        lda     [$5b]
        and     #$01
        sta     $10
        lda     [$5b]
        bmi     @f33b
        and     #$40
        beq     @f334
        clr_a
        bra     @f33b
@f334:  lda     $7b10,y     ; character facing direction
        and     #$01
        eor     $10
@f33b:  sta     $64e7,x     ; sprite layer priority
@f33e:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $82: set target graphical action ]

; b1 = action if facing left
; b2 = action if facing right

AnimCmd_82:
magic_code02:
@f33f:  ldx     $7af6       ; pointer to thread data
        lda     $6a39,x     ; target
        bra     _f34d

; ------------------------------------------------------------------------------

; [ battle animation command $81: set attacker graphical action ]

; b1: action if facing left
; b2: action if facing right

AnimCmd_81:
magic_code01:
@f347:  ldx     $7af6       ; pointer to thread data
        lda     $6a38,x     ; attacker
_f34d:  bmi     @f371       ; return if a monster
        sta     $10
        tay
        lda     $7b10,y     ; character facing direction
        eor     $6f88,x     ; animation direction
        and     #$01        ; isolate direction bit
        tay
        lda     [$5b],y     ; graphical action number
        sta     $12
        lda     $10         ; character number
        and     #$03
        sta     $7bad       ; enable character graphical action update
        asl5
        tay
        lda     $12
        sta     $61c1,y     ; set graphical action number
@f371:  ldy     $5b
        iny
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $83: move thread ]

; b1 = dddxxxxx
;      d: direction (0 = down/forward, 1 = down, 2 = down/back, 3 = forward, 4 = back, 5 = up/forward, 6 = up, 7 = up/back)
;      x: distance - 1

AnimCmd_83:
magic_code03:
@f377:  lda     [$5b]
        sta     $12
        and     #$1f
        inc
        sta     $10
        stz     $11
; fall through

; ------------------------------------------------------------------------------

; [ move animation thread ]

;  $12: direction
; +$10: distance

MoveAnim:
magic_code03_a:
@f382:  ldx     $7af6
        lda     $6f87,x     ; animation direction
        beq     @f396       ; branch if horizontally flipped
        lda     $12
        and     #$e0
        lsr4
        tax
        jmp     (.loword(MoveAnimTbl+16),x)
@f396:  lda     $12
        and     #$e0
        lsr4
        tax
        jmp     (.loword(MoveAnimTbl),x)

; ------------------------------------------------------------------------------

; move thread jump table (normal)
vect_chg:
MoveAnimTbl:
@f3a2:  .addr   MoveAnimDownLeft
        .addr   MoveAnimDown
        .addr   MoveAnimDownRight
        .addr   MoveAnimLeft
        .addr   MoveAnimRight
        .addr   MoveAnimUpLeft
        .addr   MoveAnimUp
        .addr   MoveAnimUpRight

; horizontally flipped
        .addr   MoveAnimDownRight
        .addr   MoveAnimDown
        .addr   MoveAnimDownLeft
        .addr   MoveAnimRight
        .addr   MoveAnimLeft
        .addr   MoveAnimUpRight
        .addr   MoveAnimUp
        .addr   MoveAnimUpLeft

; ------------------------------------------------------------------------------

; [ move thread down/forward ]

MoveAnimDownLeft:
@f3c2:  ldx     $7af6
        longa
        lda     $6a3a,x     ; thread x position
        sec
        sbc     $10
        sta     $6a3a,x
        lda     $6a3c,x     ; thread y position
        clc
        adc     $10
        sta     $6a3c,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move thread down ]

MoveAnimDown:
@f3dd:  ldx     $7af6
        longa
        lda     $6a3c,x
        clc
        adc     $10
        sta     $6a3c,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move thread down/back ]

MoveAnimDownRight:
@f3ef:  ldx     $7af6
        longa
        lda     $6a3a,x
        clc
        adc     $10
        sta     $6a3a,x
        lda     $6a3c,x
        clc
        adc     $10
        sta     $6a3c,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move thread forward ]

MoveAnimLeft:
@f40a:  ldx     $7af6
        longa
        lda     $6a3a,x
        sec
        sbc     $10
        sta     $6a3a,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move thread back ]

MoveAnimRight:
@f41c:  ldx     $7af6
        longa
        lda     $6a3a,x
        clc
        adc     $10
        sta     $6a3a,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move thread up/forward ]

MoveAnimUpLeft:
@f42e:  ldx     $7af6
        longa
        lda     $6a3a,x
        sec
        sbc     $10
        sta     $6a3a,x
        lda     $6a3c,x
        sec
        sbc     $10
        sta     $6a3c,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move thread up ]

MoveAnimUp:
@f449:  ldx     $7af6
        longa
        lda     $6a3c,x
        sec
        sbc     $10
        sta     $6a3c,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move thread up/back ]

MoveAnimUpRight:
@f45b:  ldx     $7af6
        longa
        lda     $6a3a,x
        clc
        adc     $10
        sta     $6a3a,x
        lda     $6a3c,x
        sec
        sbc     $10
        sta     $6a3c,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $87: move target ]

; b1: dddxxxxx
;       d: direction (0 = down/forward, 1 = down, 2 = down/back, 3 = forward, 4 = back, 5 = up/forward, 6 = up, 7 = up/back)
;       x: distance - 1

AnimCmd_87:
magic_code07:
@f476:  lda     [$5b]
        sta     $12
        and     #$1f
        inc
        sta     $10
        stz     $11
        lda     #$04
        sta     $64dc     ; select target
        stz     $64dd
        ldx     $7af6
        lda     $6a39,x   ; attacker index
        bra     _f4a8     ; branch if a monster

; ------------------------------------------------------------------------------

; [ battle animation command $86: move attacker ]

; b1: dddxxxxx
;       d: direction
;            0: down/forward
;            1: down
;            2: down/back
;            3: forward
;            4: back
;            5: up/forward
;            6: up
;            7: up/back
;       x: distance - 1

AnimCmd_86:
magic_code06:
@f491:  lda     [$5b]
        sta     $12
        and     #$1f
        inc
        sta     $10                     ; +$10 = distance
        stz     $11

MoveAttacker:
@f49c:  stz     $64dc                   ; select attacker
        stz     $64dd
        ldx     $7af6
        lda     $6a38,x                 ; attacker index

magic_code06_b:
_f4a8:  bmi     @f4d5                   ; branch if a monster

; character
        asl5
        tay
        lda     $6f87,x
        beq     @f4c5                   ; branch if not flipped horizontally

; move character, horizontally flipped
        lda     $12
        and     #$e0                    ; direction
        lsr4
        tax
        jsr     (.loword(MoveCharTbl)+$10,x)
        ldx     $7af6
        rts

; move character, not flipped
@f4c5:  lda     $12
        and     #$e0                    ; direction
        lsr4
        tax
        jsr     (.loword(MoveCharTbl),x)
        ldx     $7af6
        rts

; monster
@f4d5:  and     #$7f
        sec
        sbc     #$04
        asl
        tay
        lda     $6f87,x
        beq     @f4f1                   ; branch if not flipped horizontally

; move monster, horizontally flipped
        lda     $12
        and     #$e0                    ; direction
        lsr4
        tax
        jsr     (.loword(MoveMonsterTbl)+$10,x)
        ldx     $7af6
        rts

; move monster, not flipped
@f4f1:  lda     $12
        and     #$e0                    ; direction
        lsr4
        tax
        jsr     (.loword(MoveMonsterTbl),x)
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; character movement jump table (8 movement directions, normal then horizontally flipped)
pmvect_chg_tbl:
MoveCharTbl:
@f501:  .addr   MoveCharDownLeft
        .addr   MoveCharDown
        .addr   MoveCharDownRight
        .addr   MoveCharLeft
        .addr   MoveCharRight
        .addr   MoveCharUpLeft
        .addr   MoveCharUp
        .addr   MoveCharUpRight

; horizontally flipped
        .addr   MoveCharDownRight
        .addr   MoveCharDown
        .addr   MoveCharDownLeft
        .addr   MoveCharRight
        .addr   MoveCharLeft
        .addr   MoveCharUpRight
        .addr   MoveCharUp
        .addr   MoveCharUpLeft

; monster movement jump table (8 movement directions, normal then horizontally flipped)
MoveMonsterTbl:
@f521:  .addr   MoveMonsterDownLeft
        .addr   MoveMonsterDown
        .addr   MoveMonsterDownRight
        .addr   MoveMonsterLeft
        .addr   MoveMonsterRight
        .addr   MoveMonsterUpLeft
        .addr   MoveMonsterUp
        .addr   MoveMonsterUpRight

; horizontally flipped
        .addr   MoveMonsterDownRight
        .addr   MoveMonsterDown
        .addr   MoveMonsterDownLeft
        .addr   MoveMonsterRight
        .addr   MoveMonsterLeft
        .addr   MoveMonsterUpRight
        .addr   MoveMonsterUp
        .addr   MoveMonsterUpLeft

; ------------------------------------------------------------------------------

; [ move monster down/forward ]

MoveMonsterDownLeft:
@f541:  longa
        lda     $80c3,y     ; monster x position
        sec
        sbc     $10
        sta     $80c3,y
        lda     $80cf,y     ; monster y position
        clc
        adc     $10
        sta     $80cf,y
_f555:  lda     $7af6       ; thread data pointer
        clc
        adc     $64dc       ; attacker/target select (0 or 4)
        tay
        lda     $6f7e,y     ; attacker/target x position
        sec
        sbc     $10
        sta     $6f7e,y
        lda     $6f80,y     ; attacker/target y position
        clc
        adc     $10
        sta     $6f80,y
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move monster down ]

MoveMonsterDown:
@f573:  longa
        lda     $80cf,y
        clc
        adc     $10
        sta     $80cf,y
_f57e:  lda     $7af6
        clc
        adc     $64dc
        tay
        lda     $6f80,y
        clc
        adc     $10
        sta     $6f80,y
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move monster down/back ]

MoveMonsterDownRight:
@f593:  longa
        lda     $80c3,y
        clc
        adc     $10
        sta     $80c3,y
        lda     $80cf,y
        clc
        adc     $10
        sta     $80cf,y
_f5a7:  lda     $7af6
        clc
        adc     $64dc
        tay
        lda     $6f7e,y
        clc
        adc     $10
        sta     $6f7e,y
        lda     $6f80,y
        clc
        adc     $10
        sta     $6f80,y
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move monster forward ]

MoveMonsterLeft:
@f5c5:  longa
        lda     $80c3,y
        sec
        sbc     $10
        sta     $80c3,y
_f5d0:  lda     $7af6
        clc
        adc     $64dc
        tay
        lda     $6f7e,y
        sec
        sbc     $10
        sta     $6f7e,y
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move monster back ]

MoveMonsterRight:
@f5e5:  longa
        lda     $80c3,y
        clc
        adc     $10
        sta     $80c3,y
_f5f0:  lda     $7af6
        clc
        adc     $64dc
        tay
        lda     $6f7e,y
        clc
        adc     $10
        sta     $6f7e,y
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move monster up/forward ]

MoveMonsterUpLeft:
@f605:  longa
        lda     $80c3,y
        sec
        sbc     $10
        sta     $80c3,y
        lda     $80cf,y
        sec
        sbc     $10
        sta     $80cf,y
_f619:  lda     $7af6
        clc
        adc     $64dc
        tay
        lda     $6f7e,y
        sec
        sbc     $10
        sta     $6f7e,y
        lda     $6f80,y
        sec
        sbc     $10
        sta     $6f80,y
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move monster up ]

MoveMonsterUp:
@f637:  longa
        lda     $80cf,y
        sec
        sbc     $10
        sta     $80cf,y
_f642:  lda     $7af6
        clc
        adc     $64dc
        tay
        lda     $6f80,y
        sec
        sbc     $10
        sta     $6f80,y
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move monster up/back ]

MoveMonsterUpRight:
@f657:  longa
        lda     $80c3,y
        clc
        adc     $10
        sta     $80c3,y
        lda     $80cf,y
        sec
        sbc     $10
        sta     $80cf,y
_f66b:  lda     $7af6
        clc
        adc     $64dc
        tay
        lda     $6f7e,y
        clc
        adc     $10
        sta     $6f7e,y
        lda     $6f80,y
        clc
        adc     $10
        sta     $6f80,y
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move character down/forward ]

MoveCharDownLeft:
@f689:  longa
        lda     $61d4,y     ; character x offset
        sec
        sbc     $10
        sta     $61d4,y
        lda     $61c7,y     ; character y offset
        clc
        adc     $10
        sta     $61c7,y
        jmp     _f555

; ------------------------------------------------------------------------------

; [ move character down ]

MoveCharDown:
@f6a0:  longa
        lda     $61c7,y
        clc
        adc     $10
        sta     $61c7,y
        jmp     _f57e

; ------------------------------------------------------------------------------

; [ move character down/back ]

MoveCharDownRight:
@f6ae:  longa
        lda     $61d4,y
        clc
        adc     $10
        sta     $61d4,y
        lda     $61c7,y
        clc
        adc     $10
        sta     $61c7,y
        jmp     _f5a7

; ------------------------------------------------------------------------------

; [ move character forward ]

MoveCharLeft:
@f6c5:  longa
        lda     $61d4,y
        sec
        sbc     $10
        sta     $61d4,y
        jmp     _f5d0

; ------------------------------------------------------------------------------

; [ move character back ]

MoveCharRight:
@f6d3:  longa
        lda     $61d4,y
        clc
        adc     $10
        sta     $61d4,y
        jmp     _f5f0

; ------------------------------------------------------------------------------

; [ move character up/forward ]

MoveCharUpLeft:
@f6e1:  longa
        lda     $61d4,y
        sec
        sbc     $10
        sta     $61d4,y
        lda     $61c7,y
        sec
        sbc     $10
        sta     $61c7,y
        jmp     _f619

; ------------------------------------------------------------------------------

; [ move character up ]

MoveCharUp:
@f6f8:  longa
        lda     $61c7,y
        sec
        sbc     $10
        sta     $61c7,y
        jmp     _f642

; ------------------------------------------------------------------------------

; [ move character up/back ]

MoveCharUpRight:
@f706:  longa
        lda     $61d4,y
        clc
        adc     $10
        sta     $61d4,y
        lda     $61c7,y
        sec
        sbc     $10
        sta     $61c7,y
        jmp     _f66b

; ------------------------------------------------------------------------------

; [ battle animation command $88: move attacker forward (fight) ]

; b1: frame index (0..7), ignored for magitek mode

AnimCmd_88:
magic_code08:
        .a8
@f71d:  ldx     $7af6
        lda     $6a38,x     ; attacker
        bmi     @f730       ; return if monster
        tay
        lda     $61ae,y     ;
        cmp     #$01
        beq     @f731
        ldx     $7af6
@f730:  rts
@f731:  lda     $7af6       ; pointer to animation thread data
        and     #$70
        beq     @f769       ; branch if ???
        lda     $64ba
        beq     @f749       ; branch if not in magitek mode
        ldy     #$0001      ; move 1 pixel
        sty     $10
        lda     #$60        ; move forward
        sta     $12
        jmp     MoveAnim
@f749:  lda     [$5b]       ; frame number
        tax
        lda     f:_c1f7a3,x
        sta     $10         ; set movement distance
        stz     $11
        lda     f:_c1f7ab,x
        sta     $12         ; set movement direction
        jsr     MoveAnim
        ldy     #$0003      ; move 3 pixels
        sty     $10
        lda     #$60        ; move forward
        sta     $12
        jmp     MoveAnim
@f769:  lda     $64ba
        beq     @f77d       ; branch if not in magitek mode
        ldy     #$0001
        sty     $10
        lda     #$60
        sta     $12
        jsr     MoveAttacker
        jmp     MoveAnim
@f77d:  lda     [$5b]       ; frame number
        tax
        lda     f:_c1f7a3,x
        sta     $10         ; set movement distance
        stz     $11
        lda     f:_c1f7ab,x
        sta     $12         ; set movement direction
        jsr     MoveAttacker
        jsr     MoveAnim
        ldy     #$0003      ; move 3 pixels
        sty     $10
        lda     #$60        ; move forward
        sta     $12
        jsr     MoveAttacker
        jmp     MoveAnim

; ------------------------------------------------------------------------------

; vertical movement distance for jump
_c1f7a3:
@f7a3:  .byte   $03,$03,$02,$01,$00,$02,$03,$04

; vertical movement direction for jump
_c1f7ab:
@f7ab:  .byte   $c0,$c0,$c0,$c0,$c0,$20,$20,$20

; ------------------------------------------------------------------------------

; [ battle animation command $84: set animation speed ]

; b1: speed (frames per update)

AnimCmd_84:
magic_code04:
@f7b3:  ldx     $7af6
        lda     [$5b]
        sta     $6a34,x     ; animation speed
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $89: loop start ]

; b1: loop count

AnimCmd_89:
magic_code09:
@f7bc:  ldx     $7af6
        longa
        lda     $5b
        sta     $6f89,x     ; loop start address
        shorta0
        lda     [$5b]
        sta     $6f8b,x     ; loop count
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $9f: animated loop start (loop count = number of active threads) ]

; b1: 0

AnimCmd_9f:
magic_code1f:
@f7cf:  ldx     $7af6
        longa
        lda     $5b
        sta     $6f89,x     ; loop start address
        shorta0
        lda     $6084       ; number of active threads
        sta     $6f8b,x     ; loop count
        stz     $6f8c,x     ; clear frame offset
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $8b: animated loop start ]

; b1: loop count

AnimCmd_8b:
magic_code0b:
@f7e6:  ldx     $7af6
        longa
        lda     $5b
        sta     $6f89,x     ; loop start address
        shorta0
        lda     [$5b]
        sta     $6f8b,x     ; loop count
        stz     $6f8c,x     ; clear frame offset
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $f5: loop end (loop until no threads are active) ]

AnimCmd_f5:
magic_code75:
@f7fc:  clr_ax
        stz     $22
@f800:  lda     $22
        ora     $6a2e,x     ; thread active flag
        sta     $22
        longa
        txa                 ; next thread
        clc
        adc     #$0010
        tax
        shorta0
        cpx     #$0510      ; loop through all sprite, bg1, and bg3 threads
        bne     @f800
        ldx     $7af6
        lda     $22
        beq     @f829       ; branch if none were active
        longa
        lda     $6f89,x     ; loop start address
        sta     $5b
        shorta0
        rts
@f829:  ldy     $5b         ; end of loop
        dey
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $8a: loop end ]

AnimCmd_8a:
magic_code0a:
@f82f:  ldx     $7af6
        lda     $6f8b,x     ; branch if loop counter = 0
        beq     @f845
        longa
        lda     $6f89,x     ; loop start address
        sta     $5b
        shorta0
        dec     $6f8b,x     ; decrement loop counter
        rts
@f845:  ldy     $5b         ; end of loop
        dey
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $8c: animated loop end ]

AnimCmd_8c:
magic_code0c:
@f84b:  ldx     $7af6
        lda     $6f8b,x     ; branch if loop counter = 0
        beq     @f864
        longa
        lda     $6f89,x     ; loop start address
        sta     $5b
        shorta0
        dec     $6f8b,x     ; decrement loop counter
        inc     $6f8c,x     ; increment frame offset
        rts
@f864:  ldy     $5b         ; end of loop
        dey
        sty     $5b
        stz     $6f8c,x     ; clear frame offset
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $d2: set target position ]

; b1: x position
; b2: y position

AnimCmd_d2:
magic_code52:
@f86d:  longa
        ldx     $7af6
        lda     $6f87,x     ; branch if thread is flipped horizontally
        and     #$00ff
        bne     @f884
        lda     [$5b]
        and     #$00ff
        sta     $6f82,x     ; target x position
        bra     @f88f
@f884:  lda     [$5b]
        and     #$00ff
        eor     #$00ff
        sta     $6f82,x     ; target x position
@f88f:  inc     $5b
        lda     [$5b]
        and     #$00ff
        sta     $6f84,x     ; target y position
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $85: move to attacker position ]

AnimCmd_85:
magic_code05:
@f89d:  longa
        ldx     $7af6
        lda     $6f7e,x     ; attacker x position
        sta     $6a3a,x     ; thread x position
        lda     $6f80,x     ; attacker y position
        sta     $6a3c,x     ; thread y position
        dec     $5b
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $91: move this thread to attacker thread position ]

AnimCmd_91:
magic_code11:
@f8b4:  ldx     $7af6
        lda     $6a38,x     ; attacker
        and     #$7f
        asl
        tax
        longa
        lda     f:_c2ce8b,x   ; pointer to animation thread data (+$7e64de)
        tay
        ldx     $7af6
        lda     $6f7e,y     ; attacker x position (attacker thread)
        sta     $6f7e,x     ; attacker x position (this thread)
        sta     $6a3a,x     ; thread x position (this thread)
        lda     $6f80,y     ; attacker y position (attacker thread)
        sta     $6f80,x     ; attacker y position (this thread)
        sta     $6a3c,x     ; thread x position (this thread)
        dec     $5b
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $94: set vector from attacker to target (random location on target) ]

AnimCmd_94:
magic_code14:
@f8e0:  ldx     $7af6
        lda     $6f7e,x     ; attacker x position
        sta     $7d
        lda     $6f80,x     ; attacker y position
        sta     $7e
        jsr     Rand
        xba
        lda     $74d2,x     ; target width
        lsr
        asl2
        sta     $10
        asl
        jsr     MultAB
        lda     f:hRDMPYH
        sec
        sbc     $10
        sta     $10
        lda     $6f82,x
        sta     $12
        jsr     _c1f94e
        sta     $7f
        jsr     Rand
        xba
        lda     $74d3,x
        lsr
        asl2
        sta     $10
        asl
        jsr     MultAB
        lda     f:hRDMPYH
        sec
        sbc     $10
        sta     $10
        lda     $6f84,x
        sta     $12
        jsr     _c1f94e
        sta     $80
        jsr     CalcVector
        ldx     $7af6
        lda     $85
        sta     $74db,x
        longa
        lda     $86
        sta     $74dc,x
        dec     $5b
        stz     $74d9,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1f94e:
get_mon_size_vect:
@f94e:  lda     $10
        bpl     @f95f
        lda     $12
        clc
        adc     $10
        sta     $14
        lda     #$00
        adc     #$01
        bra     @f96a
@f95f:  lda     $12
        clc
        adc     $10
        sta     $14
        lda     #$00
        adc     #$00
@f96a:  and     #$01
        beq     @f977
        lda     $14
        cmp     #$f8
        bcs     @f97f
        jmp     @f97d
@f977:  lda     $14
        cmp     #$f8
        bcc     @f97f
@f97d:  lda     #$f8
@f97f:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $f2: set vector from target to attacker ]

AnimCmd_f2:
magic_code72:
@f980:  ldx     $7af6
        lda     $6f7e,x     ; x_2 = attacker x position
        sta     $7f
        lda     $6f80,x     ; y_2 = attacker y position
        sta     $80
        lda     $6f82,x     ; x_1 = target x position
        sta     $7d
        lda     $6f84,x     ; y_1 = target y position
        sta     $7e
        bra     InitVec

; ------------------------------------------------------------------------------

; [ calculate angle between points ]

; $85/A: angle (out)

_c1f999:
good_get_vect_long:
@f999:  jsr     InitAttackerVec
        jsr     CalcVector
        lda     $85
        rtl

; ------------------------------------------------------------------------------

; [ set vector from attacker to target ]

InitAttackerVec:
@f9a2:  ldx     $7af6
        lda     $6f7e,x     ; x_1 = attacker x position (max 255)
        sta     $7d
        lda     $6f7f,x
        and     #$01
        beq     @f9b5
        lda     #$ff
        sta     $7d
@f9b5:  lda     $6f80,x     ; y_1 = attacker y position (max 255)
        sta     $7e
        lda     $6f81,x
        and     #$01
        beq     @f9c5
        lda     #$ff
        sta     $7e
@f9c5:  lda     $6f82,x     ; x_2 = target x position (max 255)
        sta     $7f
        lda     $6f83,x
        and     #$01
        beq     @f9d5
        lda     #$ff
        sta     $7f
@f9d5:  lda     $6f84,x     ; y_2 = target y position (max 255)
        sta     $80
        lda     $6f85,x
        and     #$01
        beq     @f9e5
        lda     #$ff
        sta     $80
@f9e5:  rts

; ------------------------------------------------------------------------------

; [ battle animation command $95: set vector from attacker to target ]

AnimCmd_95:
magic_code15:
@f9e6:  jsr     InitAttackerVec
; fallthrough

InitVec:
@f9e9:  jsr     CalcVector
        ldx     $7af6
        lda     $88         ; dx
        sta     $74d7,x
        lda     $85
        sta     $74db,x     ; angle
        longa
        lda     $86         ; hypotenuse
        sta     $74dc,x     ; calculated magnitude
        dec     $5b
        stz     $74d9,x     ; clear current vector position
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ move animation thread to vector position ]

MoveAnimToVector:
set_magic_vector:
@fa09:  lda     $74d9,x     ; current vector position
        sta     $24
        lda     $74da,x
        sta     $25
        lda     $74db,x     ; vector angle + 90 degrees
        clc
        adc     #$40
        jsr     CalcSine16
        ldx     $7af6
        longa
        lda     $28
        sta     $74ce,x     ; thread x offset
        shorta0
        lda     $74db,x     ; vector angle
        jsr     CalcSine16
        ldx     $7af6
        longa
        lda     $28
        sta     $74d0,x     ; thread y offset
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $93: set position on vector ]

AnimCmd_93:
magic_code13:
@fa3d:  ldx     $7af6
        lda     [$5b]
        sta     $74d9,x     ; current vector position
        stz     $74da,x
        jmp     MoveAnimToVector

; ------------------------------------------------------------------------------

; [ battle animation command $a0: jump forward along vector ]

; b1: speed
; b2: number of bytes to branch backwards

AnimCmd_a0:
magic_code20:
@fa4b:  ldx     $7af6
        jsr     CalcJumpHeight
        lda     [$5b]       ; +$22 = b1
        sta     $22
        stz     $23
        longa
        lda     $74d9,x     ; current vector position
        cmp     $74dc,x     ; calculated vector magnitude
        bcc     @fa69       ; branch if thread hasn't reached target
        inc     $5b
        clr_a
        sta     $61d2,y     ; clear character y offset
        bra     @fa89
@fa69:  clc
        adc     $22
        sta     $74d9,x     ; add b1 to vector position
        lda     $74d0,x     ; add value to y offset (for jumping)
        clc
        adc     $28
        sta     $74d0,x
        ldy     #$0001
        lda     [$5b],y     ; branch backwards
        and     #$00ff
        sta     $22
        lda     $5b
        sec
        sbc     $22
        sta     $5b
@fa89:  shorta0
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $a1: jump backward along vector ]

; b1: speed
; b2: number of bytes to branch backwards

AnimCmd_a1:
magic_code21:
@fa90:  ldx     $7af6
        jsr     CalcJumpHeight
        lda     [$5b]
        sta     $22
        stz     $23
        longa
        lda     $74d9,x     ; polar radius
        sec
        sbc     $22
        sta     $74d9,x     ;
        bpl     @faba
        inc     $5b
        ldy     $7af8
        clr_a
        sta     $61c5,y
        sta     $61c7,y
        sta     $61d2,y
        bra     @fad4
@faba:  lda     $74d0,x
        clc
        adc     $28
        sta     $74d0,x
        ldy     #$0001
        lda     [$5b],y
        and     #$00ff
        sta     $22
        lda     $5b
        sec
        sbc     $22
        sta     $5b
@fad4:  shorta0
        ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $92: move thread along vector ]

; b1: speed (diagonal pixels/frame)
; b2: script branch for looping (number of bytes backwards, 0 for no loop)

AnimCmd_92:
magic_code12:
@fadb:  ldx     $7af6
        lda     [$5b]
        sta     $74d8,x
        jsr     MoveAnimToVector
        longa
        lda     $74d8,x     ; movement speed
        and     #$00ff
        sta     $22
        lda     $74d9,x     ; add to vector position
        clc
        adc     $22
        sta     $74d9,x     ; current vector position
        cmp     $74dc,x     ; branch if less than calculated vector position
        bcc     @fb02
        inc     $5b
        bra     @fb19
@fb02:  ldy     #$0001
        lda     [$5b],y     ; script branch
        and     #$00ff
        sta     $22
        bne     @fb12
        inc     $5b
        bra     @fb19
@fb12:  lda     $5b
        sec
        sbc     $22
        sta     $5b
@fb19:  shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1fb1d:
set_move2_data:
@fb1d:  ldx     $7af6
        longa
        lda     $74dc,x     ; +$24 = vector magnitude
        sta     $24
        shorta0
        lda     $74d8,x     ; a = vector angle
        jsr     CalcSine16
        ldx     $7af6
        longa
        lda     $28
        sta     $74d9,x     ; current vector position
        shorta
        jsr     MoveAnimToVector
        ldy     #$0018
        sty     $24
        lda     $74d8,x     ; vector angle
        clc
        adc     #$40
        asl
        clc
        adc     #$90
        jsr     CalcSine16
        ldx     $7af6
        longa
        lda     $74d0,x     ; add to thread y offset
        clc
        adc     $28
        sta     $74d0,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $96:  ]

AnimCmd_96:
magic_code16:
@fb63:  jsr     _c1fb1d
        lda     $74d7,x     ; x component of vector * 128
        lsr7
        sta     $22
        lda     #$03        ;
        sec
        sbc     $22
        clc
        adc     $74d8,x     ; add to vector angle
        sta     $74d8,x
        cmp     #$80
        bcc     @fb88
        longa
        inc     $5b
        bra     @fba4
        .a8
@fb88:  cmp     #$40
        bcc     @fb91
        lda     #$01
        sta     $64e7,x     ; sprite layer priority
@fb91:  longa
        ldy     #$0001
        lda     [$5b],y
        and     #$00ff
        sta     $22
        lda     $5b
        sec
        sbc     $22
        sta     $5b
@fba4:  shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $98: update frame offset auto-increment ]

; b1: frame counter
; b2: bbbbeeee
;       b: starting frame
;       e: ending frame

AnimCmd_98:
magic_code18:
@fba8:  ldx     $7af6
        dec     $6f8d,x     ; decrement frame offset counter
        bne     @fbd1
        lda     [$5b]
        sta     $6f8d,x     ; set frame offset counter
        ldy     #$0001
        lda     [$5b],y     ; maximum frame
        and     #$0f
        sta     $22
        inc     $6f8c,x     ; increment frame offset
        lda     $6f8c,x
        cmp     $22
        bne     @fbd1       ; branch if not equal to maximum frame
        lda     [$5b],y
        lsr4
        sta     $6f8c,x     ; set starting frame
@fbd1:  ldy     $5b
        iny
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $97:  ]

AnimCmd_97:
magic_code17:
@fbd7:  ldx     $7af6
        lda     $74d2,x
        asl2
        sta     $22
        lda     $6f7e,x
        sta     $7d
        lda     $6f80,x
        sta     $7e
        lda     $6f82,x
        sta     $7f
        lda     $6f84,x
        sta     $80
        lda     $7f
        cmp     $7d
        bcc     @fc0a
        lda     $7f
        clc
        adc     $22
        sta     $7f
        bcc     @fc11
        lda     #$f8
        sta     $7f
        bra     @fc11
@fc0a:  lda     $7f
        sec
        sbc     $22
        sta     $7f
@fc11:  jsr     CalcVector
        ldx     $7af6
        lda     $88
        sta     $74d7,x
        lda     $85
        sta     $74db,x
        longa
        lda     $86
        sta     $74dc,x
        stz     $74d9,x
        shorta0
        lda     [$5b]
        sta     $74d8,x
        jsr     _c1fb1d
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $99: set thread palette ]

; b1: ----ppp-

AnimCmd_99:
magic_code19:
@fc37:  ldx     $7af6
        lda     [$5b]
        sta     $74d5,x     ; thread palette
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $9a: set thread facing direction to match attacker ]

AnimCmd_9a:
magic_code1a:
@fc40:  ldx     $7af6
        lda     $6a39,x     ; target
        bpl     @fc59       ; branch if a character
        and     #$0f
        sec
        sbc     #$04
        asl
        tay
        lda     $80f3,y     ; monster facing direction
        eor     $617e,y
        eor     #$01
        bra     @fc5d
@fc59:  tay
        lda     $7b10,y     ; character facing direction
@fc5d:  asl6
        and     #$40
        sta     $6f87,x     ; thread facing direction
        ldy     $5b
        dey
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ init palette color modification (not hardware color math) ]

; +$14: red value
; +$16: green value
; +$18: blue value

InitColorMod:
        .a16
@fc6e:  stz     $22
        stz     $24
        stz     $26
        lda     $14
        and     #$001f
        sta     $22
        lda     $16
        and     #$001f
        asl5
        sta     $24
        lda     $18
        and     #$001f
        asl5
        asl5
        sta     $26
        rts

; ------------------------------------------------------------------------------

; [ subtract from color ]

;   +A: original color
; +$22: red value
; +$24: green value
; +$26: blue value

DecColor:
        .a16
@fc99:  and     #$7fff
        sta     $2a         ; +$2a = original color
        and     #$001f
        sec
        sbc     $22         ; +$28 = resulting red value
        sta     $28
        and     #$7fe0
        bne     @fcb6       ; branch if the red value was less than zero
        lda     $2a
        and     #$7fe0
        ora     $28
        sta     $2a         ; resulting color
        bra     @fcbd
@fcb6:  lda     $2a
        and     #$7fe0
        sta     $2a
@fcbd:  lda     $2a         ; green
        and     #$03e0
        sec
        sbc     $24
        sta     $28
        and     #$7c1f
        bne     @fcd7
        lda     $2a
        and     #$7c1f
        ora     $28
        sta     $2a
        bra     @fcde
@fcd7:  lda     $2a
        and     #$7c1f
        sta     $2a
@fcde:  lda     $2a
        and     #$7c00
        sec
        sbc     $26
        sta     $28
        and     #$83ff
        bne     @fcf8
        lda     $2a
        and     #$03ff
        ora     $28
        sta     $2a
        bra     @fcff
@fcf8:  lda     $2a
        and     #$03ff
        sta     $2a
@fcff:  rts

; ------------------------------------------------------------------------------

; [ add to color ]

;   +A: original color
; +$22: red value
; +$24: green value
; +$26: blue value

IncColor:
        .a16
@fd00:  and     #$7fff
        sta     $2a
        and     #$001f
        clc
        adc     $22
        sta     $28
        and     #$7fe0
        bne     @fd1d
        lda     $2a
        and     #$7fe0
        ora     $28
        sta     $2a
        bra     @fd24
@fd1d:  lda     $2a
        ora     #$001f
        sta     $2a
@fd24:  lda     $2a
        and     #$03e0
        clc
        adc     $24
        sta     $28
        and     #$7c1f
        bne     @fd3e
        lda     $2a
        and     #$7c1f
        ora     $28
        sta     $2a
        bra     @fd45
@fd3e:  lda     $2a
        ora     #$03e0
        sta     $2a
@fd45:  lda     $2a
        and     #$7c00
        clc
        adc     $26
        sta     $28
        and     #$83ff
        bne     @fd5f
        lda     $2a
        and     #$03ff
        ora     $28
        sta     $2a
        bra     @fd66
@fd5f:  lda     $2a
        ora     #$7c00
        sta     $2a
@fd66:  rts

; ------------------------------------------------------------------------------

; [ battle script command $0f: execute battle event ]

; b1: battle event number

GfxCmd_0f:
goodanim:
        .a8
@fd67:  ldy     #1
        lda     ($76),y     ; battle event number
        cmp     #$1b
        beq     @fd77
        cmp     #$1f
        beq     @fd77
        inc     $e9ef       ; stop battle time except for event $1b (gau) and $1f (wrexsoul)
@fd77:  lda     $628c       ; branch if seamless scripts is enabled
        bne     @fd8f
        jsr     _c10df3       ; update hp/mp/status buffers
        jsl     BtlGfx_01     ; wait 4 frames
        jsl     BtlGfx_01
        jsl     BtlGfx_01
        jsl     BtlGfx_01
@fd8f:  inc     $e9ef       ; stop battle time
        ldy     #1
        lda     ($76),y     ; battle event number
        longa
        asl
        tax
        lda     f:BattleEventScriptPtrs,x   ; get pointer to battle event script
        sta     $8f
        shorta0
        lda     #^BattleEventScript
        sta     $91
@fda8:  lda     [$8f]       ; get battle event script command
        cmp     #$ff
        beq     @fdba       ; branch if end of script
        asl
        tax
        jsr     (.loword(BattleEventCmdTbl),x)
        ldy     $8f         ; increment event script pointer
        iny
        sty     $8f
        bra     @fda8       ; next script command
@fdba:  stz     $e9ef       ; start battle time
        rts

; ------------------------------------------------------------------------------

; battle event command jump table
BattleEventCmdTbl:
drama_jmp_tbl:
@fdbe:  .addr   BattleEventCmd_00
        .addr   BattleEventCmd_01
        .addr   BattleEventCmd_02
        .addr   BattleEventCmd_03
        .addr   BattleEventCmd_04
        .addr   BattleEventCmd_05
        .addr   BattleEventCmd_06
        .addr   BattleEventCmd_07
        .addr   BattleEventCmd_08
        .addr   BattleEventCmd_09
        .addr   BattleEventCmd_0a
        .addr   BattleEventCmd_0b
        .addr   BattleEventCmd_0c
        .addr   BattleEventCmd_0d
        .addr   BattleEventCmd_0e
        .addr   BattleEventCmd_0f
        .addr   BattleEventCmd_10
        .addr   BattleEventCmd_11
        .addr   BattleEventCmd_12
        .addr   BattleEventCmd_13
        .addr   BattleEventCmd_14

; ------------------------------------------------------------------------------

; [ battle event command $13: add/remove character as a target ]

BattleEventCmd_13:
good_inside_mode_long:
@fde8:  jsl     _c2bae2
        rts

; ------------------------------------------------------------------------------

; [ battle event command $14: show/hide hp and gauge ]

BattleEventCmd_14:
@fded:  jsl     _c2ba4b
        jsr     DrawCharNames
        jsl     _c10187
        rts

; ------------------------------------------------------------------------------

; pointers to event animation data

; 00: terra/tritoch lightning
; 01: blizzard fist (vargas)
; 02: terra/tritoch lightning (w/o explosions)
; 03: water splash (bg1)
; 04: water splash (sprite)
; 05: bahamut
; 06: zoneseek
; 07: fenrir
; 08: shiva
; 09: kirin
; 0a: bismark
; 0b: carbunkl
; 0c: terrato
; 0d: phantom
; 0e: transform into magicite
; 0f: puff of smoke (kefka/leo)
; 10: statues lightning bolt (kefka/gestahl)
; 11: black magic swirly (kefka/gestahl)
; 12: move monster back (ultros, unused)
; 13: move monster back (ultros, unused)

_c1fdf9:
event_init_data:
@fdf9:  .word   $0e0e,$0e1c,$0e2a,$0e38,$0e46,$0e54,$0e62,$0e70
        .word   $0e7e,$0e8c,$0e9a,$0ea8,$0eb6,$0ec4,$0ed2,$1014
        .word   $1500,$150e,$0eee,$0eee

; ------------------------------------------------------------------------------

; [ clear battle script data ]

_c2fe21:
clr_magic_info:
@fe21:  clr_ax
@fe23:  sta     $2c6e,x
        inx
        cpx     #$0010
        bne     @fe23
        rtl

; ------------------------------------------------------------------------------

; [ battle event command $0d: event animation ]

; b1: event animation number
; b2: attacker
; b3: target

BattleEventCmd_0d:
@fe2d:  jsl     _c2fe21     ; clear battle script data
        ldy     #$0001
        lda     [$8f],y     ; event animation number
        longa
        asl
        tax
        lda     f:_c1fdf9,x   ; pointer to animation data
        sta     $1e
        shorta0
        iny
        lda     [$8f],y     ; attacker
        jsr     _c1fe99       ; find actor
        sta     $2c6f       ; set attacker
        iny
        lda     [$8f],y     ; target
        bpl     @fe7a       ;
        lda     $2c6f
        jsr     GetBitMask
        sta     $2c70
        sta     $2c72
        sta     $613d
        stz     $613e
        lda     #$00
        sta     $2c6e
        lda     [$8f],y     ; target
        cmp     #$ff
        bne     @fe8b
        lda     #$80
        sta     $2c6e
        lda     #$04
        sta     $2c6f
        bra     @fe8b
@fe7a:  sta     $2c71
        sta     $2c73
        sta     $613e
        stz     $613d
        lda     #$40
        sta     $2c6e
@fe8b:  longa
        inc     $8f         ; increment battle event pointer
        inc     $8f
        inc     $8f
        shorta0
        jmp     _c1b884       ; execute event animation

; ------------------------------------------------------------------------------

; [ find actor ]

_c1fe99:
get_cas_chg_local:
@fe99:  sta     $10
        clr_ax
        stz     $12
@fe9f:  lda     $10
        cmp     $2ec6,x
        beq     @feb4       ; branch if actor matches
        inc     $12
        txa
        clc
        adc     #$20
        tax
        cpx     #$0080
        bne     @fe9f
        clr_a
        rts
@feb4:  lda     $12
        and     #$03
        rts

; ------------------------------------------------------------------------------

; [ battle event command $12: animations for all characters ]

BattleEventCmd_12:
@feb9:  clr_axy
@febc:  lda     $6192                   ; characters in the party
        and     f:BitOrTbl,x
        beq     @ff02
        lda     $2eae,y                 ; character graphics index
        cmp     #$ff
        beq     @ff02
        lda     $628d                   ; victory fanfare
        bne     @feda
        lda     $64ba                   ; magitek mode
        beq     @feda
        lda     #$16
        bra     @feef
@feda:  lda     $2ec7,y                 ; character ai enabled
        bne     @fee6
        lda     $2ebd,y                 ; status 1 (wound/petrify)
        and     #$c0
        beq     @feea
@fee6:  lda     #$17
        bra     @feef
@feea:  lda     $2eae,y                 ; character graphics index
        and     #$1f
@feef:  asl
        inc
        phy
        tay
        longa
        lda     [$8f],y
        sta     $24
        shorta0
        phx
        jsr     _c1ff1b
        plx
        ply
@ff02:  inx
        tya
        clc
        adc     #$20
        tay
        cpy     #$0080
        bne     @febc
        longa
        lda     $8f
        clc
        adc     #$0030
        sta     $8f
        shorta0
        rts

; ------------------------------------------------------------------------------

; [  ]

_c1ff1b:
good_start_init_set:
@ff1b:  txa
        sta     $10
        sta     $613f
        longa
        asl7
        tax
        lda     #$0101
        sta     $22
        shorta0
        lda     $10
        sta     $2c6f
        stz     $2c6e
        lda     #^BattleEventScript
        sta     $26
        jsr     _c1b1c4
        rts

; ------------------------------------------------------------------------------

; [ clear animations (long access) ]

InitEventAnim_far:
@ff43:  jsr     InitEventAnim
        rtl

; ------------------------------------------------------------------------------

; [ battle event command $0e: clear animations ]

InitEventAnim:
BattleEventCmd_0e:
@ff47:  jsl     _c19124
        jsr     ClearSpriteAnimFrameBuf
        jmp     _c19c9e       ; deactivate all animation threads

; ------------------------------------------------------------------------------

; [ execute animations (long access) ]

ExecEventAnim_far:
@ff51:  jsr     ExecEventAnim
        rtl

; ------------------------------------------------------------------------------

; [ battle event command $0f: execute animations ]

ExecEventAnim:
BattleEventCmd_0f:
@ff55:  jsr     ExecAnimScript
        stz     $627d
        jsl     _c19137
        rts

; ------------------------------------------------------------------------------

; [ battle event command $07-$0c: monster animation ]

;  b0: 7 + monster number
;  b1:
; +b2: pointer to animation data

BattleEventCmd_07:
BattleEventCmd_08:
BattleEventCmd_09:
BattleEventCmd_0a:
BattleEventCmd_0b:
BattleEventCmd_0c:
@ff60:  lda     [$8f]
        sec
        sbc     #$03
        pha
        ldy     #$0001
        lda     [$8f],y
        clc
        adc     #$04
        sta     $10
        ora     #$80
        sta     $613f
        jmp     _ffa9

; ------------------------------------------------------------------------------

; [ battle event command $03-$06: character animation ]

;  b0: 3 + character number
;  b1: actor number
; +b2: pointer to animation data

BattleEventCmd_03:
BattleEventCmd_04:
BattleEventCmd_05:
BattleEventCmd_06:
@ff78:  lda     [$8f]
        sec
        sbc     #$03
        pha
        ldy     #$0001
        lda     [$8f],y
        sta     $10
        clr_axy
@ff88:  lda     $2ec6,y
        cmp     $10
        beq     @ffa3
        tya
        clc
        adc     #$20
        tay
        inx
        cpx     #$0004
        bne     @ff88
        pla
        ldy     $8f
        iny3
        sty     $8f
        rts
@ffa3:  txa
        sta     $10
        sta     $613f
_ffa9:  pla
        longa
        asl7
        tax
        lda     #$0101
        sta     $22
        inc     $8f
        inc     $8f
        lda     [$8f]
        sta     $24
        inc     $8f
        shorta0
        lda     $10
        sta     $2c6f
        cmp     #$04
        bcc     @ffd7
        ora     #$80
        sta     $10
        lda     #$c0
        bra     @ffd8
@ffd7:  clr_a
@ffd8:  sta     $2c6e
        lda     #^BattleEventScript
        sta     $26
        jsr     _c1b1c4
        rts

; ------------------------------------------------------------------------------

; [ battle event command $02: no effect ]

BattleEventCmd_02:
@ffe3:  rts

; ------------------------------------------------------------------------------

; unused
@ffe4:  rts

; ------------------------------------------------------------------------------

.segment "btlgfx_code_far"

; ------------------------------------------------------------------------------

; tables of icons in each slot reel

SlotReelTbl:
@a800:  .word   0,4,5,3,4,5,2,5,1,4,5,3,5,2,3,1
        .word   0,4,1,5,3,4,1,5,4,3,2,5,4,3,2,5
        .word   0,1,3,4,2,5,4,3,1,5,4,3,2,5,4,5

; ------------------------------------------------------------------------------

; palette data for swdtech menu (grays out attacks that aren't known)
_c2a860:
sword_level_attr:
@a860:  .byte   $21,$21,$21,$21,$21,$21,$21,$21,$25,$25,$25,$25,$25,$25,$25

; ------------------------------------------------------------------------------

; horizontal movement speed for back row (4 battle types, 4 characters each)
_c2a86f:
player_chg_x_offset2:
@a86f:  .byte   $02,$02,$02,$02
        .byte   $fe,$fe,$fe,$fe
        .byte   $00,$00,$00,$00
        .byte   $02,$02,$fe,$fe

; ------------------------------------------------------------------------------

; horizontal movement speed for front row (4 battle types, 4 characters each)
_c2a87f:
player_chg_x_offset:
@a87f:  .byte   $fe,$fe,$fe,$fe
        .byte   $02,$02,$02,$02
        .byte   $00,$00,$00,$00
        .byte   $fe,$fe,$02,$02

; ------------------------------------------------------------------------------

; [  ]

_c2a88f:
auto_last_tfr:
@a88f:  lda     $9a
        beq     @a8d1
        lda     $0e
        and     #$07
        tax
        lda     f:_c2e4e3,x
        sta     f:$004374
        txa
        asl
        tax
        longa
        lda     f:_c2e4c3,x
        sta     f:hVMADDL
        lda     f:_c2e4d3,x
        sta     f:$004372
        lda     #$0800
        sta     f:$004375
        shorta0
        lda     #$01
        sta     f:$004370
        lda     #$18
        sta     f:$004371
        lda     #$80
        sta     f:hMDMAEN
@a8d1:  rtl

; ------------------------------------------------------------------------------

and_data:
_c2a8d2:
@a8d2:  .word   $ffff,$ffff,$ffff,$ffff,$ffff,$ffff,$ffff,$ffff
        .word   $ff7f,$fffb,$ffef,$ffdf,$fffd,$fff7,$fffe,$ffbf
        .word   $fdff,$efff,$f7ff,$bfff,$feff,$7fff,$dfff,$fbff
        .word   $ff7f,$fffb,$ffef,$ffdf,$fffd,$fff7,$fffe,$ffbf
        .word   $fdff,$efff,$f7ff,$bfff,$feff,$7fff,$dfff,$fbff
        .word   $ff7f,$fffb,$ffef,$ffdf,$fffd,$fff7,$fffe,$ffbf
        .word   $fdff,$efff,$f7ff,$bfff,$feff,$7fff,$dfff,$fbff

; ------------------------------------------------------------------------------

; [  ]

_c2a942:
inc_scr_poi:
@a942:  ldx     $ecec
        cpx     #$000c
        bcc     @a960
        dec     $ecee
        bne     @a955
        lda     #$04
        sta     $ecee
        rts
@a955:  longa
        dec     $64b6
        inc     $80cf
        shorta0
@a960:  rts

; ------------------------------------------------------------------------------

; [ wait A frames (final Kefka death animation) ]

WaitKefkaDeath:
@a961:  pha
        jsl     WaitFrame_far
        pla
        dec
        bne     @a961
        rts

; ------------------------------------------------------------------------------

; [ final kefka death animation ]

KefkaDeathAnim:
@a96b:  inc     $9a
        inc     $628b
        ldx     #$ffff
        stx     $4001
        stx     $4003
        lda     #$01
        sta     $ecee
        inc     $7b0c       ; invalidate character/monster order priority data
        lda     #$16
        sta     $898d
        clr_ax
@a988:  lda     $7f00,x
        sta     $7e60,x
        inx
        cpx     #$0020
        bne     @a988
        clr_ax
        phb
        lda     #$7f
        pha
        plb
        longa
@a99d:  stz     $c400,x
        inx2
        cpx     #$1000
        bne     @a99d
        clr_ax
        lda     #$2c00
        sta     $12
@a9ae:  lda     #$0010
        sta     $10
        lda     $12
@a9b5:  sta     $c400,x
        inx2
        inc
        dec     $10
        bne     @a9b5
        sta     $12
        txa
        clc
        adc     #$0020
        tax
        cpx     #$0400
        bne     @a9ae
        lda     #$fff0
        sta     $7e64b4
        sta     $7e7b16
        sta     $7e64b6
        sta     $7e7b18
        clr_a
        sta     $7e7b1d
        sta     $7e7b1f
        shorta
        plb
        ldx     #$1000
        stx     $10
        ldx     #$c400
        ldy     #$4800
        lda     #$7f
        jsl     WaitTfrVRAM_far
        lda     $896f
        and     #$af
        sta     $896f
        lda     #$4a
        sta     $8971
        clr_ax
        stx     $ecec
        phb
        lda     #$7f
        pha
        plb
        longa
@aa15:  stz     $c400,x
        inx2
        cpx     #$2000
        bne     @aa15
        shorta0
        plb
        clr_ax
@aa25:  sta     $ecbc,x
        stz     $eccc,x
        clc
        adc     #$04
        inx
        cpx     #$0010
        bne     @aa25
        lda     #$08
        jsr     WaitKefkaDeath
        lda     #$17
        sta     $898d
@aa3e:  jsl     WaitFrame_far
        jsr     _c2a942
        jsr     _c2aaf8
        jsl     WaitFrame_far
        jsr     _c2aaf8
        jsl     WaitFrame_far
        jsr     _c2a942
        jsr     _c2aaf8
        jsl     WaitFrame_far
        jsr     _c2aaf8
        ldx     #$cc3f
        stx     $10
        ldx     #$e200
        stx     $12
        lda     #$7f
        sta     $14
        clr_ax
@aa70:  lda     $ecbc,x
        beq     @aa7a
        dec     $ecbc,x
        bra     @aa9b
@aa7a:  lda     $eccc,x
        cmp     #$18
        bcs     @aa9b
        asl
        phx
        tax
        clr_ay
@aa86:  lda     f:_c2a8d2,x
        sta     $ecdc,y
        inx
        iny
        cpy     #$0010
        bne     @aa86
        plx
        jsr     _c2ab5a
        inc     $eccc,x
@aa9b:  longa
        lda     $10
        sec
        sbc     #$0200
        sta     $10
        lda     $12
        sec
        sbc     #$0200
        sta     $12
        shorta0
        inx
        cpx     #$0010
        bne     @aa70
        ldx     $ecec
        inx
        stx     $ecec
        cpx     #$004a
        bne     @aadb
        phx
        inc     $e9ed       ; disable sound effects
        lda     #$82        ; spc command $82 (set sound effect volume)
        sta     $1300
        lda     #$c0        ; set sound effect volume to $c0
        sta     $1301
        stz     $1302
        jsl     ExecSound_ext
        stz     $e9ed       ; enable sound effects
        plx
@aadb:  cpx     #$005a
        jne     @aa3e
        lda     #$80
        jsr     WaitKefkaDeath
        lda     $e9f9
        beq     @aaf7
@aaed:  lda     #$10
        jsr     WaitKefkaDeath
        dec     $e9f9
        bne     @aaed
@aaf7:  rtl

; ------------------------------------------------------------------------------

; [  ]

_c2aaf8:
last_chr_sift:
@aaf8:  phb
        lda     #$7f
        pha
        plb
        longa
        clr_ax
        stz     $18
@ab03:  lda     #$e200
        clc
        adc     $18
        sta     $10
        lda     #$e00e
        clc
        adc     $18
        sta     $14
        lda     #$0010
        sta     $16
@ab18:  lda     $10
        inc2
        sta     $12
        ldy     #$001c
@ab21:  lda     ($10),y
        sta     ($12),y
        dey2
        bpl     @ab21
        lda     ($14)
        sta     ($10)
        ldy     #$0010
        lda     ($14),y
        sta     ($10),y
        lda     $10
        sec
        sbc     #$0200
        sta     $10
        lda     $14
        sec
        sbc     #$0200
        sta     $14
        dec     $16
        bne     @ab18
        lda     $18
        clc
        adc     #$0020
        sta     $18
        cmp     #$0200
        bne     @ab03
        shorta0
        plb
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2ab5a:
last_one_line_clr:
@ab5a:  phx
        clr_axy
        longa
@ab60:  lda     $ecdc,x
        eor     #$ffff
        sta     $1a
        lda     ($10),y
        and     $1a
        ora     [$12],y
        sta     [$12],y
        lda     ($10),y
        and     $ecdc,x
        sta     ($10),y
        inx2
        txa
        and     #$000f
        tax
        iny2
        cpy     #$0200
        bne     @ab60
        shorta0
        plx
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2ab8a:
@ab8a:  phb
        clr_a
        pha
        plb
        lda     #$7e
        sta     $4374
        ldx     #$6ab7
        stx     hVMADDL
        ldy     #$000e
        sty     $4375
        ldx     #$5d15
        stx     $4372
        lda     #$80
        sta     hMDMAEN
        ldx     #$6af7
        stx     hVMADDL
        sty     $4375
        ldx     #$5d23
        stx     $4372
        sta     hMDMAEN
        lda     $7e7b81
        jeq     @ac4a
        longa
        lda     #$7a24
        sta     hVMADDL
.repeat 8,i
        lda     $7e5dd9+i*2
        sta     hVMDATAL
.endrep
        lda     #$7a64
        sta     hVMADDL
.repeat 8,i
        lda     $7e7a73+i*2
        sta     hVMDATAL
.endrep
        shorta0
        sta     $7e7b81
@ac4a:  lda     #$01
        sta     $4370
        lda     #$18
        sta     $4371
        lda     #$7e
        sta     $4374
        ldy     #$000c
        lda     $7e629b
        beq     @ac6e
        clr_a
        sta     $7e629b
        lda     $98
        lsr
        and     #$03
        bra     @ac75
@ac6e:  lda     $7e7b9a
        dec
        and     #$03
@ac75:  asl
        tax
        lda     #$80
        jmp     (.loword(_c2ac7c),x)

_c2ac7c:
@ac7c:  .addr   _c2ac84,_c2acbd,_c2acf6,_c2ad2f

; ------------------------------------------------------------------------------

; [  ]

_c2ac84:
@ac84:  ldx     #$7839
        stx     hVMADDL
        ldx     #$5c51
        stx     $4372
        sty     $4375
        sta     hMDMAEN
        ldx     #$7939
        stx     hVMADDL
        ldx     #$5c51
        stx     $4372
        sty     $4375
        sta     hMDMAEN
        ldx     #$7a39
        stx     hVMADDL
        ldx     #$5c51
        stx     $4372
        sty     $4375
        sta     hMDMAEN
        jmp     _c2ad65

; ------------------------------------------------------------------------------

; [  ]

_c2acbd:
@acbd:  ldx     #$7879
        stx     hVMADDL
        ldx     #$5c69
        stx     $4372
        sty     $4375
        sta     hMDMAEN
        ldx     #$7979
        stx     hVMADDL
        ldx     #$5c69
        stx     $4372
        sty     $4375
        sta     hMDMAEN
        ldx     #$7a79
        stx     hVMADDL
        ldx     #$5c69
        stx     $4372
        sty     $4375
        sta     hMDMAEN
        jmp     _c2ad65

; ------------------------------------------------------------------------------

; [  ]

_c2acf6:
@acf6:  ldx     #$78b9
        stx     hVMADDL
        ldx     #$5c81
        stx     $4372
        sty     $4375
        sta     hMDMAEN
        ldx     #$79b9
        stx     hVMADDL
        ldx     #$5c81
        stx     $4372
        sty     $4375
        sta     hMDMAEN
        ldx     #$7ab9
        stx     hVMADDL
        ldx     #$5c81
        stx     $4372
        sty     $4375
        sta     hMDMAEN
        jmp     _c2ad65

; ------------------------------------------------------------------------------

; [  ]

_c2ad2f:
@ad2f:  ldx     #$78f9
        stx     hVMADDL
        ldx     #$5c99
        stx     $4372
        sty     $4375
        sta     hMDMAEN
        ldx     #$79f9
        stx     hVMADDL
        ldx     #$5c99
        stx     $4372
        sty     $4375
        sta     hMDMAEN
        ldx     #$7af9
        stx     hVMADDL
        ldx     #$5c99
        stx     $4372
        sty     $4375
        sta     hMDMAEN
; fallthrough

; ------------------------------------------------------------------------------

; [  ]

_c2ad65:
@ad65:  plb
        shorti
        lda     $7b9c
        beq     @adb6
        stz     $7b9c
        lda     $7b9d
        cmp     #$ff
        beq     @adb6
        asl
        tax
        longa
        lda     f:_c2add9,x
        tay
        txa
        asl2
        tax
        lda     #$0003
        sta     $36
@ad89:  lda     f:_c2adb9,x
        sta     f:hVMADDL
        lda     $5c0d,y
        sta     f:hVMDATAL
        lda     $5c0f,y
        sta     f:hVMDATAL
        lda     $5c11,y
        sta     f:hVMDATAL
        lda     $5c13,y
        sta     f:hVMDATAL
        inx2
        dec     $36
        bne     @ad89
        shorta0
@adb6:  longi
        rtl

; ------------------------------------------------------------------------------

_c2adb9:
@adb9:  .word   $7835,$7935,$7a35,$0000
        .word   $7875,$7975,$7a75,$0000
        .word   $78b5,$79b5,$7ab5,$0000
        .word   $78f5,$79f5,$7af5,$0000

_c2add9:
@add9:  .word   $0000,$0010,$0020,$0030

; ------------------------------------------------------------------------------

; status names (32 items, 10 bytes each)
StatusName:
        incbin_lang "src/text/status_name_%s.dat"

; ------------------------------------------------------------------------------

; [ battle animation command $80/$85:  ]

_c2af21:
magic_init_133long:
@af21:  ldy     $5b
        iny
        sty     $5b
        lda     [$5b]
        beq     @af4b
        cmp     #$01
        beq     @af35
        jsr     Rand_near
        and     #$07
        bne     @af4a
@af35:  longa
        clr_ax
@af39:  lda     f:_c2e2e8,x
        sta     $7ea0,x
        inx2
        cpx     #$0060
        bne     @af39
        shorta0
@af4a:  rtl
@af4b:  longa
        clr_ax
@af4f:  lda     f:_c2e288,x
        sta     $7ea0,x
        inx2
        cpx     #$0060
        bne     @af4f
        shorta0
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$83:  ]

_c2af61:
magic_init_131long:
@af61:  clr_ax
@af63:  stz     $8057,x     ; clear monster y-shift for sprite priority
        inx
        cpx     #$000c
        bne     @af63
        ldx     $7af6
        lda     $6a39,x     ; target
        bpl     @af96       ; return if a character
        and     #$0f
        sec
        sbc     #$04
        asl
        tax
        longa
        lda     #$fff8
        sta     $8057,x     ; set monster y-shift to -8
        lda     $80cf,x     ; monster y position (top)
        sta     $ecb4       ;
        sec
        sbc     #$0100
        sta     $80cf,x
        stx     $ecb6       ;
        shorta0
@af96:  rtl

; ------------------------------------------------------------------------------

; high sprite data
_c2af97:
@af97:  .byte   $02,$08,$20,$80
        .byte   $03,$0c,$30,$c0
        .byte   $01,$04,$10,$40

; ------------------------------------------------------------------------------

; [ init high sprite data ]

_c2afa3:
oam_hibit_init:
@afa3:  clr_ay
        stz     $10
@afa7:  lda     $10
        lsr2
        sta     $a17f,y
        sta     $a180,y
        sta     $a181,y
        sta     $a182,y
        lda     $10
        and     #$03
        tax
        lda     f:_c2af97,x
        sta     $a37f,y
        sta     $a380,y
        sta     $a381,y
        sta     $a382,y
        lda     f:_c2af97+4,x
        sta     $a57f,y
        sta     $a580,y
        sta     $a581,y
        sta     $a582,y
        lda     f:_c2af97+8,x
        sta     $a77f,y
        sta     $a780,y
        sta     $a781,y
        sta     $a782,y
        inc     $10
        iny4
        cpy     #$0200
        bne     @afa7
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$72: branch if attack didn't miss ]

_c2aff8:
magic_init_114long:
@aff8:  ldx     $5b
        inx
        stx     $5b
        ldx     $7af6
        lda     $6f88,x     ; branch if attack didn't miss
        bpl     @b006
        rtl
@b006:  lda     [$5b]
        longa
        sta     $22
        lda     $5b
        clc
        adc     $22
        sta     $5b
        shorta0
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$74: branch if ??? ]

_c2b017:
magic_init_116long:
@b017:  ldx     $7af6
        lda     $6a39,x     ; target
        bmi     @b025       ; branch if a monster
        tay
        lda     $61ae,y     ;
        beq     @b038
@b025:  ldy     #$0001
        lda     [$5b],y
        longa
        sta     $22
        lda     $5b
        clc
        adc     $22
        sta     $5b
        shorta0
@b038:  ldx     $5b
        inx
        stx     $5b
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$7d: branch if dragon horn is active ]

_c2b03e:
magic_init_125long:
@b03e:  ldx     $5b
        inx
        stx     $5b
        ldx     $7af6
        lda     $ec10       ; branch if dragon horn effect is active
        bne     @b04c
        rtl
@b04c:  lda     [$5b]
        longa
        sta     $22
        lda     $5b
        clc
        adc     $22
        sta     $5b
        shorta0
        rtl

; ------------------------------------------------------------------------------

; monster death animation palette
MonsterDeathPal:
@b05d:  .word   $318c,$0401,$7c1f,$741d,$6419,$5c17,$5415,$4c13
        .word   $4411,$3c0f,$340d,$2c0b,$2409,$1c07,$1405,$0c03

; ------------------------------------------------------------------------------

; block/shield palettes (8 colors each)
BlockPal:
@b07d:  .word   $0000,$0000,$001a,$0013,$000d,$7ffe,$0380,$01c0
        .word   $0000,$0000,$7ffe,$373a,$2295,$1d8b,$28f2,$186e
        .word   $0000,$0000,$7ffe,$6737,$4a71,$2989,$2ef8,$098f
        .word   $35ad,$0c63,$6fff,$2108,$31f8,$2926,$18c6,$0172

; ------------------------------------------------------------------------------

; unused ???
@b0bd:  .byte   $02,$04,$06,$08,$0a,$0c,$0e,$10

; ------------------------------------------------------------------------------

; vertical scroll positions for magitek train car bg
tor_rnd_poi:
_c2b0c5:
@b0c5:  .word   $0000,$ffff,$fffe,$fffd

; ------------------------------------------------------------------------------

; battle bg update jump table
UpdateBattleBGTbl:
land_prog_jmp:
@b0cd:  .addr   UpdateBattleBGNoEffect  ; $00
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBG_07
        .addr   UpdateBattleBGNoEffect  ; $08
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBG_0d
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBG_0f
        .addr   UpdateBattleBGNoEffect  ; $10
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect  ; $18
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBG_1f
        .addr   UpdateBattleBGNoEffect  ; $20
        .addr   UpdateBattleBG_21
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect  ; $28
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBG_2c
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBG_2e
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect  ; $30
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBGNoEffect
        .addr   UpdateBattleBG_36
        .addr   UpdateBattleBGNoEffect

; ------------------------------------------------------------------------------

; [ no battle bg update ]

UpdateBattleBGNoEffect:
@b13d:  rtl

; ------------------------------------------------------------------------------

; final kefka death animation scroll positions ???
_c2b13e:
@b13e:  .word   1,2,1,0,1,2,1,2

; ------------------------------------------------------------------------------

; [ update battle bg $36: final kefka ]

UpdateBattleBG_36:
        .a16
@b14e:  lda     $9a         ; return if death animation is not enabled
        beq     @b16f
        lda     $0e         ; frame counter
        and     #$0007
        asl
        tax
        lda     f:_c2b13e,x   ;
        pha
        clc
        adc     #$fff0
        sta     $7e64b4     ;
        pla
        clc
        adc     #$0010
        sta     $80c3
        clr_a
@b16f:  rtl

; ------------------------------------------------------------------------------

; [ update battle bg $2e: cyan's dream world ]

UpdateBattleBG_2e:
        .a16
@b170:  clr_ax
@b172:  lda     $ec13,x     ; copy first 8 colors of palette 1 and 3 to buffer
        sta     $ec71,x
        sta     $ec81,x
        lda     $ec53,x
        sta     $ec91,x
        sta     $eca1,x
        inx2
        cpx     #$0010
        bne     @b172
        lda     $0e         ; frame counter / 8
        lsr3
        and     #$0007
        asl
        tax
        clr_ay
@b197:  lda     $ec71,x     ; shift colors every 8 frames
        sta     $ec13,y
        lda     $ec91,x
        sta     $ec53,y
        iny2
        inx2
        cpy     #$0010
        bne     @b197
        rtl

; ------------------------------------------------------------------------------

; [ update battle bg $07: falling through the clouds ]

UpdateBattleBG_07:
        .a16
@b1ad:  lda     $64b2       ; add 6 to vertical scroll position
        clc
        adc     #$0006
        sta     $64b2
        rtl

; ------------------------------------------------------------------------------

; [ update battle bg $0f/$21: top of train car/running on train tracks ]

UpdateBattleBG_0f:
UpdateBattleBG_21:
        .a16
@b1b8:  lda     $64b0       ; subtract 4 from horizontal scroll position
        sec
        sbc     #$0004
        sta     $64b0
        rtl

; ------------------------------------------------------------------------------

; [ update battle bg $2c: magitek train car ]

UpdateBattleBG_2c:
        .a16
@b1c3:  lda     $64b0       ; add 8 to horizontal scroll position
        sec
        sbc     #$0008
        sta     $64b0
        shorta
        jsr     Rand_near
        longa
        and     #$0003      ; (0..3)
        asl
        tax
        lda     f:_c2b0c5,x   ; vertical scroll position (0, -1, -2, -3)
        sta     $64b2
        rtl

; ------------------------------------------------------------------------------

; [ update battle bg $1f: waterfall ]

UpdateBattleBG_1f:
        .a16
@b1e1:  clr_ax
@b1e3:  lda     $ec13,x     ; copy first 8 colors of palette 1 to buffer
        sta     $ec71,x
        sta     $ec81,x
        inx2
        cpx     #$0010
        bne     @b1e3
        lda     $64b2       ; add 6 to vertical scroll position
        clc
        adc     #$0006
        sta     $64b2
        lda     $0e         ; frame counter / 4
        lsr2
        and     #$0007
        asl
        tax
        clr_ay
@b208:  lda     $ec71,x     ; shift colors every 4 frames
        sta     $ec13,y
        iny2
        inx2
        cpy     #$0010
        bne     @b208
        rtl

; ------------------------------------------------------------------------------

; [ update battle bg $0d: raft on a river ]

UpdateBattleBG_0d:
        .a16
@b218:  clr_ax
@b21a:  lda     $ec13,x     ; copy colors 1 through 4 of palette 1 to buffer
        sta     $ec71,x
        sta     $ec79,x
        lda     $ec1b,x     ; copy colors 5 through 8 of palette 1 to buffer
        sta     $ec81,x
        sta     $ec89,x
        inx2
        cpx     #$0008
        bne     @b21a
        lda     $0e         ; frame counter / 8
        lsr3
        and     #$0003
        eor     #$0003      ; invert
        asl
        tax
        clr_ay
@b242:  lda     $ec71,x     ; shift colors backwards every 8 frames
        sta     $ec13,y
        lda     $ec81,x
        sta     $ec1b,y
        iny2
        inx2
        cpy     #$0008
        bne     @b242
        rtl

; ------------------------------------------------------------------------------

; [ update battle bg palette and scrolling ]

UpdateBattleBG:
        .a16
@b258:  shorti
        clr_ax
@b25c:  lda     $7ea0,x     ; copy battle bg palettes
        sta     $ec11,x
        lda     $7ec0,x
        sta     $ec31,x
        lda     $7ee0,x
        sta     $ec51,x
        inx2
        cpx     #$20
        bne     @b25c
        longi
        lda     $ecb8       ; battle bg index
        and     #$003f
        asl
        tax
        jmp     (.loword(UpdateBattleBGTbl),x)

; ------------------------------------------------------------------------------

; [ battle animation command $80/$7c: swap target and attacker ]

; used by engulf (zone eater ability)

_c2b281:
magic_init_124long:
        .a8
@b281:  ldx     $7af6
        lda     $6a38,x     ; attacker
        pha
        lda     $6a39,x     ; target
        sta     $6a38,x     ; swap target and attacker
        pla
        sta     $6a39,x
        longa
        lda     $6f7e,x
        pha
        lda     $6f80,x
        pha
        lda     $6f82,x
        sta     $6f7e,x
        lda     $6f84,x
        sta     $6f80,x
        pla
        sta     $6f84,x
        pla
        sta     $6f82,x
        shorta0
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$7b: flip all characters ]

; used after running to opposite side of screen

_c2b2b4:
magic_init_123long:
@b2b4:  clr_axy
@b2b7:  stz     $61c0,x     ; clear secondary graphical action
        lda     $61be,x     ; flip character horizontal
        eor     #$40
        sta     $61be,x
        lda     $7b10,y     ; switch hands
        eor     #$01
        sta     $7b10,y
        iny                 ; next character
        txa
        clc
        adc     #$20
        tax
        cmp     #$80
        bne     @b2b7
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$79: characters run to left side of screen ]

; takes 56 loops to reach other side of screen

_c2b2d5:
magic_init_121long:
@b2d5:  clr_ax
        longa
@b2d9:  lda     $61c9,x     ; subtract 4 from character xy angle
        sec
        sbc     #$0004
        sta     $61c9,x
        shorta0
        lda     $2ebd,x     ; branch if wound or petrify status
        and     #$c0
        bne     @b2f2
        lda     #$04
        sta     $61c0,x     ; set secondary graphical action to 4 (running forward)
@b2f2:  longa
        txa                 ; next character
        clc
        adc     #$0020
        tax
        cpx     #$0080
        bne     @b2d9
        shorta0
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$7a: characters run to right side of screen ]

_c2b303:
magic_init_122long:
@b303:  clr_ax
        longa
@b307:  lda     $61c9,x
        clc
        adc     #$0004
        sta     $61c9,x
        shorta0
        lda     $2ebd,x
        and     #$c0
        bne     @b320
        lda     #$03
        sta     $61c0,x
@b320:  longa
        txa
        clc
        adc     #$0020
        tax
        cpx     #$0080
        bne     @b307
        shorta0
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$77:  ]

_c2b331:
magic_init_119long:
@b331:  jsr     GetTargetThreadPtr
        ldx     $7af6
        lda     $6a39,x
        asl
        tax
        longa
        lda     $61b7,y
        sta     $6256,x
        lda     $61b9,y
        sta     $625e,x
        ldx     $7af6
        lda     $6f7e,x
        sta     $61b7,y
        lda     $6f80,x
        sec
        sbc     #$0030
        sta     $61b9,y
        shorta0
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$78:  ]

_c2b361:
magic_init_120long:
@b361:  jsr     GetTargetThreadPtr
        ldx     $7af6
        lda     $6a39,x
        asl
        tax
        longa
        lda     $6256,x
        sta     $61b7,y
        clr_a
        sta     $61c5,y
        sta     $61d4,y
        lda     $625e,x
        sta     $61b9,y
        clr_a
        sta     $61c7,y
        sta     $61d2,y
        shorta0
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$76:  ]

_c2b38c:
magic_init_118long:
@b38c:  ldx     $7af6
        ldy     #$0001
        lda     [$5b],y
        sta     $10
        bmi     @b39c
        stz     $11
        bra     @b3a0
@b39c:  lda     #$ff
        sta     $11
@b3a0:  longa
        inc     $5b
        lda     $74d9,x
        clc
        adc     $10
        sta     $74d9,x
        sta     $10
        stz     $12
        stz     $16
        lda     #$0040
        sta     $18
        lda     $6f87,x
        and     #$00ff
        beq     @b3ef
        lda     $6f80,x
        and     #$00ff
        asl2
        tax
@b3c9:  lda     $12
        clc
        adc     $10
        sta     $12
        lda     $13
        and     #$00ff
        sta     $13
        lda     $16
        sec
        sbc     $13
        sta     $16
        stz     $13
        sta     $43f5,x
        dex4
        dec     $18
        bne     @b3c9
        shorta0
        rtl

        .a16
@b3ef:  lda     $6f80,x
        and     #$00ff
        asl2
        tax
@b3f8:  lda     $12
        clc
        adc     $10
        sta     $12
        lda     $13
        and     #$00ff
        clc
        adc     $16
        sta     $16
        stz     $13
        sta     $43f5,x
        dex4
        dec     $18
        bne     @b3f8
        shorta0
        rtl

; ------------------------------------------------------------------------------

; [ update character/monster facing directions ]

UpdateFacingDir:
@b41a:  clr_ax
        stx     $2f50       ; character/monster facing directions
        ldx     #$0003
@b422:  lda     $7b10,x     ; character facing direction (0 = left, 1 = right)
        lsr
        rol     $2f50
        dex
        bpl     @b422
        clr_ax
        ldx     #$000a
@b431:  lda     $80f3,x     ; monster horizontal flip (for graphics)
        eor     $617e,x     ; monster horizontal flip (control)
        eor     #$01        ; invert
        lsr
        rol     $2f51
        dex2
        bpl     @b431
        rtl

; ------------------------------------------------------------------------------

; [ filter colors (yellow) ]

; +$18: palette range start (+$7e7e00)
; +$1a: palette range end (+$7e7e00)

_c2b442:
chg_color:
@b442:  ldx     $18
        longa
@b446:  lda     $7e00,x     ; original color
        sta     $10
        lsr5
        sta     $12
        lsr5
        and     #$001f
        sta     $14
        lda     $10
        and     #$001f
        clc
        adc     $14
        sta     $14
        lda     $12
        and     #$001f
        clc
        adc     $14
        sta     f:hWRDIVL     ; sum of rgb color values
        shorta
        lda     #3
        sta     f:hWRDIVB     ; divide by 3 to get average
        clr_a
        longa
        nop6
        lda     f:hRDDIVL     ; average
        sta     $10
        asl5
        ora     $10
        sta     $7e00,x     ; set red and green components
        inx2                ; next color
        cpx     $1a
        bne     @b446
        shorta0
        rtl

; ------------------------------------------------------------------------------

; unused ???

@b49d:  .byte   $01,$02,$03,$04,$05,$06

; ------------------------------------------------------------------------------

; [  ]

_c2b4a3:
get_throt_data:
@b4a3:  lda     $36
        cmp     $37
        bne     @b4af
        cmp     $38
        bne     @b4af
        inc
        rtl
@b4af:  ora     $37
        bne     @b4bb
        lda     $38
        cmp     #$02
        bne     @b4bb
        clr_a
        rtl
@b4bb:  lda     #$07
        rtl

; ------------------------------------------------------------------------------

; pointers to animation data for attack commands (+$d07fb2)

; $00: morph
; $01: revert
; $02: steal
; $03: swdtech
; $04: blitz
; $05: runic
; $06: dance / rage
; $07: shock
; $08: gp rain ???
; $09: jump (monster)
; $0a: jump (character, no targets)
; $0b: jump (monster, no targets)
; $0c: 3 dice
; $0d: 2 dice
; $0e: capture-to
; $0f: capture-from
; $10: characters run right to left
; $11: chocobop
; $12: 7-flush
; $13: lagomorph
; $14: throw thick knife
; $15: throw thin knife
; $16: throw sword
; $17: throw katana
; $18: throw rod
; $19: throw spear
; $1a: throw hawk eye/sniper
; $1b: life 2 ???
; $1c: fire skean
; $1d: water edge
; $1e: bolt edge
; $1f: inviz edge
; $20: shadow edge
; $21: throw full moon/morning star/rising sun
; $22: throw boomerang
; $23: ???
; $24: gp rain ???
; $25: sketch
; $26: leap
; $27: health
; $28: lore
; $29: run
; $2a: magitek ???
; $2b: jump (unarmed)
; $2c: jump w/ thick knife
; $2d: jump w/ thin knife
; $2e: jump w/ sword
; $2f: jump w/ katana
; $30: jump w/ rod
; $31: jump w/ spear
; $32: jump w/ hawk eye/sniper
; $33:
; $34: possess
; $35: tackle (umaro)
; $36: throw (umaro)
; $37: long battle dialog
; $38: battle change
; $39: control

_c2b4be:
caster_anim_tbl:
@b4be:  .word   $0f7a,$0fc0,$0fce,$0fdc,$0fea,$0ff8,$1006,$071c
        .word   $1030,$103e,$104c,$105a,$14c8,$14d6,$151c,$152a
        .word   $1538,$06f2,$070e,$0de4,$1110,$111e,$112c,$113a
        .word   $1148,$1156,$1164,$1172,$1180,$118e,$119c,$11aa
        .word   $11b8,$11c6,$11d4,$11e2,$1030,$1068,$1076,$1084
        .word   $0fb2,$1092,$0e00,$0f42,$10a0,$10ae,$10bc,$10ca
        .word   $10d8,$10e6,$10f4,$1102,$0f34,$0f26,$0f18,$0f0a
        .word   $14ba,$1618

; ------------------------------------------------------------------------------

; [ load ghost train graphics ]

LoadTrainGfx:
@b532:  longa
        lda     $2001,x
        tax
        shorta0
        cpx     #$0106
        beq     @b541
        rtl
@b541:  ldx     #$012c
        stx     $26
        lda     f:BattleBGProp+3,x   ; battle bg tile formation index (in battle bg properties)
        asl
        tax
        lda     f:BattleBGTilesPtrs,x   ; pointer to tile formation
        sta     $f3
        lda     f:BattleBGTilesPtrs+1,x
        sta     $f4
        lda     #^BattleBGTiles
        sta     $f5
        lda     #$00        ; destination = $7fc400
        sta     $f6
        lda     #$c4
        sta     $f7
        lda     #$7f
        sta     $f8
        jsl     Decompress_ext
        ldx     $26
        lda     f:BattleBGProp,x   ; battle bg graphics index 1 (in battle bg properties)
        and     #$7f
        sta     $22
        asl
        clc
        adc     $22
        tax
        lda     f:BattleBGGfxPtrs,x   ; pointer to battle bg graphics 1
        sta     $f3
        lda     f:BattleBGGfxPtrs+1,x
        sta     $f4
        lda     f:BattleBGGfxPtrs+2,x
        sta     $f5
        ldx     $26
        lda     f:BattleBGProp+2,x   ; battle bg graphics index 3 (in battle bg properties)
        and     #$7f
        sta     $22
        asl
        clc
        adc     $22
        tax
        lda     f:BattleBGGfxPtrs,x   ; pointer to battle bg graphics 3
        sta     $f6
        lda     f:BattleBGGfxPtrs+1,x
        sta     $f7
        lda     f:BattleBGGfxPtrs+2,x
        sta     $f8
        longa
        stz     $10
        clr_ax
@b5b4:  lda     $7fc400,x   ; tile formation
        and     #$01ff
        cmp     #$0100
        bcc     @b5e4       ; branch if tile index < 256 (graphics 1)
        and     #$00ff
        sec
        sbc     #$0080
        asl5
        tay
        phx
        lda     #$0010
        sta     $12
        ldx     $10
@b5d5:  lda     [$f6],y     ; copy tile from graphics 3
        sta     $ae3f,x
        iny2
        inx2
        dec     $12
        bne     @b5d5
        bra     @b5ff
@b5e4:  asl5
        tay
        phx
        lda     #$0010
        sta     $12
        ldx     $10
@b5f2:  lda     [$f3],y     ; copy tile from graphics 1
        sta     $ae3f,x
        iny2
        inx2
        dec     $12
        bne     @b5f2
@b5ff:  stx     $10         ; next tile (256 tiles total)
        plx
        inx2
        cpx     #$0200
        bne     @b5b4
        shorta0
        rtl

; ------------------------------------------------------------------------------

; [  ]

_c2b60d:
save_key_data:
@b60d:  ldx     #$0280
        stx     $10
        ldx     #$890f
        stx     $14
@b617:  jsr     _c2b62d
        jsr     _c2b641
        ldx     $10
        inx
        stx     $10
        ldx     $14
        inx
        stx     $14
        cpx     #$8913
        bne     @b617
        rtl

; ------------------------------------------------------------------------------

; [  ]

_c2b62d:
set_one_check_sum:
@b62d:  clr_ay
@b62f:  clc
        adc     ($14),y
        iny4
        cpy     #$0060
        bne     @b62f
        eor     #$ff
        inc
        sta     ($10),y
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2b641:
save_one_key_data:
@b641:  ldy     #$0000
@b644:  lda     ($14),y
        sta     ($10),y
        iny4
        cpy     #$0060
        bne     @b644
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2b652:
load_key_data:
@b652:  lda     $2ec6
        sta     $896b
        lda     $2ee6
        sta     $896c
        lda     $2f06
        sta     $896d
        lda     $2f26
        sta     $896e
        ldx     #$0280
        stx     $10
        ldx     #$890f
        stx     $14
@b674:  jsr     _c2b6de
        bcc     @b67c
        jsr     _c2b6c6
@b67c:  ldx     $10
        inx
        stx     $10
        ldx     $14
        inx
        stx     $14
        cpx     #$8913
        bne     @b674
        clr_ax
@b68d:  lda     $896b,x
        jsr     _c2b69a
        inx
        cpx     #4
        bne     @b68d
        rtl

; ------------------------------------------------------------------------------

; [  ]

_c2b69a:
set_one_load_data:
@b69a:  phx
        sta     $18
        clr_ay
@b69f:  lda     $02dc,y
        cmp     $18
        beq     @b6ae
        iny
        cpy     #$0004
        bne     @b69f
        bra     @b6c4
@b6ae:  lda     #$17
        sta     $1a
@b6b2:  lda     $0280,y
        sta     $890f,x
        iny4
        inx4
        dec     $1a
        bne     @b6b2
@b6c4:  plx
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2b6c6:
clr_one_key_data:
@b6c6:  clr_ay
@b6c8:  sta     ($10),y
        iny4
        cpy     #$005c
        bne     @b6c8
        lda     #$ff
        sta     ($10),y
        iny4
        sta     ($10),y
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2b6de:
get_one_check_sum:
@b6de:  clr_ay
@b6e0:  clc
        adc     ($10),y
        iny4
        cpy     #$0060
        bne     @b6e0
        eor     #$ff
        inc
        cmp     ($10),y
        beq     @b6f5
        sec
        rts
@b6f5:  clc
        rts

; ------------------------------------------------------------------------------

; [ init ??? ]

_c2b6f7:
line_init_long:
@b6f7:  longa
        clr_ax
        lda     #$2000
@b6fe:  sta     $5fad,x     ;
        inx
        inx
        cpx     #$0080
        bne     @b6fe
        clr_ax
@b70a:  sta     $43f5,x     ; clear bg1 scroll hdma data
        sta     $4775,x     ; clear bg2 scroll hdma data
        sta     $4af5,x     ; clear bg3 scroll hdma data
        inx2
        cpx     #$0380
        bne     @b70a
        ldx     #$025c
        lda     #$ffa9
        sta     $12
        lda     #$ff66
        sta     $14
@b727:  lda     $12
        sta     $4777,x     ; bg2 vertical scroll hdma data (menu region)
        lda     $14
        sta     $4af7,x     ; bg3 vertical scroll hdma data (menu region)
        dec     $12
        dec     $14
        inx4
        cpx     #$0380
        bne     @b727
        ldx     #$027c
        lda     #$0064
        sta     $10
        lda     #$000c
        sta     $12
@b74b:  lda     $10
        sta     $4af7,x
        dec     $12
        bne     @b761
        lda     #$000c
        sta     $12
        lda     $10
        clc
        adc     #$0004
        sta     $10
@b761:  inx4
        cpx     #$033c
        bne     @b74b
        ldx     #$025c
        lda     #$0068
@b770:  sta     $4777,x
        inx4
        cpx     #$035c
        bne     @b770
        clr_ax
@b77e:  lda     $4d51,x
        sta     $4e75,x
        sta     $4f75,x
        sta     $5095,x
        inx2
        cpx     #$0100
        bne     @b77e
@b791:  lda     $4d51,x
        sta     $4f75,x
        sta     $5095,x
        inx2
        cpx     #$0120
        bne     @b791
@b7a1:  lda     $4d51,x
        sta     $5095,x
        inx2
        cpx     #$0140
        bne     @b7a1
        clr_ax
@b7b0:  lda     $4d73,x
        clc
        adc     #$0040
        sta     $4e97,x
        clc
        adc     #$0040
        sta     $4f97,x
        sec
        sbc     #$0008
        sta     $50b7,x
        inx4
        cpx     #$00c0
        bne     @b7b0
        clr_ax
@b7d3:  lda     $4d53,x
        sec
        sbc     #$0008
        sta     $5097,x
        lda     $4e33,x
        sec
        sbc     #$0008
        sta     $5177,x
        inx4
        cpx     #$0020
        bne     @b7d3
        clr_ax
@b7f2:  stz     $53d5,x
        lda     #$013c
        sta     $53d7,x
        inx4
        cpx     #$00a0
        bne     @b7f2
        clr_ax
        lda     #$0018
        sta     $12
        lda     #$00dc
        sta     $10
@b810:  lda     #$0100
        sta     $5475,x
        lda     $10
        sta     $5477,x
        dec     $12
        bne     @b827
        lda     $10
        clc
        adc     #$0004
        sta     $10
@b827:  inx4
        cpx     #$00c0
        bne     @b810
        clr_ax
        lda     #$0060
        sta     $10
        lda     #$0014
        sta     $12
@b83c:  lda     #$0100
        sta     $51d5,x
        lda     $10
        sta     $51d7,x
        dec     $12
        bne     @b858
        lda     #$000c
        sta     $12
        lda     $10
        clc
        adc     #$0004
        sta     $10
@b858:  inx4
        cpx     #$00e0
        bne     @b83c
        clr_a
@b862:  sta     $51d5,x
        sta     $51d7,x
        inx2
        cpx     #$0100
        bne     @b862
        clr_ax
        lda     #$0060
        sta     $10
        lda     #$000c
        sta     $12
@b87b:  lda     #$0100
        sta     $4305,x
        lda     $10
        sta     $4307,x
        dec     $12
        bne     @b897
        lda     #$000c
        sta     $12
        lda     $10
        clc
        adc     #$0004
        sta     $10
@b897:  inx4
        cpx     #$00f0
        bne     @b87b
        shorta0
        rtl

; ------------------------------------------------------------------------------

; [ update screen fade in ]

_c2b8a4:
start_add_set:
@b8a4:  lda     $e9f6
        beq     @b8f0
        lda     $e9f9
        and     #$0f
        cmp     #$0f
        beq     @b8b6
        inc
        sta     $e9f9
@b8b6:  shorti
        lda     $e9f7
        asl
        tay
        lda     $e9f8
        asl
        tax
        lda     #$e0
@b8c4:  sta     $ea31,y
        sta     $ea33,y
        sta     $eacb,x
        sta     $eacd,x
        cmp     #$ff
        beq     @b8d5
        inc
@b8d5:  inx4
        dey4
        bne     @b8c4
        inc     $e9f8
        inc     $e9f8
        dec     $e9f7
        dec     $e9f7
        bne     @b8f0
        stz     $e9f6
@b8f0:  longi
        rtl

; ------------------------------------------------------------------------------

; [  ]

_c2b8f3:
nmi_div16:
@b8f3:  phx
        longa
        stz     $30
        stz     $32
        lda     $2c
        beq     @b91e
        lda     $2e
        beq     @b91e
        ldx     #$0010
@b905:  rol     $2c
        rol     $32
        lda     $32
        sec
        sbc     $2e
        sta     $32
        bcs     @b919
        lda     $32
        adc     $2e
        sta     $32
        clc
@b919:  rol     $30
        dex
        bne     @b905
@b91e:  lda     #$0000
        shorta
        plx
        rts

; ------------------------------------------------------------------------------

; [ update timer tile data ]

_c2b925:
chg_time:
@b925:  lda     $ecef       ; branch if timer is shown
        and     #$40
        bne     @b92d
        rtl
@b92d:  lda     $628f       ; decrement timer frame counter
        beq     @b936
        dec     $628f
        rtl
@b936:  lda     #$3c        ; set timer frame counter to 60
        sta     $628f
        lda     f:$001189
        sta     $2c
        lda     f:$00118a
        sta     $2d
        ldx     #$003c
        stx     $2e
        jsr     _c2b8f3
        ldx     $30
        stx     $2c
        ldx     #$003c
        stx     $2e
        jsr     _c2b8f3
        clr_ax
        lda     $30
@b95f:  sec
        sbc     #$0a
        bcc     @b967
        inx
        bra     @b95f
@b967:  clc
        adc     #$be
        sta     $6292
        txa
        bne     @b974
        lda     #$ff
        bra     @b977
@b974:  clc
        adc     #$b4
@b977:  sta     $6290
        clr_ax
        lda     $32
@b97e:  sec
        sbc     #$0a
        bcc     @b986
        inx
        bra     @b97e
@b986:  clc
        adc     #$be
        sta     $6298
        txa
        clc
        adc     #$b4
        sta     $6296
        lda     #$c1
        sta     $6294
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$6b:  ]

_c2b999:
magic_init_107long:
@b999:  ldx     $7af6
        lda     $74d3,x
        longa
        asl2
        sta     $10
        lda     $6a30,x
        and     #$00ff
        asl3
        sta     $12
        lda     $6a3c,x
        clc
        adc     $12
        sec
        sbc     $10
        sta     $6a3c,x
        shorta0
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$6a: align bottom of thread with bottom of target ]

; used by ice 3 only

_c2b9c0:
magic_init_106long:
@b9c0:  ldx     $7af6
        lda     $74d3,x     ; target height (in 8x8 tiles)
        longa
        asl2
        sta     $10         ; +$10 = target height / 2 (in pixels)
        lda     $6a30,x     ; frame height
        and     #$00ff
        asl3
        sta     $12         ; +$12 = frame height (in pixels)
        lda     $6a3c,x     ; thread y position
        clc
        adc     $10
        sec
        sbc     $12
        sta     $6a3c,x
        shorta0
        rtl

; ------------------------------------------------------------------------------

; sprite data for monsters
_c2b9e7:
@b9e7:  .byte $00,$00,$00,$01
        .byte $20,$00,$04,$01
        .byte $40,$00,$08,$01
        .byte $60,$00,$0c,$01

        .byte $00,$20,$40,$01
        .byte $20,$20,$44,$01
        .byte $40,$20,$48,$01
        .byte $60,$20,$4c,$01

        .byte $00,$40,$80,$01
        .byte $20,$40,$84,$01
        .byte $40,$40,$88,$01
        .byte $60,$40,$8c,$01

        .byte $00,$60,$c0,$01
        .byte $20,$60,$c4,$01
        .byte $40,$60,$c8,$01
        .byte $60,$60,$cc,$01

; ------------------------------------------------------------------------------

; [  ]

_c2ba27:
get_modechr_poi:
@ba27:  ldy     #$0001
        lda     [$8f],y
        and     #$7f
        sta     $10
        stz     $12
        clr_ax
@ba34:  lda     $10
        cmp     $2ec6,x
        beq     @ba49
        inc     $12
        txa
        clc
        adc     #$20
        tax
        cpx     #$0080
        bne     @ba34
        clc
        rts
@ba49:  sec
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2ba4b:
good_bar_mode_long:
@ba4b:  jsr     _c2ba27
        bcc     @ba6d
        lda     [$8f],y
        bpl     @ba81
        ldx     $64d6
        stx     $14
        ldx     $64d8
        stx     $16
        clr_ax
        lda     $12
@ba62:  cmp     $64d6,x
        beq     @ba70
        inx
        cpx     #$0004
        bne     @ba62
@ba6d:  jmp     @bac8
@ba70:  lda     #$ff
        sta     a:$0014,x
        ldx     #$ffff
        stx     $64d6
        stx     $64d8
        jmp     @bab6
@ba81:  clr_ax
        lda     $12
@ba85:  cmp     $64d6,x
        beq     @bac8
        inx
        cpx     #$0004
        bne     @ba85
        ldx     #$ffff
        phx
        stx     $14
        stx     $16
        clr_ax
@ba9a:  lda     $64d6,x
        bmi     @baa3
        tay
        sta     $0014,y
@baa3:  inx
        cpx     #$0004
        bne     @ba9a
        lda     $12
        tay
        sta     $0014,y
        plx
        stx     $64d6
        stx     $64d8
@bab6:  clr_axy
@bab9:  lda     $0014,y
        bmi     @bac2
        sta     $64d6,x
        inx
@bac2:  iny
        cpy     #$0004
        bne     @bab9
@bac8:  ldx     $8f
        inx
        stx     $8f
        clr_ax
        longa
        lda     #$21ff
@bad4:  sta     $5b95,x
        inx2
        cpx     #$0070
        bne     @bad4
        shorta0
        rtl

; ------------------------------------------------------------------------------

; [  ]

_c2bae2:
good_inside_mode:
@bae2:  jsr     _c2ba27
        bcc     @bb0b
        lda     $12
        tax
        lda     f:BitOrTbl,x
        sta     $12
        lda     [$8f],y
        bmi     @bafe
        lda     $2f4e
        ora     $12
        sta     $2f4e
        bra     @bb0b
@bafe:  lda     $2f4c
        ora     $12
        sta     $2f4c
        lda     #$ff
        sta     $4001,x
@bb0b:  ldx     $8f
        inx
        stx     $8f
        rtl

; ------------------------------------------------------------------------------

; [ load swdtech or esper attack name ]

_c2bb11:
set_s_mess_poi:
@bb11:  and     #$0f
        asl
        tax
        jmp     (.loword(_c2bb18),x)

_c2bb18:
@bb18:  .addr   _c2bb46,_c2bb1c

; ------------------------------------------------------------------------------

; [ load swdtech name ]

_c2bb1c:
@bb1c:  ldy     #2
        lda     ($76),y
        sta     $22
        lda     #12
        sta     $24
        jsl     Mult8_far
        ldx     $26
        clr_ay
@bb2f:  lda     f:BushidoName,x
        cmp     #$ff
        beq     @bb41
        sta     $57d5,y
        inx
        iny
        cpy     #12
        bne     @bb2f
@bb41:  clr_a
        sta     $57d5,y
        rtl

; ------------------------------------------------------------------------------

; [ load esper attack name ]

_c2bb46:
@bb46:  ldy     #2
        lda     ($76),y
        sta     $22
        lda     #10
        sta     $24
        jsl     Mult8_far
        ldx     $26
        clr_ay
@bb59:  lda     f:GenjuAttackName,x
        cmp     #$ff
        beq     @bb6b
        sta     $57d5,y
        inx
        iny
        cpy     #10
        bne     @bb59
@bb6b:  clr_a
        sta     $57d5,y
        rtl

; ------------------------------------------------------------------------------

_c2bb70:
x_image_offset:
@bb70:  .word   $0000,$0000,$0000,$0000,$0000,$0020,$0020,$0040
        .word   $0040,$0060,$0060,$0080,$0080,$00a0,$00a0,$00c0
        .word   $00c0

_c2bb92:
y_image_offset:
@bb92:  .word   $0000,$0000,$0000,$0000,$0000,$0200,$0200,$0400
        .word   $0400,$0600,$0600,$0800,$0800,$0a00,$0a00,$0c00
        .word   $0c00

; ------------------------------------------------------------------------------

; [ battle animation command $80/$68: load extra esper graphics ]

; used by purifier (crusader)

_c2bbb4:
magic_init_104long:
@bbb4:  ldx     $7af6
        phx
        jsl     _c22469     ; load crusader graphics (bg1)
        clr_ax
@bbbe:  lda     $7e60,x     ; copy bg1 animation palette to character 3 sprite palette
        sta     $7fc0,x
        inx
        cpx     #$0020
        bne     @bbbe
        inc     $62b0
        plx
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$67: load extra esper palette ]

; used by purifier (crusader)

_c2bbcf:
magic_init_103long:
@bbcf:  ldx     $6169
        clr_ay
@bbd4:  lda     f:MonsterPal+$20,x
        sta     $7fe0,y
        sta     $7de0,y
        inx
        iny
        cpy     #$0020      ; 16 colors
        bne     @bbd4
        rtl

; ------------------------------------------------------------------------------

; [ update random number ]

; A: (0..255) (out)

Rand_near:
@bbe6:  phx
        lda     $72
        tax
        inc     $72
        lda     f:RNGTbl,x
        plx
        rts

; ------------------------------------------------------------------------------

; rainbow palette indexes (orange, purple, blue, green, gray, red, purple, green)
RainbowPalTbl:
@bbf2:  .byte   $c0,$c1,$c2,$c3,$c4,$c5,$c1,$c3

; ------------------------------------------------------------------------------

; [ battle animation command $80/$66: clear thread offset ]

_c2bbfa:
magic_init_102long:
@bbfa:  ldx     $7af6
        longa
        stz     $74ce,x
        stz     $74d0,x
        shorta
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$65: change rainbow palette ]

_c2bc08:
magic_init_101long:
@bc08:  lda     $0e         ; frame counter
        and     #$07
        bne     @bc37       ; return 7/8 frames
        jsr     Rand_near
        and     #$07
        tax
        lda     f:RainbowPalTbl,x
        longa
        asl4
        tax
        clr_ay
@bc21:  lda     f:AttackPal,x
        sta     $7f60,y     ; sprite animation palette
        sta     $7f70,y
        inx2
        iny2
        cpy     #$0010
        bne     @bc21
        shorta0
@bc37:  rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$5f: increase/decrease blue backdrop gradient ]

; b1: increase/decrease amount
; used by overcast

_c2bc38:
magic_init_95long:
@bc38:  ldy     #$0001
        lda     $62ae
        clc
        adc     [$5b],y
        sta     $62ae
        sta     $12
        lda     #$e0
        sta     $8996
        ldx     #$025c
        ldy     #$0004
        stz     $10
@bc53:  lda     $10
        lsr2
        sec
        sbc     $12
        bpl     @bc5d
        clr_a
@bc5d:  ora     #$80        ; blue flag
        sta     $8996,y     ; -> $2132
        sta     $8996,x
        dex4
        iny4
        inc     $10
        lda     $10
        cmp     #$4c
        bne     @bc53
        ldy     $5b
        iny
        sty     $5b
        inc     $62ad
        ldx     $7af6
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$5c:  ]

_c2bc81:
magic_init_92long:
@bc81:  longa
        clr_ax
@bc85:  sta     $44f5,x
        sta     $4475,x
        sta     $63b0,x
        inx2
        cpx     #$0080
        bne     @bc85
        shorta0
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$5b:  ]

_c2bc99:
magic_init_91long:
@bc99:  clr_ax
@bc9b:  lda     f:RNGTbl,x
        and     #$1f
        sta     $44f5,x
        stz     $44f6,x
        stz     $4475,x
        stz     $4476,x
        inx4
        cpx     #$0080
        bne     @bc9b
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$5a:  ]

_c2bcb7:
magic_init_90long:
@bcb7:  longa
        clr_ax
@bcbb:  lda     $44f5,x
        beq     @bcc5
        dec     $44f5,x
        bra     @bcd6
@bcc5:  lda     $4475,x
        sec
        sbc     #$0008
        sta     $4475,x
        clc
        adc     $63b0,x
        sta     $63b0,x
@bcd6:  inx4
        cpx     #$0080
        bne     @bcbb
        shorta0
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$59:  ]

_c2bce3:
magic_init_89long:
@bce3:  ldy     #$0001
        lda     [$5b],y
        bne     @bcff
        clr_ax
        longa
        lda     #$f708
@bcf1:  sta     $9a21,x
        inx4
        cpx     #$025c
        bne     @bcf1
        bra     @bd3a
@bcff:  longa
        asl2
        sta     $10
        clr_ax
        ldy     #$025c
        lda     #$00ff
@bd0d:  sta     $9a21,x
        sta     $9a21,y
        inx4
        dey4
        cpx     $10
        bne     @bd0d
        cpx     #$0130
        beq     @bd3a
        lda     #$f708
@bd27:  sta     $9a21,x
        sta     $9a21,y
        inx4
        dey4
        cpx     #$0130
        bne     @bd27
@bd3a:  inc     $5b
        shorta0
        inc     $6197
        rtl

; ------------------------------------------------------------------------------

; [ init character ai data ]

_c2bd43:
scene_init:
@bd43:  lda     #$ff
        sta     $629d
        stz     $2f47
        stz     $6192                   ; characters not in the party (gets inverted later)
        longa
        clr_ax
        lda     #$ffff
@bd55:  sta     $6246,x
        inx2
        cpx     #$0010
        bne     @bd55
        shorta0
        lda     $2f49
        bpl     @bd95                   ; branch if character ai is disabled
        lda     $2f4a                   ; character ai index
        sta     $22
        lda     #$18
        sta     $24
        jsl     Mult8_far
        ldx     $26
        lda     f:CharAI+1,x            ; special battle background
        cmp     #$ff
        beq     @bd84                   ; branch if no special background
        sta     $ecb8                   ; set battle background
        stz     $ecb9
@bd84:  lda     f:CharAI+2,x
        sta     $2f46                   ; characters that can be targetted
        lda     f:CharAI+3,x
        sta     $629d                   ; special song index
        jsr     _c2be6e
@bd95:  lda     $2f4b
        bmi     @bdd0
        inc     $e9ed                   ; disable sound effects
        lda     #$10                    ; spc command $10 (load song)
        sta     $1300
        lda     #$ff                    ; full volume
        sta     $1302
        lda     $629d
        cmp     #$ff
        bne     @bdbf                   ; branch if a special song from character ai data
        lda     $2f4b
        and     #$38
        lsr3
        tax
        lda     f:BattleSongTbl,x
        cmp     #$ff
        beq     @bdcd                   ; branch if continuing same song
@bdbf:  sta     $1301                   ; song number
        lda     $11e4
        and     #$08
        bne     @bdcd                   ; branch if continuing current music
        jsl     ExecSound_ext
@bdcd:  stz     $e9ed                   ; enable sound effects
@bdd0:  clr_axy
        longa
@bdd5:  stz     $2ec7,x
        lda     $6246,y
        cmp     #$ffff
        beq     @bde3
        inc     $2ec7,x
@bde3:  tya
        clc
        adc     #$0004
        tay
        txa
        clc
        adc     #$0020
        tax
        cpx     #$0080
        bne     @bdd5
        shorta0
        lda     #1
        sta     $10
        clr_ax
@bdfd:  lda     $2ec6,x
        cmp     #CHAR_PROP::KEFKA_7
        bne     @be0c
        lda     $6192                   ; exclude Kefka 7 from the party
        ora     $10
        sta     $6192
@be0c:  asl     $10
        txa
        clc
        adc     #$20
        tax
        cmp     #$80
        bne     @bdfd
        lda     $6192                   ; invert characters in the party
        eor     #$ff
        sta     $6192
        inc     $e9ed                   ; disable sound effects
        lda     #$82
        sta     $1300
        clr_a
        sta     $1301
        dec
        sta     $1302
        lda     $11e4
        and     #$08
        bne     @be3a
        jsl     ExecSound_ext
@be3a:  stz     $e9ed                   ; enable sound effects
        lda     f:$001d4f
        and     #$40
        sta     $629c
        lda     f:$001d54
        bpl     @be65
        lda     f:$001d4f
        sta     $10
        clr_ax
@be54:  lda     $10
        and     #$01
        sta     $6198,x
        lsr     $10
        inx
        cpx     #4
        bne     @be54
        bra     @be6d
@be65:  clr_ax
        stx     $6198
        stx     $619a
@be6d:  rtl

; ------------------------------------------------------------------------------

; [  ]

_c2be6e:
set_play_xy:
@be6e:  phx
        lda     f:CharAI,x
        bmi     @bee9                   ; branch if non-ai characters not shown
        lda     #4
        sta     $10
@be79:  lda     f:CharAI+4,x
        cmp     #$ff
        beq     @bee7
        and     #$3f
        sta     $12
        stz     $14
        clr_ay
        lda     #$01                    ; character bit mask
        sta     $18
@be8d:  lda     $2ec6,y                 ; actor index
        cmp     $12
        bne     @bed1
        lda     f:CharAI+4,x
        and     #CHAR_AI_FLAG_ENEMY_CHAR
        beq     @bea1
        lda     $18
        sta     $2f47                   ; characters acting as enemies
@bea1:  lda     f:CharAI+4,x
        bpl     @beaf
        lda     $18
        ora     $6192                   ; exclude from the party
        sta     $6192
@beaf:  lda     $14
        asl2
        tay
        lda     f:CharAI+7,x            ; x position
        cmp     #$ff
        beq     @bede
        longa
        asl
        sta     $6246,y
        lda     f:CharAI+8,x            ; y position
        and     #$00ff
        asl
        sta     $6248,y
        shorta
        bra     @bede
@bed1:  asl     $18
        inc     $14
        tya
        clc
        adc     #$20
        tay
        cmp     #$80
        bne     @be8d
@bede:  inx5
        dec     $10
        bne     @be79
@bee7:  plx
        rts

; non-ai characters are not shown (hide party)
@bee9:  clr_ay
        lda     #$01                    ; character bit mask
        sta     $10
@beef:  lda     f:CharAI+4,x
        cmp     #$ff
        beq     @bf0e                   ; branch if ai character slot is disabled
        and     #$40
        beq     @bf00                   ; branch if not acting as enemy
        lda     $10
        sta     $2f47                   ; set character acting as enemy
@bf00:  lda     f:CharAI+4,x
        bpl     @bf0e                   ; branch if character is not shown
        lda     $10
        ora     $6192                   ; exclude from the party
        sta     $6192
@bf0e:  lda     f:CharAI+7,x            ; x position
        cmp     #$ff
        beq     @bf29
        longa
        asl
        sta     $6246,y
        lda     f:CharAI+8,x            ; y position
        and     #$00ff
        asl
        sta     $6248,y
        shorta
@bf29:  asl     $10                     ; next character
        iny4
        inx5
        cpy     #$0010
        bne     @beef
        plx
        rts

; ------------------------------------------------------------------------------

; battle songs
BattleSongTbl:
@bf3b:  .byte   $24,$14,$33,$2e,$1a,$3b,$ff,$ff

; ------------------------------------------------------------------------------

; pointers to condemned numeral graphics for each character (gets copied to $e9d2-$e9d9, +$7f0000)
CondemnNumGfxPtrs:
@bf43:  .word   $c200,$c240,$c280,$c2c0

CondemnNumFlipGfxPtrs:
@bf4b:  .word   $c300,$c340,$c380,$c3c0

; ------------------------------------------------------------------------------

; [ update condemned numeral graphics ]

; updates one character every 4 frames

UpdateCondemnNum:
@bf53:  lda     $e9db       ; counter for condemned numerals
        and     #$03
        bne     @bf8a
        lda     $e9db
        lsr
        lsr
        and     #$03        ; character number
        tax
        lda     $202a,x     ; condemned counter value
        beq     @bf6c       ; branch if zero
        jsr     DrawCondemnNum
        bra     @bf8a
@bf6c:  txa
        asl
        tax
        longa
        lda     f:CondemnNumGfxPtrs,x
        tax
        clr_a
        ldy     #$0020
@bf7a:  sta     $7f0000,x   ; clear condemned numeral graphics (2 tiles, 32 bytes each)
        sta     $7f0100,x   ; clear backwards condemned numeral graphics
        inx2
        dey
        bne     @bf7a
        shorta0
@bf8a:  inc     $e9db       ; increment counter
        rtl

; ------------------------------------------------------------------------------

; [ draw condemned numeral graphics ]

DrawCondemnNum:
@bf8e:  ldy     #$0000
        lda     $202a,x     ; condemned counter
        dec
@bf95:  sec
        sbc     #10
        bcc     @bf9d       ; branch if less than 0
        iny
        bra     @bf95
@bf9d:  clc
        adc     #10
        sta     $10         ; $10 = ones digit
        sty     $12         ; $12 = tens digit
        phb
        lda     #$7f
        pha
        plb
        txa
        asl
        tax
        longa
        phx
        lda     f:CondemnNumGfxPtrs,x
        tax
        lda     $12
        jsr     DrawCondemnNumDigitNoFlip
        lda     $10
        jsr     DrawCondemnNumDigitNoFlip
        plx
        lda     f:CondemnNumFlipGfxPtrs,x   ; pointer to condemned numeral graphics (backwards)
        tax
        lda     $10
        jsr     DrawCondemnNumDigitFlip
        lda     $12
        jsr     DrawCondemnNumDigitFlip
        shorta0
        plb
        rts

; ------------------------------------------------------------------------------

; [  ]

DrawCondemnNumDigitFlip:
        .a16
@bfd3:  phx
        and     #$00ff
        asl
        tax
        lda     f:_c2c013,x   ; pointer to backwards numeral graphics
        bra     DrawCondemnNumDigit

; ------------------------------------------------------------------------------

; [  ]

DrawCondemnNumDigitNoFlip:
        .a16
@bfdf:  phx
        and     #$00ff
        asl
        tax
        lda     f:_c2bfff,x   ; pointer to numeral graphics
; fallthrough

; ------------------------------------------------------------------------------

; [  ]

DrawCondemnNumDigit:
        .a16
@bfe9:  tay
        plx
        lda     #$0010
        sta     $14
@bff0:  lda     $0000,y     ; copy to condemned numeral
        sta     a:$0000,x
        inx2
        iny2
        dec     $14
        bne     @bff0
        rts

; ------------------------------------------------------------------------------

; pointers to numeral graphics (10 digits, +$7f0000)
_c2bfff:
num_get_poi2:
@bfff:  .word   $be00,$be20,$be40,$be60,$be80,$bea0,$bec0,$bee0,$bf00,$bf20

; pointers to backwards numeral graphics (10 digits, +$7f0000)
_c2c013:
num_get_poi3:
@c013:  .word   $c000,$c020,$c040,$c060,$c080,$c0a0,$c0c0,$c0e0,$c100,$c120

; ------------------------------------------------------------------------------

; [  ]

_c2c027:
cgx_mode7_chg:
        .a8
@c027:  sta     $12
        stx     $10
        phb
        lda     #$7f
        pha
        plb
        clr_ax
@c032:  lda     #$08
        sta     $18
@c036:  longa
        ldy     #$0010
        lda     [$10]
        sta     $1c
        lda     [$10],y
        sta     $1a
        shorta0
        ldy     #$0008
@c049:  clr_a
        asl     $1b
        rol
        asl     $1a
        rol
        asl     $1d
        rol
        asl     $1c
        rol
        and     #$1f
        beq     @c05c
        ora     #$30
@c05c:  sta     $c401,x
        inx2
        dey
        bne     @c049
        ldy     $10
        iny2
        sty     $10
        dec     $18
        bne     @c036
        longa
        lda     $10
        clc
        adc     #$0010
        sta     $10
        shorta0
        dec     $14
        bne     @c032
        plb
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $c7: animation commands for battle events ]

ExecEventAnimCmd:
@c081:  lda     [$5b]
        asl
        tax
        jsr     (.loword(EventAnimCmd_Tbl),x)
        ldx     $7af6
        rtl

; ------------------------------------------------------------------------------

EventAnimCmd_Tbl:
@c08c:  .addr   EventAnimCmd_00
        .addr   EventAnimCmd_01
        .addr   EventAnimCmd_02
        .addr   EventAnimCmd_03
        .addr   EventAnimCmd_04
        .addr   EventAnimCmd_05
        .addr   EventAnimCmd_06
        .addr   EventAnimCmd_07
        .addr   EventAnimCmd_08
        .addr   EventAnimCmd_09
        .addr   EventAnimCmd_0a
        .addr   EventAnimCmd_0b
        .addr   EventAnimCmd_0c
        .addr   EventAnimCmd_0d
        .addr   EventAnimCmd_0e
        .addr   EventAnimCmd_0f
        .addr   EventAnimCmd_10
        .addr   EventAnimCmd_11

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$11: disable running with l+r ]

EventAnimCmd_11:
@c0b0:  lda     $2f4b       ; disable running with l+r
        ora     #$01
        sta     $2f4b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$10: make actor visible ]

; b1: actor index

EventAnimCmd_10:
@c0b9:  ldy     #1
        lda     [$5b],y
        jsr     _c2c0d2
        tax
        lda     f:BitOrTbl,x            ; bit mask
        ora     $6192                   ; include in the party
        sta     $6192
        ldy     $5b
        iny
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2c0d2:
get_cas_chg:
@c0d2:  sta     $10
        clr_ax
        stz     $12
@c0d8:  lda     $10
        cmp     $2ec6,x     ; actor index
        beq     @c0ed
        inc     $12
        txa
        clc
        adc     #$20
        tax
        cpx     #$0080
        bne     @c0d8
        clr_a
        rts
@c0ed:  lda     $12
        and     #$03
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$0f:  ]

EventAnimCmd_0f:
@c0f2:  lda     #$01
        trb     $2f52
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$0e: enable/disable background shaking ]

; b1: h------s
;     h = horizontal shaking only
;     s = enable screen shaking (battle bg)

EventAnimCmd_0e:
@c0f8:  ldy     #1
        lda     [$5b],y
        beq     @c104
        sta     $6285
        bra     @c10f
@c104:  stz     $6285
        clr_ax
        stx     $64b0       ; clear bg2 scroll position
        stx     $64b2
@c10f:  ldy     $5b
        iny
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$0d: change monster palette 1 ]

; b1: battle event palette index

EventAnimCmd_0d:
@c115:  ldy     #1
@c118:  lda     [$5b],y
        asl5
        tax
        clr_ay
@c122:  lda     f:_c2d499,x   ; battle event palette
        sta     $7f00,y     ; monster palette 1
        inx
        iny
        cpy     #$0020
        bne     @c122
        ldy     $5b
        iny
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$0c: change character graphics index ]

; b1: actor index
; b2: new graphics index

EventAnimCmd_0c:
@c136:  ldy     #1
        lda     [$5b],y
        sta     $12
        clr_ax
        stz     $10
@c141:  lda     $2ec6,x     ; actor index
        cmp     $12
        beq     @c156
        inc     $10
        txa
        clc
        adc     #$20
        tax
        cpx     #$0080
        bne     @c141
        bra     @c16a
@c156:  iny
        lda     [$5b],y
        sta     $2eae,x     ; character graphics index
        lda     $10
        sta     $7b78
        ldx     $7af6
        phx
        jsl     _c12f75
        plx
@c16a:  ldy     $5b
        iny2
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$0b: spc command ]

EventAnimCmd_0b:
@c171:  ldy     #1
        inc     $e9ed       ; disable sound effects
        clr_ax
@c179:  lda     [$5b],y
        sta     $1300,x
        iny
        inx
        cpx     #3
        bne     @c179
        jsl     ExecSound_ext
        stz     $e9ed       ; enable sound effects
        ldy     $5b
        iny3
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$0a: change battle bg ??? ]

EventAnimCmd_0a:
@c194:  ldy     #1
        lda     [$5b],y
        jsl     _c1bac6
        ldy     $5b
        iny
        sty     $5b
        rts

; ------------------------------------------------------------------------------

; character actions for vector directions (arms up)
_c2c1a3:
@c1a3:  .byte   $19,$18,$18,$1a,$1a,$1b,$1b,$19
        .byte   $1a,$18,$18,$19,$19,$1b,$1b,$1a

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$09: update character action based on vector direction (arms up) ]

EventAnimCmd_09:
@c1b3:  jsl     _c1f999     ; calculate angle between points
        pha
        jsr     GetAttackerThreadPtr_near
        lda     $6f87,x
        beq     @c1c2       ; branch if not mirrored
        lda     #$08
@c1c2:  sta     $10
        pla
        lsr5
        clc
        adc     $10
        tax
        lda     f:_c2c1a3,x
        sta     $61c0,y
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$08:  ]

EventAnimCmd_08:
@c1d6:  stz     $11
        stz     $13
        ldy     #$0001
        lda     [$5b],y
        bpl     @c1e3
        dec     $11
@c1e3:  sta     $10
        iny
        lda     [$5b],y
        bpl     @c1ec
        dec     $13
@c1ec:  sta     $12
        longa
        ldx     $7af6
        lda     $6f87,x
        and     #$00ff
@c1f9:  bne     @c215       ; branch if mirrored
        lda     $6f7e,x     ; attacker x position
        lda     $6f82,x     ; target x position
        clc
        adc     $10
        sta     $6f82,x     ; target x position
        lda     $6f80,x     ; attacker y position
        lda     $6f84,x     ; target y position
        clc
        adc     $12
        sta     $6f84,x     ; target y position
        bra     @c22f
@c215:  lda     $10
        eor     #$ffff
        inc
        sta     $10
        lda     $6f82,x     ; target x position
        clc
        adc     $10
        sta     $6f82,x
        lda     $6f84,x
        clc
        adc     $12
        sta     $6f84,x
@c22f:  inc     $5b
        inc     $5b
        shorta0
        rts

; ------------------------------------------------------------------------------

; character actions for vector directions (walking)
_c2c237:
@c237:  .byte   $03,$02,$02,$04,$04,$05,$05,$03
        .byte   $04,$02,$02,$03,$03,$05,$05,$04

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$07: update character action based on vector direction (walking) ]

EventAnimCmd_07:
@c247:  jsl     _c1f999     ; calculate angle between points
        pha
        jsr     GetAttackerThreadPtr_near
        lda     $6f87,x
        beq     @c256
        lda     #$08
@c256:  sta     $10
        pla
        lsr5
        clc
        adc     $10
        tax
        lda     f:_c2c237,x
        sta     $61c0,y     ; character tertiary graphic action
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$06: move character ]

; b1: x position
; b2: y position

EventAnimCmd_06:
@c26a:  ldy     #$0001
        lda     [$5b],y
        sta     $10
        iny
        lda     [$5b],y
        sta     $12
        stz     $11
        stz     $13
        jsr     GetAttackerThreadPtr_near
        longa
        lda     $10
        sta     $61b7,y     ; character x position
        clr_a
        sta     $61c5,y     ; character x offset
        sta     $61d4,y     ; character x offset (animation)
        lda     $12
        sta     $61b9,y     ; character y position
        clr_a
        sta     $61c7,y
        sta     $61d2,y
        inc     $5b
        inc     $5b
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ get pointer to target thread data ]

GetTargetThreadPtr:
@c29f:  ldx     $7af6
        lda     $6a39,x     ; target
        bra     _c2ad

; ------------------------------------------------------------------------------

; [ get pointer to attacker thread data ]

GetAttackerThreadPtr_near:
@c2a7:  ldx     $7af6
        lda     $6a38,x     ; attacker
_c2ad:  asl5
        tay
        sty     $7af8
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$05: set vector target to actor position ]

; b1: actor index

EventAnimCmd_05:
@c2b7:  ldy     #$0001
        lda     [$5b],y
        sta     $10
        clr_ayx
@c2c1:  lda     $2ec6,y     ; actor index
        cmp     $10
        beq     @c2d5       ; branch if it matches
        inx                 ; check next character
        tya
        clc
        adc     #$20
        tay
        cpx     #$0004
        bne     @c2c1
        clr_ax
@c2d5:  txa
        asl5
        tay
        ldx     $7af6
        longa
        lda     $61b7,y     ; character x position
        clc
        adc     $61c5,y     ; character x offset
        clc
        adc     $61d4,y     ; character x offset (animation)
        sta     $6f82,x     ; target x position
        lda     $61b9,y
        clc
        adc     $61c7,y
        clc
        adc     $61d2,y
        sta     $6f84,x     ; target y position
        inc     $5b
@c2ff:  shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$04: restore attacking character position ]

EventAnimCmd_04:
@c303:  ldx     $7af6
        lda     $6a38,x     ; attacker
        asl2
        tay
        longa
        lda     $6236,y
        sta     $6f82,x
        lda     $6238,y
        sta     $6f84,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$02: save attacking character position ]

EventAnimCmd_02:
@c31e:  jsr     GetAttackerThreadPtr_near
        lda     $6a38,x     ; attacker
        asl2
        tax
        longa
        lda     $61b7,y     ; character x position
        sta     $6236,x     ;
        lda     $61b9,y
        sta     $6238,x
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$03: restore attacking character position and reset offsets ]

EventAnimCmd_03:
@c339:  jsr     GetAttackerThreadPtr_near
        lda     $6a38,x     ; attacker
        asl2
        tax
        longa
        lda     $6236,x
        sta     $61b7,y
        clr_a
        sta     $61c5,y     ; character x offset
        sta     $61d4,y
        lda     $6238,x
        sta     $61b9,y
        clr_a
        sta     $61c7,y
        sta     $61d2,y
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$01: reset attacking character position offsets ]

EventAnimCmd_01:
@c362:  jsr     GetAttackerThreadPtr_near
        longa
        lda     $61b7,y     ; character x position
        clc
        adc     $61c5,y     ; character x offset
        clc
        adc     $61d4,y     ; character x offset (animation)
        sta     $61b7,y     ; character x position
        sta     $6f7e,x     ; attacker x position
        clr_a
        sta     $61c5,y     ; character x offset
        sta     $61d4,y     ; character x offset (animation)
        lda     $61b9,y     ; character y position
        clc
        adc     $61c7,y     ; character y offset (animation)
        clc
        adc     $61d2,y     ; character y offset (jumping)
        sta     $61b9,y     ; character y position
        sta     $6f80,x     ; attacker y position
        clr_a
        sta     $61c7,y     ; character y offset (animation)
        sta     $61d2,y     ; character y offset (jumping)
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $c7/$00: change attacking character facing direction ]

; b1: 0 = face left, 1 = face right

EventAnimCmd_00:
@c39b:  ldx     $7af6
        ldy     $5b
        iny
        sty     $5b
        lda     $6a38,x     ; attacker
        tay
        lda     [$5b]
        beq     @c3bf
        lda     $7b10,y     ; facing direction
        bne     @c3d1       ; branch if facing right
        inc
        sta     $7b10,y     ; reverse direction
        sta     $6f87,x
        lda     $6a38,x
        jsr     ToggleCharFlip_near
        bra     @c3d1
@c3bf:  lda     $7b10,y
        beq     @c3d1
        clr_a
        sta     $7b10,y
        sta     $6f87,x
        lda     $6a38,x
        jsr     ToggleCharFlip_near
@c3d1:  ldx     $7af6
        rts

; ------------------------------------------------------------------------------

; [ toggle horizontal flip ]

ToggleCharFlip_near:
@c3d5:  asl5
        tax
        lda     $61be,x     ; toggle horizontal flip
        eor     #$40
        sta     $61be,x
        rts

; ------------------------------------------------------------------------------

; pointers to frame data (+$7e0000)
_c2c3e4:
@c3e4:  .word   $ce3f,$ce93,$cee7,$cf3b,$cf8f,$cfe3,$d037,$d08b
        .word   $d0df,$d133,$d187,$d1db,$d22f,$d283,$d2d7,$d32b
        .word   $d37f,$d3d3,$d427,$d47b,$d4cf,$d523,$d577,$d5cb
        .word   $d61f,$d673,$d6c7,$d71b,$d76f,$d7c3,$d817,$d86b

; ------------------------------------------------------------------------------

; pointers to frame data (+$7e0000)
_c2c424:
@c424:  .word   $d8bf,$d913,$d967,$d9bb,$da0f,$da63,$dab7,$db0b
        .word   $db5f,$dbb3,$dc07,$dc5b,$dcaf,$dd03,$dd57,$ddab
        .word   $ddff,$de53,$dea7,$defb,$df4f,$dfa3,$dff7,$e04b
        .word   $e09f,$e0f3,$e147,$e19b,$e1ef,$e243,$e297,$e2eb

; ------------------------------------------------------------------------------

; vh flip and pointers to monster sprite data pointers
_c2c464:
@c464:  .word   $0000,$c474,$4000,$c480,$8000,$c48c,$c000,$c498

; ------------------------------------------------------------------------------

; pointers to monster sprite data (4 copies, 6 monsters per copy, +$7e0000)
MonsterSpriteDataPtrs:
@c474:  .word   $8259,$829d,$82e1,$8325,$8369,$83ad
        .word   $83f1,$8435,$8479,$84bd,$8501,$8545
        .word   $8589,$85cd,$8611,$8655,$8699,$86dd
        .word   $8721,$8765,$87a9,$87ed,$8831,$8875

; ------------------------------------------------------------------------------

; pointers to monster vram map sprite data (+$c20000)
MonsterSpriteMapPtrs:
@c4a4:  .addr   MonsterSpriteMap_00_Slot1
        .addr   MonsterSpriteMap_00_Slot2
        .addr   MonsterSpriteMap_00_Slot3
        .addr   MonsterSpriteMap_00_Slot4
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused

        .addr   MonsterSpriteMap_01_Slot1
        .addr   MonsterSpriteMap_01_Slot2
        .addr   MonsterSpriteMap_01_Slot3
        .addr   MonsterSpriteMap_01_Slot4
        .addr   MonsterSpriteMap_01_Slot5
        .addr   MonsterSpriteMap_01_Slot6

        .addr   MonsterSpriteMap_02_Slot1
        .addr   MonsterSpriteMap_02_Slot2
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused

        .addr   MonsterSpriteMap_03_Slot1
        .addr   MonsterSpriteMap_03_Slot2
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused

        .addr   MonsterSpriteMap_04_Slot1
        .addr   MonsterSpriteMap_04_Slot2
        .addr   MonsterSpriteMap_04_Slot3
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused

        .addr   MonsterSpriteMap_05_Slot1
        .addr   MonsterSpriteMap_05_Slot2
        .addr   MonsterSpriteMap_05_Slot3
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused

        .addr   MonsterSpriteMap_06_Slot1
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused

        .addr   MonsterSpriteMap_07_Slot1
        .addr   MonsterSpriteMap_07_Slot2
        .addr   MonsterSpriteMap_07_Slot3
        .addr   MonsterSpriteMap_07_Slot4
        .addr   MonsterSpriteMap_07_Slot5
        .addr   MonsterSpriteMap_07_Slot6

        .addr   MonsterSpriteMap_08_Slot1
        .addr   MonsterSpriteMap_08_Slot2
        .addr   MonsterSpriteMap_08_Slot3
        .addr   MonsterSpriteMap_08_Slot4
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused

        .addr   MonsterSpriteMap_09_Slot1
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused
        .addr   MonsterSpriteMapUnused

        .addr   MonsterSpriteMap_0a_Slot1
        .addr   MonsterSpriteMap_0a_Slot2
        .addr   MonsterSpriteMap_0a_Slot3
        .addr   MonsterSpriteMap_0a_Slot4
        .addr   MonsterSpriteMap_0a_Slot5
        .addr   MonsterSpriteMapUnused

        .addr   MonsterSpriteMap_0b_Slot1
        .addr   MonsterSpriteMap_0b_Slot2
        .addr   MonsterSpriteMap_0b_Slot3
        .addr   MonsterSpriteMap_0b_Slot4
        .addr   MonsterSpriteMap_0b_Slot5
        .addr   MonsterSpriteMapUnused

        .addr   MonsterSpriteMap_0c_Slot1
        .addr   MonsterSpriteMap_0c_Slot2
        .addr   MonsterSpriteMap_0c_Slot3
        .addr   MonsterSpriteMap_0c_Slot4
        .addr   MonsterSpriteMap_0c_Slot5
        .addr   MonsterSpriteMap_0c_Slot6

.macro def_monster_sprite_map x_pos, y_pos, width, height
        ; position and size converted to 32x32 sprites
        .local  x32, y32, height32, width32
        x32 = x_pos / 4
        y32 = y_pos / 4
        width32 = width / 4
        height32 = height / 4
        ; loop over 32x32 sprites
        .byte   x_pos*8, y_pos*8
        .repeat height32, _y
        .repeat width32, _x
        .byte   x32+_x+(y32+_y)*4
        .endrep
        .endrep
        ; terminator
        .byte   $ff
.endmac

; sprite data for unused monster in vram map
MonsterSpriteMapUnused:
@c540:  def_monster_sprite_map 0,0,0,0

; sprite data for vram map $00
MonsterSpriteMap_00_Slot1:
@c543:  def_monster_sprite_map 0,0,8,8
MonsterSpriteMap_00_Slot2:
@c54a:  def_monster_sprite_map 8,0,8,8
MonsterSpriteMap_00_Slot3:
@c551:  def_monster_sprite_map 0,8,8,8
MonsterSpriteMap_00_Slot4:
@c558:  def_monster_sprite_map 8,8,8,8

; sprite data for vram map $01
MonsterSpriteMap_01_Slot1:
@c55f:  def_monster_sprite_map 0,0,8,8
MonsterSpriteMap_01_Slot2:
@c566:  def_monster_sprite_map 8,0,8,8
MonsterSpriteMap_01_Slot3:
@c56d:  def_monster_sprite_map 0,8,4,4
MonsterSpriteMap_01_Slot4:
@c571:  def_monster_sprite_map 4,8,4,4
MonsterSpriteMap_01_Slot5:
@c575:  def_monster_sprite_map 8,8,4,4
MonsterSpriteMap_01_Slot6:
@c579:  def_monster_sprite_map 12,8,4,4

; sprite data for vram map $02
MonsterSpriteMap_02_Slot1:
@c57d:  def_monster_sprite_map 0,0,12,8
MonsterSpriteMap_02_Slot2:
@c586:  def_monster_sprite_map 0,8,12,8

; sprite data for vram map $03
MonsterSpriteMap_03_Slot1:
@c58f:  def_monster_sprite_map 0,0,8,16
MonsterSpriteMap_03_Slot2:
@c59a:  def_monster_sprite_map 8,0,8,16

; sprite data for vram map $04
MonsterSpriteMap_04_Slot1:
@c5a5:  def_monster_sprite_map 0,0,12,8
MonsterSpriteMap_04_Slot2:
@c5ae:  def_monster_sprite_map 0,8,8,8
MonsterSpriteMap_04_Slot3:
@c5b5:  def_monster_sprite_map 8,8,8,8

; sprite data for vram map $05
MonsterSpriteMap_05_Slot1:
@c5bc:  def_monster_sprite_map 0,0,8,16
MonsterSpriteMap_05_Slot2:
@c5c7:  def_monster_sprite_map 8,0,8,8
MonsterSpriteMap_05_Slot3:
@c5ce:  def_monster_sprite_map 8,8,8,8

; sprite data for vram map $06
MonsterSpriteMap_06_Slot1:
@c5d5:  def_monster_sprite_map 0,0,16,16

; sprite data for vram map $07
MonsterSpriteMap_07_Slot1:
@c5e8:  def_monster_sprite_map 0,0,12,12
MonsterSpriteMap_07_Slot2:
@c5f4:  def_monster_sprite_map 12,0,4,12
MonsterSpriteMap_07_Slot3:
@c5fa:  def_monster_sprite_map 0,12,4,4
MonsterSpriteMap_07_Slot4:
@c5fe:  def_monster_sprite_map 4,12,4,4
MonsterSpriteMap_07_Slot5:
@c602:  def_monster_sprite_map 8,12,4,4
MonsterSpriteMap_07_Slot6:
@c606:  def_monster_sprite_map 12,12,4,4

; sprite data for vram map $08
MonsterSpriteMap_08_Slot1:
@c60a:  def_monster_sprite_map 0,0,8,8
MonsterSpriteMap_08_Slot2:
@c611:  def_monster_sprite_map 0,8,8,8
MonsterSpriteMap_08_Slot3:
@c618:  def_monster_sprite_map 8,0,4,8
MonsterSpriteMap_08_Slot4:
@c61d:  def_monster_sprite_map 8,8,4,8

; sprite data for vram map $09
MonsterSpriteMap_09_Slot1:
@c622:  def_monster_sprite_map 0,0,12,16  ; height is 12 in vram map

; sprite data for vram map $0a
MonsterSpriteMap_0a_Slot1:
@c631:  def_monster_sprite_map 0,0,8,12
MonsterSpriteMap_0a_Slot2:
@c63a:  def_monster_sprite_map 8,0,4,8
MonsterSpriteMap_0a_Slot3:
@c63f:  def_monster_sprite_map 8,8,4,8
MonsterSpriteMap_0a_Slot4:
@c644:  def_monster_sprite_map 0,12,4,4
MonsterSpriteMap_0a_Slot5:
@c648:  def_monster_sprite_map 4,12,4,4

; sprite data for vram map $0b
MonsterSpriteMap_0b_Slot1:
@c64c:  def_monster_sprite_map 0,0,4,8
MonsterSpriteMap_0b_Slot2:
@c651:  def_monster_sprite_map 4,0,4,8
MonsterSpriteMap_0b_Slot3:
@c656:  def_monster_sprite_map 8,0,4,8
MonsterSpriteMap_0b_Slot4:
@c65b:  def_monster_sprite_map 8,8,4,8
MonsterSpriteMap_0b_Slot5:
@c660:  def_monster_sprite_map 0,8,8,8

; sprite data for vram map $0c
MonsterSpriteMap_0c_Slot1:
@c667:  def_monster_sprite_map 0,0,8,8
MonsterSpriteMap_0c_Slot2:
@c66e:  def_monster_sprite_map 8,0,8,8
MonsterSpriteMap_0c_Slot3:
@c675:  def_monster_sprite_map 0,8,4,8
MonsterSpriteMap_0c_Slot4:
@c67a:  def_monster_sprite_map 4,8,4,8
MonsterSpriteMap_0c_Slot5:
@c67f:  def_monster_sprite_map 8,8,4,8
MonsterSpriteMap_0c_Slot6:
@c684:  def_monster_sprite_map 12,8,4,8

; ------------------------------------------------------------------------------

; battle status/cursor/text palette for sprites
; each of these gets copied to the last 4 colors after the 12-color character palettes
; this effectively creates an extra 16-color palette
_c2c689:
@c689:  .word   $1463,$7ffe,$6314,$4e6f
        .word   $1463,$4bf6,$2bff,$26cd
        .word   $1463,$527b,$4615,$41f0
        .word   $43fd,$3ff1,$03e0,$02e0

; ------------------------------------------------------------------------------

; graphic frames for each character graphical action (4 frames each)
_c2c6a9:
@c6a9:  .byte   $ff,$ff,$ff,$ff
        .byte   $00,$00,$00,$00
        .byte   $01,$02,$03,$02
        .byte   $34,$35,$36,$35
        .byte   $04,$05,$06,$05
        .byte   $0e,$0f,$10,$0f
        .byte   $11,$11,$11,$11
        .byte   $12,$04,$12,$04
        .byte   $13,$06,$13,$06
        .byte   $08,$09,$08,$09
        .byte   $14,$14,$14,$14
        .byte   $15,$15,$15,$15
        .byte   $16,$16,$16,$16
        .byte   $0a,$0a,$0a,$0a
        .byte   $02,$0b,$02,$0b
        .byte   $35,$3d,$35,$3d
        .byte   $05,$0d,$05,$0d
        .byte   $32,$3c,$32,$3c
        .byte   $02,$0c,$02,$0c
        .byte   $02,$02,$17,$17
        .byte   $35,$35,$37,$37
        .byte   $05,$05,$07,$07
        .byte   $0f,$0f,$18,$18
        .byte   $19,$19,$19,$19
        .byte   $17,$17,$17,$17
        .byte   $37,$37,$37,$37
        .byte   $07,$07,$07,$07
        .byte   $18,$18,$18,$18
        .byte   $00,$00,$00,$00
        .byte   $00,$00,$00,$00
        .byte   $00,$00,$00,$00
        .byte   $00,$00,$00,$00
        .byte   $1e,$1f,$1e,$1f
        .byte   $4e,$4f,$4e,$4f
        .byte   $1d,$02,$4d,$02
        .byte   $1a,$1b,$1a,$1b
        .byte   $00,$00,$00,$00
        .byte   $17,$37,$18,$07
        .byte   $4a,$4a,$07,$4b

; ------------------------------------------------------------------------------

; graphic action tile offsets (32 items, 6 values per action)
_c2c745:
@c745:  .word   $0ae0,$0b00,$0b40,$0b60,$0b20,$ffff,$0b80,$ffff
        .word   $ffff,$ffff,$0000,$0020,$0040,$0060,$0080,$00a0
        .word   $ffff,$ffff,$0000,$0020,$00c0,$00e0,$0100,$0120
        .word   $ffff,$ffff,$0000,$0020,$0140,$0160,$00a0,$0080
        .word   $ffff,$ffff,$0300,$0320,$0340,$0360,$0380,$03a0
        .word   $ffff,$ffff,$03c0,$03e0,$0400,$0420,$0440,$0460
        .word   $ffff,$ffff,$0300,$0320,$0480,$04a0,$04c0,$04e0
        .word   $ffff,$ffff,$03c0,$0660,$0680,$06a0,$06c0,$06e0
        .word   $ffff,$ffff,$0940,$0960,$0980,$09a0,$09c0,$09e0
        .word   $ffff,$ffff,$0940,$0960,$0a00,$09a0,$09c0,$09e0
        .word   $ffff,$ffff,$0a20,$0a40,$0a60,$0a80,$0aa0,$0ac0
        .word   $ffff,$ffff,$0000,$0020,$0ba0,$0bc0,$0100,$0120
        .word   $ffff,$ffff,$0000,$0020,$00c0,$0be0,$0100,$0120
        .word   $ffff,$ffff,$12c0,$03e0,$12e0,$0420,$0440,$0460
        .word   $ffff,$ffff,$0180,$01a0,$01c0,$01e0,$0200,$0220
        .word   $ffff,$ffff,$0180,$01a0,$0240,$0260,$0280,$02a0
        .word   $ffff,$ffff,$0180,$01a0,$02c0,$02e0,$0220,$0200
        .word   $ffff,$ffff,$03c0,$03e0,$0500,$0520,$0540,$0560
        .word   $ffff,$ffff,$0300,$0320,$0580,$0360,$05a0,$03a0
        .word   $ffff,$ffff,$0300,$05c0,$05e0,$0600,$0620,$0640
        .word   $ffff,$ffff,$0700,$0720,$0740,$0760,$0780,$07a0
        .word   $ffff,$ffff,$07c0,$07e0,$0800,$0820,$0840,$0860
        .word   $ffff,$ffff,$0880,$08a0,$08c0,$08e0,$0900,$0920
        .word   $ffff,$ffff,$0d40,$0d60,$0d80,$0da0,$0dc0,$0de0
        .word   $ffff,$ffff,$0e00,$0e20,$0e40,$0e60,$0e80,$0ea0
        .word   $ffff,$ffff,$0620,$0640,$0660,$0680,$06a0,$06c0
        .word   $ffff,$ffff,$0c00,$0c20,$0c40,$0c60,$0c80,$0ca0
        .word   $ffff,$ffff,$0cc0,$0ce0,$0d00,$0d20,$0c80,$0ca0
        .word   $ffff,$ffff,$0f80,$0fa0,$0fc0,$0fe0,$1000,$1020
        .word   $ffff,$ffff,$1240,$1260,$1280,$12a0,$0100,$0120
        .word   $ffff,$ffff,$1460,$1480,$1300,$1320,$1340,$1360
        .word   $ffff,$ffff,$1460,$1480,$1380,$1320,$1340,$1360

; ------------------------------------------------------------------------------

; inverse sin/cos tables, 0 to 90 degrees (32 items, 32 bytes each)
_c2c945:
@c945:  .byte   $40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte   $40,$20,$12,$0d,$0a,$08,$06,$06,$05,$04,$04,$04,$03,$03,$03,$02
        .byte   $02,$02,$02,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
        .byte   $40,$2d,$20,$17,$12,$0f,$0d,$0b,$0a,$09,$08,$07,$06,$06,$06,$05
        .byte   $05,$04,$04,$04,$04,$04,$04,$03,$03,$03,$03,$03,$03,$02,$02,$02
        .byte   $40,$32,$28,$20,$1a,$15,$12,$10,$0e,$0d,$0b,$0b,$0a,$09,$09,$08
        .byte   $07,$07,$06,$06,$06,$06,$05,$05,$05,$04,$04,$04,$04,$04,$04,$04
        .byte   $40,$35,$2d,$26,$20,$1b,$17,$15,$12,$10,$0f,$0e,$0d,$0c,$0b,$0a
        .byte   $0a,$09,$09,$08,$08,$07,$07,$06,$06,$06,$06,$06,$06,$05,$05,$05
        .byte   $40,$37,$30,$2a,$24,$20,$1c,$19,$17,$15,$12,$11,$10,$0f,$0e,$0d
        .byte   $0c,$0b,$0b,$0a,$0a,$09,$09,$09,$08,$08,$07,$07,$07,$06,$06,$06
        .byte   $40,$39,$32,$2d,$28,$24,$20,$1c,$1a,$17,$15,$14,$12,$11,$10,$0f
        .byte   $0e,$0e,$0d,$0c,$0b,$0b,$0b,$0a,$0a,$09,$09,$09,$09,$08,$08,$07
        .byte   $40,$3a,$35,$2f,$2b,$26,$23,$20,$1d,$1a,$18,$17,$15,$14,$12,$12
        .byte   $10,$10,$0f,$0e,$0e,$0d,$0c,$0b,$0b,$0b,$0b,$0a,$0a,$09,$09,$09
        .byte   $40,$3a,$35,$31,$2d,$29,$26,$22,$20,$1d,$1b,$1a,$17,$16,$15,$14
        .byte   $12,$12,$10,$10,$0f,$0e,$0e,$0e,$0d,$0c,$0c,$0b,$0b,$0b,$0a,$0a
        .byte   $40,$3b,$37,$32,$2f,$2b,$28,$25,$22,$20,$1d,$1c,$1a,$18,$17,$15
        .byte   $15,$13,$12,$12,$11,$10,$10,$0f,$0e,$0e,$0e,$0d,$0c,$0c,$0b,$0b
        .byte   $40,$3c,$37,$34,$30,$2d,$2a,$27,$24,$22,$20,$1e,$1c,$1a,$19,$17
        .byte   $17,$15,$15,$13,$12,$12,$11,$10,$10,$0f,$0f,$0e,$0e,$0e,$0d,$0c
        .byte   $40,$3c,$38,$35,$32,$2e,$2b,$29,$26,$24,$21,$20,$1e,$1c,$1b,$1a
        .byte   $18,$17,$16,$15,$14,$13,$12,$12,$11,$10,$10,$10,$0f,$0e,$0e,$0e
        .byte   $40,$3c,$39,$35,$32,$30,$2d,$2a,$28,$26,$24,$21,$20,$1e,$1c,$1b
        .byte   $1a,$19,$17,$17,$15,$15,$14,$13,$12,$12,$11,$10,$10,$10,$0f,$0f
        .byte   $40,$3c,$3a,$37,$33,$30,$2e,$2b,$29,$27,$25,$23,$21,$20,$1e,$1c
        .byte   $1c,$1a,$19,$18,$17,$16,$15,$15,$14,$13,$12,$12,$11,$11,$10,$10
        .byte   $40,$3c,$3a,$37,$35,$32,$2f,$2d,$2b,$29,$26,$24,$23,$21,$20,$1f
        .byte   $1d,$1c,$1a,$1a,$18,$17,$17,$16,$15,$15,$14,$13,$12,$12,$12,$11
        .byte   $40,$3d,$3a,$37,$35,$32,$30,$2e,$2b,$2a,$28,$26,$24,$23,$21,$20
        .byte   $1f,$1d,$1c,$1b,$1a,$19,$18,$17,$17,$15,$15,$15,$14,$13,$12,$12
        .byte   $40,$3d,$3a,$38,$35,$33,$31,$2f,$2d,$2b,$29,$27,$26,$24,$22,$21
        .byte   $20,$1f,$1d,$1c,$1b,$1a,$1a,$18,$17,$17,$16,$15,$15,$14,$14,$13
        .byte   $40,$3d,$3b,$38,$36,$34,$32,$30,$2e,$2c,$2a,$29,$26,$25,$24,$22
        .byte   $21,$20,$1f,$1d,$1c,$1b,$1a,$1a,$19,$18,$17,$17,$16,$15,$15,$14
        .byte   $40,$3d,$3b,$39,$37,$35,$32,$30,$2f,$2d,$2b,$29,$28,$26,$25,$24
        .byte   $22,$21,$20,$1f,$1d,$1c,$1c,$1b,$1a,$19,$18,$17,$17,$16,$15,$15
        .byte   $40,$3d,$3b,$3a,$37,$35,$33,$31,$30,$2e,$2c,$2a,$29,$27,$26,$24
        .byte   $23,$22,$21,$20,$1f,$1e,$1c,$1c,$1b,$1a,$1a,$19,$18,$17,$17,$16
        .byte   $40,$3e,$3c,$3a,$37,$35,$34,$32,$30,$2e,$2d,$2b,$2a,$28,$27,$26
        .byte   $24,$23,$22,$21,$20,$1f,$1e,$1d,$1c,$1b,$1a,$1a,$19,$18,$17,$17
        .byte   $40,$3e,$3c,$3a,$38,$36,$35,$32,$31,$2f,$2e,$2c,$2b,$29,$28,$26
        .byte   $25,$24,$23,$21,$21,$20,$1f,$1e,$1d,$1c,$1b,$1a,$1a,$19,$18,$18
        .byte   $40,$3e,$3c,$3a,$38,$37,$35,$33,$32,$30,$2e,$2d,$2b,$2a,$29,$27
        .byte   $26,$25,$24,$23,$21,$21,$20,$1f,$1e,$1d,$1c,$1c,$1b,$1a,$1a,$19
        .byte   $40,$3e,$3c,$3a,$39,$37,$35,$34,$32,$30,$2f,$2e,$2c,$2b,$29,$28
        .byte   $27,$26,$24,$24,$22,$21,$21,$20,$1f,$1e,$1d,$1c,$1c,$1b,$1a,$1a
        .byte   $40,$3e,$3c,$3a,$39,$37,$35,$34,$32,$31,$30,$2e,$2d,$2b,$2a,$29
        .byte   $28,$26,$26,$24,$24,$22,$21,$21,$20,$1f,$1e,$1d,$1c,$1c,$1b,$1a
        .byte   $40,$3e,$3c,$3b,$39,$37,$36,$35,$33,$32,$30,$2f,$2e,$2c,$2b,$2a
        .byte   $29,$27,$26,$25,$24,$23,$22,$21,$21,$20,$1f,$1e,$1d,$1c,$1c,$1b
        .byte   $40,$3e,$3c,$3b,$3a,$38,$37,$35,$33,$32,$30,$30,$2e,$2d,$2b,$2b
        .byte   $29,$28,$27,$26,$25,$24,$23,$22,$21,$21,$20,$1f,$1e,$1d,$1c,$1c
        .byte   $40,$3e,$3c,$3b,$3a,$38,$37,$35,$34,$32,$31,$30,$2f,$2e,$2c,$2b
        .byte   $2a,$29,$28,$26,$26,$25,$24,$23,$22,$21,$21,$20,$1f,$1e,$1d,$1d
        .byte   $40,$3e,$3c,$3b,$3a,$38,$37,$35,$35,$33,$32,$30,$2f,$2e,$2d,$2b
        .byte   $2b,$29,$29,$27,$26,$26,$24,$24,$23,$22,$21,$21,$20,$1f,$1f,$1e
        .byte   $40,$3f,$3d,$3c,$3a,$39,$37,$36,$35,$33,$32,$31,$30,$2e,$2e,$2c
        .byte   $2b,$2a,$29,$28,$27,$26,$25,$24,$24,$23,$22,$21,$21,$20,$1f,$1f
        .byte   $40,$3f,$3d,$3c,$3a,$39,$37,$36,$35,$34,$32,$31,$30,$2f,$2e,$2d
        .byte   $2b,$2b,$2a,$29,$28,$27,$26,$25,$24,$24,$23,$22,$21,$20,$20,$1f
        .byte   $40,$3f,$3d,$3c,$3a,$39,$38,$37,$35,$34,$33,$32,$30,$30,$2e,$2e
        .byte   $2c,$2b,$2a,$29,$29,$27,$26,$26,$25,$24,$24,$22,$21,$21,$20,$20

; ------------------------------------------------------------------------------

; compressed ($400 bytes decompressed)
_c2cd45:
@cd45:  .byte   $e6,$00,$bb,$00,$08,$df,$e7,$03,$07,$07,$df,$cf,$10,$77,$02,$05
        .byte   $06,$00,$c8,$18,$01,$04,$20,$08,$8e,$00,$b0,$20,$01,$03,$40,$00
        .byte   $42,$10,$01,$90,$28,$cf,$01,$02,$04,$05,$62,$28,$01,$80,$30,$01
        .byte   $11,$02,$60,$00,$83,$30,$00,$70,$38,$9f,$08,$81,$10,$a6,$30,$46
        .byte   $01,$50,$40,$00,$9f,$18,$c5,$50,$00,$40,$48,$df,$10,$84,$e3,$20
        .byte   $e9,$80,$50,$df,$08,$c1,$28,$e8,$50,$00,$18,$58,$10,$df,$00,$01
        .byte   $41,$2c,$59,$00,$00,$60,$3f,$11,$43,$41,$4d,$61,$39,$68,$5f,$29
        .byte   $66,$a1,$70,$00,$01,$80,$71,$e9,$48,$49,$78,$9f,$51,$ab,$79,$80
        .byte   $9f,$21,$c5,$a9,$88,$9f,$11,$88,$82,$19,$c8,$49,$a6,$28,$90,$ff
        .byte   $29,$c5,$29,$0e,$62,$98,$88,$9f,$01,$e1,$31,$2a,$82,$a0,$3f,$1a
        .byte   $44,$92,$42,$08,$a8,$64,$5f,$82,$71,$4a,$b0,$5f,$3a,$88,$8a,$06
        .byte   $b8,$5f,$22,$4c,$44,$2a,$8c,$6a,$c0,$00,$9f,$92,$0e,$32,$c8,$df
        .byte   $6a,$92,$ee,$62,$d0,$df,$2a,$06,$a3,$d8,$1f,$b3,$27,$19,$e0,$44
        .byte   $1f,$53,$4b,$7b,$e8,$df,$12,$23,$5b,$ee,$4a,$f0,$7f,$5b,$02,$4b
        .byte   $73,$f8,$9f,$8b,$50,$43

; ------------------------------------------------------------------------------

; palette numbers for each character
CharPalTbl:
@ce2b:  .byte   $02,$01,$04,$04,$00,$00,$00,$03,$03,$04,$05,$03,$03,$05,$01,$00
        .byte   $00,$03,$06,$01,$00,$03,$03,$00

; ------------------------------------------------------------------------------

; pointers to character sprite graphics
CharGfxPtrs:
@ce43:  make_ptr_tbl_far MapSpriteGfx, 23, 0
        .faraddr MapSpriteGfx_000e

; ------------------------------------------------------------------------------

; pointers to animation thread data (characters, monsters, extra, +$7e64de)
_c2ce8b:
get_main_work_poi:
@ce8b:  .word   $0000,$0080,$0100,$0180

_c2ce93:
@ce93:  .word   $0200,$0280,$0300,$0380,$0400,$0480
        .word   $0500,$0580

; ------------------------------------------------------------------------------

; character sprite data (top/bottom sprite, then left/right sprite for dead characters)
CharSpriteData:
@cea3:  .byte   $00,$f8,$00,$00
        .byte   $00,$08,$02,$00
        .byte   $fc,$08,$00,$00
        .byte   $0c,$08,$02,$00

; character sprite data, h flip
@ceb3:  .byte   $00,$f8,$00,$40
        .byte   $00,$08,$02,$40
        .byte   $04,$08,$00,$40
        .byte   $f4,$08,$02,$40

; character sprite data, v flip
@cec3:  .byte   $00,$00,$02,$80
        .byte   $00,$10,$00,$80
        .byte   $fc,$08,$00,$80
        .byte   $0c,$08,$02,$80

; character sprite data, h & v flip
@ced3:  .byte   $00,$00,$02,$c0
        .byte   $00,$10,$00,$c0
        .byte   $04,$08,$00,$c0
        .byte   $f4,$08,$02,$c0

; ------------------------------------------------------------------------------

; Character x positions lie along a diagonal line from an imaginary point
; $68 pixels above top center point of the screen. The angle convention is
;   $0080 = 45 degrees to the left
;   $0100 = vertical
;   $0180 = 45 degrees to the right

; character back row xy angle offsets (normal, back, pincer, side)
CharRowOffsetTbl:
@cee3:  .word   $000c,$000c,$000c,$000c
        .word   $fff4,$fff4,$fff4,$fff4
        .word   $0000,$0000,$0000,$0000
        .word   $000c,$000c,$fff4,$fff4

; battle type character y-offsets (normal, back, pincer, side, magitek train bg)
CharYOffsetTbl:
@cf03:  .byte   $44,$56,$68,$7a
        .byte   $44,$56,$68,$7a
        .byte   $44,$56,$68,$7a
        .byte   $4e,$7a,$4e,$7a
        .byte   $50,$5e,$6c,$7a

; battle type character xy angles (normal, back, pincer, side)
CharXAngleTbl:
@cf17:  .word   $0170,$0170,$0170,$0170
        .word   $0090,$0090,$0090,$0090
        .word   $0100,$0100,$0100,$0100
        .word   $0170,$0170,$0090,$0090

; ------------------------------------------------------------------------------

_c2cf37:
@cf37:  .word   $30c0,$31c0,$32c0,$33c0,$34c0,$35c0,$36c0,$37c0
        .word   $38c0,$39c0,$3ac0,$3bc0,$3cc0,$3dc0,$3ec0,$3fc0

; ------------------------------------------------------------------------------

; character sprite graphics offsets
_c2cf57:
@cf57:  .byte   $00,$04,$08,$0c

; pointers to character graphics data (+$7e2eae)
_c2cf5b:
@cf5b:  .byte   $00,$20,$40,$60

; ------------------------------------------------------------------------------

; pointers to magitek armor graphics (4 frames, then unknown japanese text)
MagitekGfxPtrs:
@cf5f:  .dword  VehicleGfx+$1500
        .dword  VehicleGfx+$1800
        .dword  VehicleGfx+$1900
        .dword  VehicleGfx+$1c00
        .dword  VehicleGfx+$1d00

; magitek animation data (4 items, 4 bytes each)
_c2cf73:
@cf73:  .byte   $00,$00,$00,$00
        .byte   $00,$01,$00,$02
        .byte   $03,$03,$03,$03
        .byte   $04,$04,$04,$04

; (4 items, 4 bytes each)
_c2cf83:
@cf83:  .byte   $f7,$fc,$0c,$01
        .byte   $f7,$fc,$4c,$01
        .byte   $f7,$fc,$8c,$01
        .byte   $f7,$fc,$cc,$01

; ------------------------------------------------------------------------------

; y offsets for bouncing damage numerals
DmgNumBounceTbl:
@cf93:  .byte   $03,$06,$08,$0a,$0b,$0d,$0e,$0f,$0f,$10,$10,$10,$10,$10,$0f,$0f
        .byte   $0e,$0d,$0b,$0a,$08,$06,$03,$00,$03,$04,$05,$06,$07,$07,$08,$08
        .byte   $07,$07,$06,$05,$04,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte   $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte   $00

; ------------------------------------------------------------------------------

; magitek color palette (12 colors)
MagitekPal:
@cfd4:  .word   $00bf,$0c63,$196c,$2e10,$42f7,$110e,$2ebc,$4b9f
        .word   $41ad,$6739,$7fff,$2192

; petrify status color palette (11 colors used)
PetrifyPal:
@cfec:  .word   $0842,$6b5a,$18c6,$4210,$294a,$6b5a,$4e73,$6318
        .word   $3def,$4e73,$294a,$0000

; frozen status color palette (11 colors)
FrozenPal:
@d004:  .word   $44c6,$7fff,$3c60,$7ef7,$7dad,$7fff,$7f18,$7e52
        .word   $7d8c,$7e52,$7d29

; ------------------------------------------------------------------------------

; pointers to monster vram maps
MonsterVRAMMapPtrs:
@d01a:  make_ptr_tbl_abs MonsterVRAMMap, 13

.macro def_monster_vram_map x_pos, y_pos, width, height
        .word   x_pos*$20+y_pos*$200
        .byte   width, height
.endmac

; monster vram map $00 (vram destination, width, height)
MonsterVRAMMap_0000:
@d034:  def_monster_vram_map 0,0,8,8
        def_monster_vram_map 8,0,8,8
        def_monster_vram_map 0,8,8,8
        def_monster_vram_map 8,8,8,8

; monster vram map $01
MonsterVRAMMap_0001:
@d044:  def_monster_vram_map 0,0,8,8
        def_monster_vram_map 8,0,8,8
        def_monster_vram_map 0,8,4,4
        def_monster_vram_map 4,8,4,4
        def_monster_vram_map 8,8,4,4
        def_monster_vram_map 12,8,4,4

; monster vram map $02
MonsterVRAMMap_0002:
@d05c:  def_monster_vram_map 0,0,12,8
        def_monster_vram_map 0,8,12,8

; monster vram map $03
MonsterVRAMMap_0003:
@d064:  def_monster_vram_map 0,0,8,16
        def_monster_vram_map 8,0,8,16

; monster vram map $04
MonsterVRAMMap_0004:
@d06c:  def_monster_vram_map 0,0,12,8
        def_monster_vram_map 0,8,8,8
        def_monster_vram_map 8,8,8,8

; monster vram map $05
MonsterVRAMMap_0005:
@d078:  def_monster_vram_map 0,0,8,16
        def_monster_vram_map 8,0,8,8
        def_monster_vram_map 8,8,8,8

; monster vram map $06
MonsterVRAMMap_0006:
@d084:  def_monster_vram_map 0,0,16,16

; monster vram map $07
MonsterVRAMMap_0007:
@d088:  def_monster_vram_map 0,0,12,12
        def_monster_vram_map 12,0,4,12
        def_monster_vram_map 0,12,4,4
        def_monster_vram_map 4,12,4,4
        def_monster_vram_map 8,12,4,4
        def_monster_vram_map 12,12,4,4

; monster vram map $08
MonsterVRAMMap_0008:
@d0a0:  def_monster_vram_map 0,0,8,8
        def_monster_vram_map 0,8,8,8
        def_monster_vram_map 8,0,4,8
        def_monster_vram_map 8,8,4,8

; monster vram map $09
MonsterVRAMMap_0009:
@d0b0:  def_monster_vram_map 0,0,12,12  ; height is 16 in sprite map

; monster vram map $0a
MonsterVRAMMap_000a:
@d0b4:  def_monster_vram_map 0,0,8,12
        def_monster_vram_map 8,0,4,8
        def_monster_vram_map 8,8,4,8
        def_monster_vram_map 0,12,4,4
        def_monster_vram_map 4,12,4,4

; monster vram map $0b
MonsterVRAMMap_000b:
@d0c8:  def_monster_vram_map 0,0,4,8
        def_monster_vram_map 4,0,4,8
        def_monster_vram_map 8,0,4,8
        def_monster_vram_map 8,8,4,8
        def_monster_vram_map 0,8,8,8

; monster vram map $0c
MonsterVRAMMap_000c:
@d0dc:  def_monster_vram_map 0,0,8,8
        def_monster_vram_map 8,0,8,8
        def_monster_vram_map 0,8,4,8
        def_monster_vram_map 4,8,4,8
        def_monster_vram_map 8,8,4,8
        def_monster_vram_map 12,8,4,8

; ------------------------------------------------------------------------------

; hdma #6 table, normal (+++$2109)
_c2d0f4:
@d0f4:  .byte   $64
        .word   $897b
        .byte   $33
        .word   $897b
        .byte   $49
        .word   $897f
        .byte   $00

; hdma #7 table (+++$212a)
_c2d0fe:
@d0fe:  .byte   $04
        .word   $8987
        .byte   $60
        .word   $898b
        .byte   $33
        .word   $898b
        .byte   $44
        .word   $898f
        .byte   $05
        .word   $8987
        .byte   $00

; hdma #6 table, slot (+++$2109)
_c2d10e:
@d10e:  .byte   $64
        .word   $897b
        .byte   $33
        .word   $897b
        .byte   $0c
        .word   $897f
        .byte   $30
        .word   $8983
        .byte   $0d
        .word   $897f
        .byte   $00

; hdma #3 table, slot (+++$2105)
_c2d11e:
@d11e:  .byte   $64
        .word   $896f
        .byte   $33
        .word   $896f
        .byte   $0c
        .word   $8973
        .byte   $30
        .word   $8977
        .byte   $0d
        .word   $8973
        .byte   $00

; hdma #3 table, normal (+++$2105)
_c2d12e:
@d12e:  .byte   $64
        .word   $896f
        .byte   $33
        .word   $896f
        .byte   $49
        .word   $8973
        .byte   $00

; hdma #4 table (+++$212f)
_c2d138:
@d138:  .byte   $f0
        .word   $8993
        .byte   $f0
        .word   $8b53
        .byte   $00

; hdma #5 table (+++$2126)
_c2d13f:
@d13f:  .byte   $cc
        .word   $9f1f
        .byte   $cc
        .word   $a04f
        .byte   $c8
        .word   $9c7f
        .byte   $00

; hdma #5 table (+++$2126)
_c2d149:
@d149:  .byte   $f0
        .word   $ea32
        .byte   $f0
        .word   $eb12
        .byte   $00

; ------------------------------------------------------------------------------

; pointers to bg scroll hdma tables (hdma #0, #1, and #2)
_c2d150:
@d150:  .addr   _c2d1bd,_c2d1c4,_c2d1cb,_c2d1f2,_c2d225,_c2d24b,_c2d1d2,_c2d238
        .addr   _c2d1e5,_c2d180,_c2d212,_c2d1ff,_c2d1bd,_c2d1c4,_c2d258,_c2d1f2
        .addr   _c2d225,_c2d281,_c2d1d2,_c2d268,_c2d1e5,_c2d180,_c2d212,_c2d1ff

; ------------------------------------------------------------------------------

; $09/$15: hdma #0 table, 19 values, change every 8 scanlines (+$210d)
_c2d180:
@d180:  .byte   $08
        .word   $43f5
        .byte   $08
        .word   $43f9
        .byte   $08
        .word   $43fd
        .byte   $08
        .word   $4401
        .byte   $08
        .word   $4405
        .byte   $08
        .word   $4409
        .byte   $08
        .word   $440d
        .byte   $08
        .word   $4411
        .byte   $08
        .word   $4415
        .byte   $08
        .word   $4419
        .byte   $08
        .word   $441d
        .byte   $08
        .word   $4421
        .byte   $08
        .word   $4425
        .byte   $08
        .word   $4429
        .byte   $08
        .word   $442d
        .byte   $08
        .word   $4431
        .byte   $08
        .word   $4435
        .byte   $08
        .word   $4439
        .byte   $07
        .word   $443d
        .byte   $c9
        .word   $4651
        .byte   $00

; $00/$0c: hdma #0 table, 224 values (+$210d)
_c2d1bd:
@d1bd:  .byte   $f0
        .word   $43f5
        .byte   $f0
        .word   $45b5
        .byte   $00

; $01/$0d: hdma #1 table, 224 values (+$210f)
_c2d1c4:
@d1c4:  .byte   $f0
        .word   $4775
        .byte   $f0
        .word   $4935
        .byte   $00

; $02: hdma #2 table, 224 values (+$2111)
_c2d1cb:
@d1cb:  .byte   $f0
        .word   $4af5
        .byte   $f0
        .word   $4cb5
        .byte   $00

; $06/$12: hdma #0 table, 32 values (+$210d)
_c2d1d2:
@d1d2:  .byte   $a0
        .word   $43f5
        .byte   $a0
        .word   $43f5
        .byte   $a0
        .word   $43f5
        .byte   $a0
        .word   $43f5
        .byte   $97
        .word   $43f5
        .byte   $c9
        .word   $4651
        .byte   $00

; $08/$14: hdma #0 table, 64 values (+$210d)
_c2d1e5:
@d1e5:  .byte   $c0
        .word   $43f5
        .byte   $c0
        .word   $43f5
        .byte   $97
        .word   $43f5
        .byte   $c9
        .word   $4651
        .byte   $00

; $03/$0f: hdma #0 table, single value (+$210d)
_c2d1f2:
@d1f2:  .byte   $40
        .word   $43f5
        .byte   $40
        .word   $43f5
        .byte   $17
        .word   $43f5
        .byte   $c9
        .word   $4651
        .byte   $00

; $0b/$17: hdma #1 table (+$210f)
_c2d1ff:
@d1ff:  .byte   $a0
        .word   $4775
        .byte   $a0
        .word   $4775
        .byte   $90
        .word   $4775
        .byte   $b0
        .word   $4875
        .byte   $97
        .word   $4875
        .byte   $c9
        .word   $49d1
        .byte   $00

; $0a/$16: hdma #1 table (+$210f)
_c2d212:
@d212:  .byte   $a0
        .word   $4775
        .byte   $a0
        .word   $4775
        .byte   $97
        .word   $4775
        .byte   $a9
        .word   $4875
        .byte   $97
        .word   $4875
        .byte   $c9
        .word   $49d1
        .byte   $00

; $04/$10: hdma #1 table (+$210f)
_c2d225:
@d225:  .byte   $a0
        .word   $4775
        .byte   $a0
        .word   $4775
        .byte   $a0
        .word   $4775
        .byte   $a0
        .word   $4775
        .byte   $97
        .word   $4775
        .byte   $c9
        .word   $49d1
        .byte   $00

; $07: hdma #2 table (+$2111)
_c2d238:
@d238:  .byte   $a0
        .word   $4af5
        .byte   $a0
        .word   $4af5
        .byte   $a0
        .word   $4af5
        .byte   $a0
        .word   $4af5
        .byte   $97
        .word   $4af5
        .byte   $c9
        .word   $4d51
        .byte   $00

; $05: hdma #2 table (+$2111)
_c2d24b:
@d24b:  .byte   $40
        .word   $4af5
        .byte   $40
        .word   $4af5
        .byte   $17
        .word   $4af5
        .byte   $c9
        .word   $4d51
        .byte   $00

; $0e: hdma #2 table (+$2111)
_c2d258:
@d258:  .byte   $e4
        .word   $4af5
        .byte   $b3
        .word   $4c85
        .byte   $8c
        .word   $4d51
        .byte   $30
        .word   $7b86
        .byte   $8d
        .word   $4e41
        .byte   $00

; $13: hdma #2 table (+$2111)
_c2d268:
@d268:  .byte   $a0
        .word   $4af5
        .byte   $a0
        .word   $4af5
        .byte   $a0
        .word   $4af5
        .byte   $a0
        .word   $4af5
        .byte   $97
        .word   $4af5
        .byte   $8c
        .word   $4d51
        .byte   $30
        .word   $7b86
        .byte   $8d
        .word   $4e41
        .byte   $00

; $11: hdma #2 table (+$2111)
_c2d281:
@d281:  .byte   $40
        .word   $4af5
        .byte   $40
        .word   $4af5
        .byte   $17
        .word   $4af5
        .byte   $8c
        .word   $4d51
        .byte   $30
        .word   $7b86
        .byte   $8d
        .word   $4e41
        .byte   $00

; ------------------------------------------------------------------------------

;
_c2d294:
@d294:  .word   $0000,$0020,$0040,$0060,$0080,$00a0,$00c0,$00e0

; pointers to bg2 tile data in vram (menu region)
_c2d2a4:
@d2a4:  .word   $7140,$7160,$7180,$71a0,$71c0,$71e0,$7200,$7220

;
_c2d2b4:
@d2b4:  .word   $0000,$0040,$0080,$00c0,$0100,$0140,$0180,$01c0

; pointers to character sprite graphics in ram
_c2d2c4:
@d2c4:  .word   $a000,$a080,$a100,$a180

_c2d2cc:
@d2cc:  .word   $a200,$a280,$a300,$a380

; pointers to character sprite graphics in vram
_c2d2d4:
@d2d4:  .word   $2000,$2040,$2080,$20c0

_c2d2dc:
@d2dc:  .word   $2100,$2140,$2180,$21c0

;
_c2d2e4:
@d2e4:  .word   $a400,$a600,$a480,$a680,$a500,$a700,$a580,$a780
        .word   $a800,$aa00,$a880,$aa80,$a900,$ab00,$a980,$ab80
        .word   $ac00,$ae00,$ac80,$ae80,$ad00,$af00,$ad80,$af80
        .word   $b000,$b200,$b080,$b280,$b100,$b300,$b180,$a780

;
_c2d324:
@d324:  .word   $2200,$2300,$2240,$2340,$2280,$2380,$22c0,$23c0
        .word   $2200,$2300,$2240,$2340,$2280,$2380,$22c0,$23c0
        .word   $2200,$2300,$2240,$2340,$2280,$2380,$22c0,$23c0
        .word   $2200,$2300,$2240,$2340,$2280,$2380,$22c0,$23c0

; ------------------------------------------------------------------------------

_c2d364:
@d364:  .byte   $0e,$2a,$46,$62

; ------------------------------------------------------------------------------

; 0: hdma #0 ($c2d1f2 -> +$210d)
_c2d368:
@d368:  .byte $43,$0d
        .faraddr _c2d1f2

; 1: hdma #1 ($c2d225 -> +$210f)
@d36d:  .byte $43,$0f
        .faraddr _c2d225

; 2: hdma #2 ($c2d24b -> +$2111)
@d372:  .byte $43,$11
        .faraddr _c2d24b

; 3: hdma #3, normal ($c2d12e -> +++$2105)
@d377:  .byte $44,$05
        .faraddr _c2d12e

; 4: hdma #4 ($c2d138 -> +++$212f)
@d37c:  .byte $44,$2f
        .faraddr _c2d138

; 5: ($c2d149 -> +$2131)
@d381:  .byte $41,$31
        .faraddr _c2d149

; 6: hdma #6, normal ($c2d0f4 -> +++$2109)
@d386:  .byte $44,$09
        .faraddr _c2d0f4

; 7: hdma #3, slot ($c2d11e -> +++$2105)
@d38b:  .byte $44,$05
        .faraddr _c2d11e

; 8: hdma #6, slot ($c2d10e -> +++$2109)
@d390:  .byte $44,$09
        .faraddr _c2d10e

; 9: hdma #7 ($c2d0fe -> +++$212a)
@d395:  .byte $44,$2a
        .faraddr _c2d0fe

; 10: hdma #5 ($c2d13f -> +++$2126)
@d39a:  .byte $44,$26
        .faraddr _c2d13f

; ------------------------------------------------------------------------------

; repeat count for bg3 hdma scroll data (vertical)
_c2d39f:
@d39f:  .byte   1,1,1,1,1,2,1,2,1,2,2,3,2,3,3,3
        .byte   4,3,4,4,4,5,4,5,5,5,5,5,5,5,5,4
        .byte   5,4,4,4,3,4,3,3,3,2,3,2,2,1,2,1
        .byte   2,1,1,1,1,1

; ------------------------------------------------------------------------------

; [ init hardware registers ]

_c2d3d5:
system_init:
@d3d5:  lda     #$00
        pha
        plb
        sta     hNMITIMEN       ; disable interrupts
        ldx     #$0000
        phx
        pld
        lda     #$80
        sta     hINIDISP
        lda     #$61        ; 16x16 & 32x32 sprite sizes
        sta     hOBJSEL
        lda     #$80
        sta     hVMAINC
        lda     #$00
        tax
        sta     hBG4HOFS
        sta     hBG4HOFS
        sta     hBG4VOFS
        sta     hBG4VOFS
        sta     hTMW
        sta     hTSW
        sta     hMDMAEN
        sta     hHDMAEN
        sta     hCGADSUB
        sta     hSETINI
        sta     hCGSWSEL
        sta     hWH2
        sta     $2129
        lda     #^BattleNMI        ; set interrupt jump code
        sta     $1503
        lda     #^BattleIRQ
        sta     $1507
        ldx     #.loword(BattleNMI)
        stx     $1501
        ldx     #.loword(BattleIRQ)
        stx     $1505
        lda     #$5c
        sta     $1500
        sta     $1504
        lda     #$01        ; select fastrom
        sta     f:hMEMSEL
        lda     #$33        ; bg/window settings
        sta     hW12SEL
        sta     hW34SEL
        sta     hWOBJSEL
        lda     #$7e
        pha
        plb
        ldx     #$0000      ; clear $00-$9b
@d450:  stz     a:$0000,x
        inx
        cpx     #$009c
        bne     @d450
        ldx     #$6178      ; clear $6178-$8d12
@d45c:  stz     a:$0000,x
        inx
        cpx     #$8d13
        bne     @d45c
        clr_ax
@d467:  sta     $7e00,x     ; clear $7e00-$7fff (color palettes)
        inx
        cpx     #$0200
        bne     @d467
        rtl

; ------------------------------------------------------------------------------

summon_obj_set_tbl:
_c2d471:
@d471:  .word   $ae3f,$2400,$b03f,$2500,$b23f,$2600,$b43f,$2700
        .word   $b63f,$2800,$b83f,$2900,$ba3f,$2a00,$bc3f,$2b00
        .word   $be3f,$2c00,$c43f,$2d00

; tritoch sparkling palettes
_c2d499:
@d499:  .word   $2529,$0843,$7ffe,$7f32,$5a2a,$4544,$30a2,$56f2
        .word   $2a0a,$1121,$19d9,$10d2,$0c8a,$0ebd,$09f1,$050a
        .word   $2d6b,$0843,$5a2a,$7ffe,$7f32,$5a2a,$4544,$56f2
        .word   $2a0a,$1121,$19d9,$10d2,$0c8a,$0ebd,$09f1,$050a
        .word   $2d6b,$0843,$4544,$5a2a,$7ffe,$7f32,$5a2a,$56f2
        .word   $2a0a,$1121,$19d9,$10d2,$0c8a,$0ebd,$09f1,$050a
        .word   $2d6b,$0843,$5a2a,$4544,$5a2a,$7ffe,$7f32,$56f2
        .word   $2a0a,$1121,$19d9,$10d2,$0c8a,$0ebd,$09f1,$050a
        .word   $2d6b,$0843,$6ef1,$5a2a,$4544,$5a2a,$7ffe,$56f2
        .word   $2a0a,$1121,$19d9,$10d2,$0c8a,$0ebd,$09f1,$050a

; ------------------------------------------------------------------------------

; [ update circle shape ]

UpdateCircleShape:
@d539:  lda     $961b       ; circle shape
        asl
        tax
        jmp     (.loword(CircleShapeTbl),x)   ; circle shape jump table

; ------------------------------------------------------------------------------

; circle shape jump table
CircleShapeTbl:
@d541:  .addr   CircleShape_00
        .addr   CircleShape_01
        .addr   CircleShape_02
        .addr   CircleShape_03
        .addr   CircleShape_04
        .addr   CircleShape_05
        .addr   CircleShape_06
        .addr   CircleShape_07
        .addr   CircleShape_08

; ------------------------------------------------------------------------------

; [ circle shape $07: ultima ]

CircleShape_07:
        .i8
@d553:  ldx     #$fe
        stz     $22
        stz     $26
@d559:  lda     $26
        and     #$01
        bne     @d58d
        lda     $16
        sec
        sbc     $9e1f,y
        bcc     @d56b
        cmp     #$08
        bcs     @d56d
@d56b:  lda     #$08
@d56d:  sta     f:hWMDATA
        sta     $961f,x
        lda     $9e1f,y
        clc
        adc     $18
        bcs     @d580
        cmp     #$f7
        bcc     @d582
@d580:  lda     #$f7
@d582:  sta     f:hWMDATA
        sta     $9620,x
        dex2
        bra     @d5b1
@d58d:  lda     $16
        sec
        sbc     $9e1f,y
        bcc     @d599
        cmp     #$08
        bcs     @d59b
@d599:  lda     #$08
@d59b:  sta     $961f,x
        lda     $9e1f,y
        clc
        adc     $18
        bcs     @d5aa
        cmp     #$f7
        bcc     @d5ac
@d5aa:  lda     #$f7
@d5ac:  sta     $9620,x
        dex2
@d5b1:  inc     $26
        iny
        cpy     $12
        bne     @d559
        clr_a
        sta     $9e1f,y
        dey
        lda     $9e1f,y
        dec
        sta     $12
@d5c3:  lda     $9e1f,y
        cmp     $9e1e,y
        beq     @d621
        lda     $26
        and     #$01
        bne     @d5fd
        lda     $16
        sec
        sbc     $12
        bcc     @d5dc
        cmp     #$08
        bcs     @d5de
@d5dc:  lda     #$08
@d5de:  sta     f:hWMDATA
        sta     $961f,x
        lda     $12
        clc
        adc     $18
        bcs     @d5f0
        cmp     #$f7
        bcc     @d5f2
@d5f0:  lda     #$f7
@d5f2:  sta     f:hWMDATA
        sta     $9620,x
        dex2
        bra     @d61f
@d5fd:  lda     $16
        sec
        sbc     $12
        bcc     @d608
        cmp     #$08
        bcs     @d60a
@d608:  lda     #$08
@d60a:  sta     $961f,x
        lda     $12
        clc
        adc     $18
        bcs     @d618
        cmp     #$f7
        bcc     @d61a
@d618:  lda     #$f7
@d61a:  sta     $9620,x
        dex2
@d61f:  inc     $26
@d621:  dec     $12
        dey
        bne     @d5c3
        rts

; ------------------------------------------------------------------------------

; [ circle shape $04: vertical oval ]

CircleShape_04:
        .i8
@d627:  ldx     #$fc
@d629:  lda     $16
        sec
        sbc     $9e1f,y
        bcc     @d635
        cmp     #$08
        bcs     @d637
@d635:  lda     #$08
@d637:  sta     f:hWMDATA
        sta     $22
        sta     $961f,x
        sta     $9621,x
        lda     $9e1f,y
        clc
        adc     $18
        bcs     @d64f
        cmp     #$f7
        bcc     @d651
@d64f:  lda     #$f7
@d651:  sta     f:hWMDATA
        sta     $23
        sta     $9620,x
        sta     $9622,x
        lda     $22
        sta     f:hWMDATA
        lda     $23
        sta     f:hWMDATA
        dex4
        iny
        cpy     $12
        bne     @d629
        clr_a
        sta     $9e1f,y
        dey
        lda     $9e1f,y
        dec
        sta     $12
@d67d:  lda     $9e1f,y
        cmp     $9e1e,y
        beq     @d6c7
        lda     $16
        sec
        sbc     $12
        bcc     @d690
        cmp     #$08
        bcs     @d692
@d690:  lda     #$08
@d692:  sta     f:hWMDATA
        sta     $22
        sta     $961f,x
        sta     $9621,x
        lda     $12
        clc
        adc     $18
        bcs     @d6a9
        cmp     #$f7
        bcc     @d6ab
@d6a9:  lda     #$f7
@d6ab:  sta     f:hWMDATA
        sta     $23
        sta     $9620,x
        sta     $9622,x
        lda     $22
        sta     f:hWMDATA
        lda     $23
        sta     f:hWMDATA
        dex4
@d6c7:  dec     $12
        dey
        bne     @d67d
        rts

; ------------------------------------------------------------------------------

; [ circle shape $03: beam from top ]

CircleShape_03:
        .i8
@d6cd:  jsr     CircleShape_00
        longa
        clr_ax
        lda     $971f
@d6d7:  sta     $961f,x
        sta     $965f,x
        sta     $969f,x
        sta     $96df,x
        inx2
        cpx     #$40
        bne     @d6d7
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ circle shape $06: horizontal oval ]

CircleShape_06:
        .i8
@d6ed:  ldx     #$fe
        stz     $22
        stz     $26
@d6f3:  lda     $26
        and     #$01
        bne     @d725
        lda     $16
        sec
        sbc     $9e1f,y
        bcc     @d705
        cmp     #$08
        bcs     @d707
@d705:  lda     #$08
@d707:  sta     f:hWMDATA
        sta     $961f,x
        lda     $9e1f,y
        clc
        adc     $18
        bcs     @d71a
        cmp     #$f7
        bcc     @d71c
@d71a:  lda     #$f7
@d71c:  sta     f:hWMDATA
        sta     $9620,x
        dex2
@d725:  inc     $26
        iny
        cpy     $12
        bne     @d6f3
        clr_a
        sta     $9e1f,y
        dey
        lda     $9e1f,y
        dec
        sta     $12
@d737:  lda     $9e1f,y
        cmp     $9e1e,y
        beq     @d771
        lda     $26
        and     #$01
        bne     @d76f
        lda     $16
        sec
        sbc     $12
        bcc     @d750
        cmp     #$08
        bcs     @d752
@d750:  lda     #$08
@d752:  sta     f:hWMDATA
        sta     $961f,x
        lda     $12
        clc
        adc     $18
        bcs     @d764
        cmp     #$f7
        bcc     @d766
@d764:  lda     #$f7
@d766:  sta     f:hWMDATA
        sta     $9620,x
        dex2
@d76f:  inc     $26
@d771:  dec     $12
        dey
        bne     @d737
        rts

; ------------------------------------------------------------------------------

; [ circle shape $00: circle ]

CircleShape_00:
        .i8
@d777:  ldx     #$fe
@d779:  lda     $16
        sec
        sbc     $9e1f,y
        bcc     @d785
        cmp     #$08
        bcs     @d787
@d785:  lda     #$08
@d787:  sta     f:hWMDATA
        sta     $961f,x
        lda     $9e1f,y
        clc
        adc     $18
        bcs     @d79a
        cmp     #$f7
        bcc     @d79c
@d79a:  lda     #$f7
@d79c:  sta     f:hWMDATA
        sta     $9620,x
        dex2
        iny
        cpy     $12
        bne     @d779
        jmp     _c2d86e

; ------------------------------------------------------------------------------

; [ circle shape $01: bio blast ]

CircleShape_01:
        .i8
@d7ad:  ldx     #$fe
        lda     $961a
        clc
        adc     #$02
        sta     $26
        sta     $961a
@d7ba:  lda     $26
        clc
        adc     #$04
        sta     $26
        phx
        jsr     CalcSine8_near
        sta     $18
        sta     $16
        lda     $1a
        clc
        adc     $18
        sta     $18
        lda     $1a
        clc
        adc     $16
        sta     $16
        plx
        lda     $16
        sec
        sbc     $9e1f,y
        bcc     @d7e4
        cmp     #$08
        bcs     @d7e6
@d7e4:  lda     #$08
@d7e6:  sta     f:hWMDATA
        sta     $961f,x
        lda     $9e1f,y
        clc
        adc     $18
        bcs     @d7f9
        cmp     #$f7
        bcc     @d7fb
@d7f9:  lda     #$f7
@d7fb:  sta     f:hWMDATA
        sta     $9620,x
        dex2
        iny
        cpy     $12
        bne     @d7ba
        jmp     _c2d86e

; ------------------------------------------------------------------------------

; [ circle shape $08: slimer blob ]

CircleShape_08:
        .i8
@d80c:  jsr     UpdateBlob
        jmp     _c2d9de

; ------------------------------------------------------------------------------

; [ circle shape $02: big blob ]

CircleShape_02:
        .i8
@d812:  jsr     UpdateBlob
        jmp     _c2da04

; ------------------------------------------------------------------------------

; [ circle shape $05: small blob ]

CircleShape_05:
        .i8
@d818:  jsr     UpdateBlob
        jmp     _c2d9f1

; ------------------------------------------------------------------------------

; [ update blob ]

UpdateBlob:
circle_02_main:
        .i8
@d81e:  ldx     #$fe
@d820:  lda     #$00
        sec
        sbc     $9e1f,y
        sta     f:hWMDATA
        sta     $961f,x
        lda     $9e1f,y
        sta     f:hWMDATA
        sta     $9620,x
        dex2
        iny
        cpy     $12
        bne     @d820
        clr_a
        sta     $9e1f,y
        dey
        lda     $9e1f,y
        dec
        sta     $12
@d849:  lda     $9e1f,y
        cmp     $9e1e,y
        beq     @d868
        lda     #$00
        sec
        sbc     $12
        sta     f:hWMDATA
        sta     $961f,x
        lda     $12
        sta     f:hWMDATA
        sta     $9620,x
        dex2
@d868:  dec     $12
        dey
        bne     @d849
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2d86e:
        .i16
@d86e:  clr_a
        sta     $9e1f,y
        dey
        lda     $9e1f,y
        dec
        sta     $12
@d879:  lda     $9e1f,y
        cmp     $9e1e,y
        beq     @d8ab
        lda     $16
        sec
        sbc     $12
        bcc     @d88c
        cmp     #$08
        bcs     @d88e
@d88c:  lda     #$08
@d88e:  sta     f:hWMDATA
        sta     $961f,x
        lda     $12
        clc
        adc     $18
        bcs     @d8a0
        cmp     #$f7
        bcc     @d8a2
@d8a0:  lda     #$f7
@d8a2:  sta     f:hWMDATA
        sta     $9620,x
        dex2
@d8ab:  dec     $12
        dey
        bne     @d879
        rts

; ------------------------------------------------------------------------------

; [ reset window position buffer ??? ]

_c2d8b1:
clr_circle_mask_data:
@d8b1:  clr_ax
        longa
        shorti
        lda     #$00ff      ; left position = 0, right position = 255
@d8ba:  sta     $961f,x
        sta     $965f,x
        sta     $969f,x
        sta     $96df,x
        sta     $971f,x
        sta     $975f,x
        sta     $979f,x
        sta     $97df,x
        inx2
        cpx     #$40
        bne     @d8ba
        longi
        shorta
        rts

; ------------------------------------------------------------------------------

; [ update circle (long access) ]

UpdateCircle_far:
@d8dd:  jsr     UpdateCircle
        rtl

; ------------------------------------------------------------------------------

; [ update circle ]

UpdateCircle:
@d8e1:  jsr     _c2d8b1
        lda     $9613
        and     #$7f
        bne     @d8ec       ; return if circle size is zero
        rts
@d8ec:  shorti
        sta     $14
        sta     $1e
        lda     $9614       ; circle x position
        sta     $1a
        stz     $20
        lda     $9619       ;
        sta     $24
        lda     $961b       ; circle shape
        cmp     #$08
        beq     @d90d
        cmp     #$05
        beq     @d90d
        cmp     #$02
        bne     @d922
@d90d:  lda     $14
        sta     $24
        lda     $961a       ;
        jsr     CalcSine8_near
        sta     $24
        lda     $14
        clc
        adc     $24
        sta     $14
        sta     $1e
@d922:  clr_ay
        dec
@d925:  sta     $12
        lda     $1e
        cmp     $20
        bcc     @d950
        sta     $9e1f,y     ;
        lda     $20
        asl
        dec
        sta     $10
        iny
        inc     $20
        lda     $14
        sec
        sbc     $10
        sta     $14
        cmp     $12
        bcc     @d925
        dec     $1e
        lda     $1e
        asl
        clc
        adc     $14
        sta     $14
        bra     @d925
@d950:  sty     $12
        lda     #$1f        ; $7e971f (window position buffer)
        sta     f:hWMADDL
        lda     #$97
        sta     f:hWMADDM
        lda     #$7e
        sta     f:hWMADDH
        clr_ay
        lda     $1a
        sta     $16
        sta     $18
        jsr     UpdateCircleShape
; fallthrough

; ------------------------------------------------------------------------------

; [  ]

_c2d96f:
set_circle_mask_buf:
@d96f:  longi
        lda     $9615
        cmp     #$81
        bcc     @d9a3
        sec
        sbc     #$80
        beq     @d9a3
        longa
        asl2
        sta     $22
        clr_ax
        lda     $961b       ; circle shape
        and     #$00ff
        cmp     #$0003
        bne     @d995
        lda     $961f
        bra     @d998
@d995:  lda     #$00ff
@d998:  sta     $9a21,x
        inx4
        cpx     $22
        bne     @d998
@d9a3:  lda     $9615
        longa
        and     #$00ff
        asl2
        tax
        clr_ay
@d9b0:  lda     $961f,y
        sta     $9821,x
        iny2
        cpy     #$0200
        bne     @d9ce
        lda     #$00ff
@d9c0:  sta     $9821,x
        inx4
        cpx     #$045c
        bne     @d9c0
        bra     @d9d7
@d9ce:  inx4
        cpx     #$045c
        bne     @d9b0
@d9d7:  shorta0
        inc     $6197
        rts

; ------------------------------------------------------------------------------

; [ update slimer blob ]

_c2d9de:
@d9de:  longi
        lda     #$08
        sta     $961c
        lda     #$10
        sta     $961e
        lda     #$04
        sta     $961d
        bra     _da15

; ------------------------------------------------------------------------------

; [ update small blob ]

_c2d9f1:
@d9f1:  longi
        lda     #$04
        sta     $961c
        lda     #$0a
        sta     $961e
        lda     #$08
        sta     $961d
        bra     _da15

; ------------------------------------------------------------------------------

; [ update big blob ]

_c2da04:
@da04:  longi
        lda     #$08
        sta     $961c
        lda     #$20
        sta     $961e
        lda     #$04
        sta     $961d
_da15:  lda     $961a
        clc
        adc     $961c
        sta     $961a
        sta     $26
        lda     $961e
        sta     $24
        lda     $961d
        sta     $28
        clr_ay
@da2d:  lda     $26
        clc
        adc     $28
        sta     $26
        lda     $9620,y
        beq     @da65
        lda     $26
        jsr     CalcSine8_near
        clc
        adc     $16
        sta     $22
        lda     $961f,y
        clc
        adc     $22
        bcc     @da4f
        cmp     #$08
        bcs     @da51
@da4f:  lda     #$08
@da51:  sta     $961f,y
        lda     $9620,y
        clc
        adc     $22
        bcs     @da60
        cmp     #$f7
        bcc     @da62
@da60:  lda     #$f7
@da62:  sta     $9620,y
@da65:  iny2
        cpy     #$0200
        bne     @da2d
        rts

; ------------------------------------------------------------------------------

; [ update triangle (far) ]

UpdateTriangle_far:
@da6d:  jsr     UpdateTriangle
        rtl

; ------------------------------------------------------------------------------

; [ update triangle ]

UpdateTriangle:
@da71:  jsr     _c2d8b1
        lda     $615c
        cmp     $615e
        beq     @da9c
        bcc     @da9c
        lda     $6160
        cmp     $615e
        beq     @daa3
        bcc     @daa3
        ldx     $615b
        stx     $6165
        ldx     $615d
        stx     $6161
        ldx     $615f
        stx     $6163
        bra     @dac9
@da9c:  cmp     $6160
        beq     @dab7
        bcc     @dab7
@daa3:  ldx     $615f
        stx     $6161
        ldx     $615b
        stx     $6163
        ldx     $615d
        stx     $6165
        bra     @dac9
@dab7:  ldx     $615b
        stx     $6161
        ldx     $615d
        stx     $6163
        ldx     $615f
        stx     $6165
@dac9:  lda     $6163
        cmp     $6165
        beq     @dae1
        bcc     @dae1
        ldx     $6163
        phx
        ldx     $6165
        stx     $6163
        plx
        stx     $6165
@dae1:  ldx     $6161
        stx     $614c
        ldx     $6163
        stx     $614e
        jsl     _c2dcc8
        lda     $6161
        sta     $1e
        lda     $6162
        sta     $20
        jsr     _c2db6a
        ldx     $6161
        stx     $614c
        ldx     $6165
        stx     $614e
        jsl     _c2dcc8
        lda     $6161
        sta     $1e
        lda     $6162
        sta     $20
        jsr     _c2dc19
        lda     $6164
        cmp     $6166
        beq     @db44
        bcc     @db44
        ldx     $6165
        stx     $614c
        ldx     $6163
        stx     $614e
        jsl     _c2dcc8
        lda     $6165
        sta     $1e
        lda     $6166
        sta     $20
        jsr     _c2dc19
        bra     @db61
@db44:  ldx     $6163
        stx     $614c
        ldx     $6165
        stx     $614e
        jsl     _c2dcc8
        lda     $6163
        sta     $1e
        lda     $6164
        sta     $20
        jsr     _c2db6a
@db61:  lda     $6155
        sta     $9615
        jmp     _c2d96f

; ------------------------------------------------------------------------------

; [  ]

_c2db6a:
line_set:
@db6a:  lda     $6154
        sta     $10
        bmi     @db75
        lda     #$08
        bra     @db77
@db75:  lda     #$f7
@db77:  sta     $14
        stz     $11
        stz     $15
        stz     $1f
        lda     $20
        longa
        asl
        tay
        lda     $10
        sec
        sbc     #$0080
        sta     $10
        shorta0
        ldx     $6152
        stx     $22
        stx     $24
        lda     $23
        bne     @db9c
        rts
@db9c:  lda     $6150
        bmi     @dbdd
@dba1:  lda     $24
@dba3:  cmp     $23
        bcc     @dbae
        sec
        sbc     $23
        inc     $1e
        bra     @dba3
@dbae:  clc
        adc     $22
        sta     $24
        longa
        lda     $1e
        clc
        adc     $10
        cmp     #$0009
        bcc     @dbc4
        cmp     #$00f8
        bcc     @dbc6
@dbc4:  lda     $14
@dbc6:  sta     $12
        shorta0
        lda     $12
        cmp     $9620,y
        bne     @dbd3
        inc
@dbd3:  sta     $961f,y
        iny2
        dec     $25
        bne     @dba1
        rts
@dbdd:  lda     $24
@dbdf:  cmp     $23
        bcc     @dbea
        sec
        sbc     $23
        dec     $1e
        bra     @dbdf
@dbea:  clc
        adc     $22
        sta     $24
        longa
        lda     $1e
        clc
        adc     $10
        cmp     #$0009
        bcc     @dc00
        cmp     #$00f8
        bcc     @dc02
@dc00:  lda     $14
@dc02:  sta     $12
        shorta0
        lda     $12
        cmp     $9620,y
        bne     @dc0f
        inc
@dc0f:  sta     $961f,y
        iny2
        dec     $25
        bne     @dbdd
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2dc19:
line_set2:
@dc19:  lda     $6154
        sta     $10
        bmi     @dc24
        lda     #$08
        bra     @dc26
@dc24:  lda     #$f7
@dc26:  sta     $14
        stz     $15
        stz     $11
        stz     $1f
        lda     $20
        longa
        asl
        tay
        lda     $10
        sec
        sbc     #$0080
        sta     $10
        shorta0
        ldx     $6152
        stx     $22
        stx     $24
        lda     $23
        bne     @dc4b
        rts
@dc4b:  lda     $6150
        bmi     @dc8c
@dc50:  lda     $24
@dc52:  cmp     $23
        bcc     @dc5d
        sec
        sbc     $23
        inc     $1e
        bra     @dc52
@dc5d:  clc
        adc     $22
        sta     $24
        longa
        lda     $1e
        clc
        adc     $10
        cmp     #$0009
        bcc     @dc73
        cmp     #$00f8
        bcc     @dc75
@dc73:  lda     $14
@dc75:  sta     $12
        shorta0
        lda     $12
        cmp     $961f,y
        bne     @dc82
        dec
@dc82:  sta     $9620,y
        iny2
        dec     $25
        bne     @dc50
        rts
@dc8c:  lda     $24
@dc8e:  cmp     $23
        bcc     @dc99
        sec
        sbc     $23
        dec     $1e
        bra     @dc8e
@dc99:  clc
        adc     $22
        sta     $24
        longa
        lda     $1e
        clc
        adc     $10
        cmp     #$0009
        bcc     @dcaf
        cmp     #$00f8
        bcc     @dcb1
@dcaf:  lda     $14
@dcb1:  sta     $12
        shorta0
        lda     $12
        cmp     $961f,y
        bne     @dcbe
        dec
@dcbe:  sta     $9620,y
        iny2
        dec     $25
        bne     @dc8c
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2dcc8:
one_line_init:
@dcc8:  clr_ax
        stx     $6150
        stx     $6152
        lda     $614c
        cmp     $614e
        beq     @dcf6
        bcc     @dce9
        dec     $6150
        lda     $614c
        sec
        sbc     $614e
        sta     $6152
        bra     @dcf6
@dce9:  inc     $6150
        lda     $614e
        sec
        sbc     $614c
        sta     $6152
@dcf6:  lda     $614d
        cmp     $614f
        beq     @dd1c
        bcc     @dd0f
        dec     $6151
        lda     $614d
        sec
        sbc     $614f
        sta     $6153
        bra     @dd1c
@dd0f:  inc     $6151
        lda     $614f
        sec
        sbc     $614d
        sta     $6153
@dd1c:  rtl

; ------------------------------------------------------------------------------

; [  ]

CalcSine8_near:
@dd1d:  tax
        lda     f:SineTbl8,x
        bpl     @dd3e
        eor     #$ff
        sta     f:hWRMPYA
        lda     $24
        sta     f:hWRMPYB
        lda     #$ff
        sta     $67
        sta     $67
        lda     f:hRDMPYH
        eor     #$ff
        inc
        rts
@dd3e:  sta     f:hWRMPYA
        lda     $24
        sta     f:hWRMPYB
        lda     #$00
        sta     $67
        sta     $67
        lda     f:hRDMPYH
        rts

; ------------------------------------------------------------------------------

; [ battle animation command $80/$70:  ]

_c2dd53:
magic_init_112long:
@dd53:  longa
        clr_ax
        shorti
        lda     $7b24
        sec
        sbc     $7b2b
@dd60:  sta     $4af7,x
        inx4
        cpx     #$80
        bne     @dd60
        shorta0
        longi
        rtl

; ------------------------------------------------------------------------------

; [ battle animation command $80/$6e:  ]

_c2dd71:
magic_init_110long:
@dd71:  clr_ax
        stz     $22
@dd75:  lda     $63b0,x
        clc
        adc     $23
        sta     $63b0,x
        lda     $22
        clc
        adc     $26
        sta     $22
        inx4
        bne     @dd75
        rtl

; ------------------------------------------------------------------------------

; menu window tile data vram pointers
MenuWindowVRAMPtrs:
@dd8c:  .word   $7000,$7140,$7600,$7300,$7400,$7500,$7700,$6800
        .word   $6900

; ------------------------------------------------------------------------------

; menu window size & position data

.macro def_menu_window _bufptr,_width,_height
        .byte   _width,_height
        .word   _bufptr
.endmac

MenuWindowTbl:
@dd9e:  def_menu_window $8d15,12,8
        def_menu_window $8d2d,18,8
        def_menu_window $8d17,10,8
        def_menu_window $8d15,30,8
        def_menu_window $8d15,30,8
        def_menu_window $8d3f,9,8
        def_menu_window $8d15,30,5
        def_menu_window $8d15,21,8
        def_menu_window $8d15,30,4
        def_menu_window $8d13,7,4
        def_menu_window $8d13,12,5
        def_menu_window $a9c1,30,4
        def_menu_window $a9cd,18,4
        def_menu_window $8d17,19,7
        def_menu_window $8d17,12,8

; ------------------------------------------------------------------------------

; menu text position data
;   +$00: source address
;   +$02: destination address
;   +$04: number of rows
;   +$06: unused
_c2ddda:
@ddda:  .word   $4e75,$4d51,$0008,$0000
        .word   $4f75,$4d51,$0008,$0000
        .word   $51d5,$4d61,$0008,$0000
        .word   $53d5,$4d61,$0005,$0000
        .word   $5475,$4d61,$0006,$0000
        .word   $4f75,$4d51,$0005,$0000
        .word   $4f95,$4d71,$0005,$0000
        .word   $4fc5,$4da1,$0005,$0000
        .word   $4ff5,$4dd1,$0005,$0000
        .word   $4f75,$4d51,$0006,$0000
        .word   $5095,$4d71,$0008,$0000

; ------------------------------------------------------------------------------

; menu text vertical offset and height (in tiles)
_c2de32:
@de32:  .word   $025c,$0008
        .word   $025c,$0008
        .word   $026c,$0008
        .word   $026c,$0008
        .word   $026c,$0008
        .word   $027c,$0005
        .word   $026c,$0008
        .word   $027c,$0005
        .word   $027c,$0004
        .word   $027c,$0004
        .word   $025c,$0004
        .word   $028c,$0004
        .word   $02bc,$0004
        .word   $02ec,$0004
        .word   $025c,$0004
        .word   $028c,$0004
        .word   $02bc,$0004
        .word   $02ec,$0004
        .word   $026c,$0005
        .word   $026c,$0005
        .word   $026c,$0008
        .word   $026c,$0008
        .word   $025c,$0007
        .word   $025c,$0004
        .word   $025c,$0004
        .word   $027c,$0008
        .word   $027c,$0008
        .word   $027c,$0008

; ------------------------------------------------------------------------------

; battle menu window scroll positions
_c2dea2:
@dea2:  .word   $0000,$0068
        .word   $0000,$00b8
        .word   $0100,$00e4
        .word   $0000,$0124
        .word   $0100,$0064
        .word   $0100,$00a0
        .word   $0000,$00b8
        .word   $0000,$0124
        .word   $0100,$0120
        .word   $0100,$0064
        .word   $fff8,$ff68
        .word   $fff8,$ff5c
        .word   $fff8,$ff50
        .word   $fff8,$ff44
        .word   $0000,$0000
        .word   $0000,$0000
        .word   $0000,$0000
        .word   $0000,$0000
        .word   $fff0,$ffa4
        .word   $0000,$0000
        .word   $0000,$0124
        .word   $0000,$0068
        .word   $0000,$00b8
        .word   $fff0,$ff68
        .word   $0000,$0000
        .word   $0000,$0060
        .word   $0000,$0124
        .word   $0100,$0064

; ------------------------------------------------------------------------------

; menu text buffer data

.macro def_menu_text_buf _bufptr, _width
        .word   _bufptr
        .byte   _width,0
.endmac

MenuTextBufData:
@df12:  def_menu_text_buf $5ad5,12
        def_menu_text_buf $5b95,7
        def_menu_text_buf $5c05,4
        def_menu_text_buf $5c45,6
        def_menu_text_buf $5859,32
        def_menu_text_buf $8d61,32
        def_menu_text_buf $5e4d,32
        def_menu_text_buf $5ca5,7
        def_menu_text_buf $5d3f,7
        def_menu_text_buf $5d85,7
        def_menu_text_buf $5ca5,7
        def_menu_text_buf $5cc1,7
        def_menu_text_buf $5cdd,7
        def_menu_text_buf $5cf9,7
        def_menu_text_buf $5c05,4
        def_menu_text_buf $5c15,4
        def_menu_text_buf $5c25,4
        def_menu_text_buf $5c35,4
        def_menu_text_buf $5c45,6
        def_menu_text_buf $5c5d,6
        def_menu_text_buf $5c75,6
        def_menu_text_buf $5c8d,6
        def_menu_text_buf $5c45,6
        def_menu_text_buf $5c5d,6
        def_menu_text_buf $5c75,6
        def_menu_text_buf $5c8d,6
        def_menu_text_buf $5c45,6
        def_menu_text_buf $5c5d,6
        def_menu_text_buf $5c75,6
        def_menu_text_buf $5c8d,6
        def_menu_text_buf $5dbd,12
        def_menu_text_buf $5859,32
        def_menu_text_buf $5859,32
        def_menu_text_buf $5ecd,10
        def_menu_text_buf $8d57,32

; ------------------------------------------------------------------------------

; menu text tile display data (source, destination, length, number of lines)
_c2df9e:
set_box_data_tbl:
@df9e:  .word   $5ad5,$5859,$0018,$0008  ; $00: monster names
        .word   $5b95,$5871,$000e,$0008  ; $01: character names
        .word   $5c05,$587f,$0008,$0008  ; $02: hp
        .word   $5c45,$5887,$000c,$0008  ; $03: gauge
        .word   $5d31,$8d15,$000e,$0005  ; $04: row (top)
        .word   $5d31,$8d95,$000e,$0005  ; $05: row
        .word   $5d31,$8e15,$000e,$0005  ; $06: row
        .word   $5d31,$8e95,$000e,$0005  ; $07: row (bottom)
        .word   $5d77,$8d21,$000e,$0005  ; $08: def. (top)
        .word   $5d77,$8da1,$000e,$0005  ; $09: def.
        .word   $5d77,$8e21,$000e,$0005  ; $0a: def.
        .word   $5d77,$8ea1,$000e,$0005  ; $0b: def. (bottom)
        .word   $5c05,$8d7d,$0008,$0008  ; $0c: hp
        .word   $5c45,$8d85,$000c,$0008  ; $0d: gauge
        .word   $5dbd,$8d57,$0018,$0006  ; $0e:
        .word   $5d31,$8d17,$000e,$0005  ; $0f: row (short)
        .word   $5d77,$8d2f,$000e,$0005  ; $10: def. (short)
        .word   $5ecd,$8d57,$0014,$0008  ; $11:
        .word   $5b95,$8d6f,$000e,$0008  ; $12:

; ------------------------------------------------------------------------------

; menu list text data (draws one line of each list)

MagicListText:
@e036:  .byte   $05,$03,$04,$21,$0f,$00,$ff,$ff,$04,$21,$0f,$00,$05,$0a,$00

LoreListText:
@e045:  .byte   $ff,$ff,$ff,$04,$21,$19,$00,$00

MagitekListText:
@e04d:  .byte   $05,$04,$04,$21,$06,$00,$05,$03,$04,$21,$06,$00,$00

DanceListText:
@e05a:  .byte   $05,$04,$04,$21,$17,$00,$05,$02,$04,$21,$17,$00,$00

RageListText:
@e067:  .byte   $05,$04,$04,$21,$18,$00,$05,$02,$04,$21,$18,$00,$00

ItemListText:
@e074:  .byte   $05,$04,$04,$21,$0e,$00,$c1,$02,$00,$ff,$ff,$12,$00,$ff,$00

; this draws the magic list below the summon window, and not the
; text in the summon window itself
SummonMagicListText:
@e083:  .byte   $ff,$ff,$84,$ac,$a9,$9e,$ab,$ff,$ff,$04,$21,$1a,$00,$05,$04,$03
        .byte   $2c,$03,$2f,$ff,$16,$00,$00

; ------------------------------------------------------------------------------

; pointers to menu text
MenuTextPtrs:
@e09a:  make_ptr_tbl_abs MenuText, $23

; menu text region $22:
MenuText_0022:
@e0e0:  .byte   $05,$12,$01,$05,$12,$01,$05,$12,$01,$05,$12,$00

; menu text region $1e: swdtech numbers and gauge
MenuText_001e:
@e0ec:  .byte   $ff,$ff,$04,$21,$b5,$04,$21,$b6,$04,$21,$b7,$04,$21,$b8,$04,$21
        .byte   $b9,$04,$21,$ba,$04,$21,$bb,$04,$21,$bc,$ff,$ff,$01,$04,$35,$ff
        .byte   $03,$f9,$03,$f0,$03,$f0,$03,$f0,$03,$f0,$03,$f0,$03,$f0,$03,$f0
        .byte   $03,$f0,$03,$fa,$ff,$01,$05,$0c,$00

; menu text region $0e-$11: current hp (one character)
MenuText_000e:
@e125:  .byte   $07,$01,$00

MenuText_000f:
@e128:  .byte   $08,$01,$00

MenuText_0010:
@e12b:  .byte   $09,$01,$00

MenuText_0011:
@e12e:  .byte   $0a,$01,$00

; menu text region $12-$15: atb gauge or max hp (one character)
MenuText_0012:
@e131:  .byte   $07,$02,$00

MenuText_0013:
        .byte   $08,$02,$00

MenuText_0014:
        .byte   $09,$02,$00

MenuText_0015:
        .byte   $0a,$02,$00

; menu text region $16-$19: morph gauge
MenuText_0016:
@e13d:  .byte   $04,$39,$07,$05,$00

MenuText_0017:
        .byte   $04,$39,$08,$05,$00

MenuText_0018:
        .byte   $04,$39,$09,$05,$00

MenuText_0019:
        .byte   $04,$39,$0a,$05,$00

; menu text region $1a-$1d: condemned gauge
MenuText_001a:
@e151:  .byte   $04,$3d,$07,$06,$00

MenuText_001b:
@e156:  .byte   $04,$3d,$08,$06,$00

MenuText_001c:
@e15b:  .byte   $04,$3d,$09,$06,$00

MenuText_001d:
@e160:  .byte   $04,$3d,$0a,$06,$00

; menu text region $08: "row"
MenuText_0008:
@e165:  .byte   $ff,$ff,$91,$a8,$b0,$00

; menu text region $09: "def."
MenuText_0009:
@e16b:  .byte   $ff,$ff,$83,$9e,$9f,$c5,$00

; menu text region $06: "r-hand", "l-hand"
MenuText_0006:
@e172:  .byte   $05,$03,$91,$c4,$87,$9a,$a7,$9d,$05,$09,$8b,$c4,$87,$9a,$a7,$9d
        .byte   $05,$07,$00

; menu text region $07: current mp/max mp (for all characters)
MenuText_0007:
@e185:  .byte   $07,$03,$03,$15,$07,$04,$01
        .byte   $08,$03,$03,$15,$08,$04,$01
        .byte   $09,$03,$03,$15,$09,$04,$01
        .byte   $0a,$03,$03,$15,$0a,$04,$00

; menu text region $0a-$0d: current mp/max mp (for one character)
MenuText_000a:
@e1a1:  .byte   $07,$03,$03,$15,$07,$04,$00

MenuText_000b:
        .byte   $08,$03,$03,$15,$08,$04,$00

MenuText_000c:
        .byte   $09,$03,$03,$15,$09,$04,$00

MenuText_000d:
        .byte   $0a,$03,$03,$15,$0a,$04,$00

; menu text region $21: clear status names
MenuText_0021:
@e1bd:  .byte   $10,$1f,$01,$10,$1f,$01,$10,$1f,$01,$10,$1f,$00

; menu text region $00: monster names
MenuText_0000:
@e1c9:  .byte   $0b,$00,$ff,$01,$0b,$01,$ff,$01,$0b,$02,$ff,$01,$0b,$03,$ff,$00

; menu text region $01: character names
MenuText_0001:
@e1d9:  .byte   $07,$00,$ff,$01,$08,$00,$ff,$01,$09,$00,$ff,$01,$0a,$00,$ff,$00

; menu text region $02: current hp (all characters)
MenuText_0002:
@e1e9:  .byte   $07,$01,$01,$08,$01,$01,$09,$01,$01,$0a,$01,$00

; menu text region $03: atb gauge or max hp (all characters)
MenuText_0003:
@e1f5:  .byte   $07,$02,$01,$08,$02,$01,$09,$02,$01,$0a,$02,$00

; menu text region $1f: clear battle commands
MenuText_001f:
@e201:  .byte   $05,$06,$04,$21,$0d,$00,$05,$05,$01,$ff,$ff,$04,$21,$0d,$00,$16
        .byte   $16,$16,$ff,$ff,$04,$21,$0d,$00,$ff,$01,$16,$05,$06,$04,$21,$0d
        .byte   $00,$05,$05,$01,$05,$13,$00

; menu text region $20:
MenuText_0020:
@e228:  .byte   $ff,$04,$21,$11,$00,$ff,$16,$01
        .byte   $ff,$04,$21,$11,$00,$ff,$16,$01
        .byte   $ff,$04,$21,$11,$00,$ff,$16,$01
        .byte   $ff,$04,$21,$11,$00,$ff,$16,$00

; menu text region $04: battle command names
MenuText_0004:
@e248:  .byte   $ff,$ff,$04,$21,$0d,$00,$ff,$01
        .byte   $ff,$ff,$04,$21,$0d,$00,$ff,$01
        .byte   $ff,$ff,$04,$21,$0d,$00,$ff,$01
        .byte   $ff,$ff,$04,$21,$0d,$00,$ff,$00

; menu text region $05:
MenuText_0005:
@e268:  .byte   $ff,$ff,$04,$21,$1b,$00,$ff,$01
        .byte   $ff,$ff,$04,$21,$1b,$00,$ff,$01
        .byte   $ff,$ff,$04,$21,$1b,$00,$ff,$01
        .byte   $ff,$ff,$04,$21,$1b,$00,$ff,$00

; ------------------------------------------------------------------------------

; color palettes
_c2e288:
@e288:  .word   $0000,$31ad,$190a,$1d2b,$296b,$2129,$1d08,$1ce7
        .word   $18e7,$18a5,$0823,$0c64,$294a,$18c6,$0ca9,$0866
        .word   $3800,$4af8,$3a96,$2a34,$1dd2,$112e,$0ca9,$0866
        .word   $0823,$25d4,$14ed,$10a8,$0865,$0443,$2946,$2107
        .word   $3800,$09d3,$0cb2,$11cb,$1d70,$14ec,$10a8,$0c84
        .word   $0823,$420e,$296a,$1d70,$5273,$09d3,$0cb2,$11cb

_c2e2e8:
@e2e8:  .word   $0000,$0c84,$0c44,$0c64,$1084,$0c43,$0c62,$0c42
        .word   $0c42,$0c43,$0823,$0823,$0c63,$0c43,$0823,$0823
        .word   $3800,$112e,$0ca9,$18a7,$1485,$1444,$1443,$1023
        .word   $0823,$0823,$1046,$0845,$0824,$0823,$7fd4,$0823
        .word   $3800,$5230,$4914,$3deb,$0c64,$0845,$0824,$0823
        .word   $0823,$0c64,$0c44,$65b0,$1065,$0863,$0844,$0c62

; ------------------------------------------------------------------------------

; menu state data
_c2e348:
@e348:  .byte   $01,$05,$00,$00  ; command select
        .byte   $01,$32,$39,$08
        .byte   $01,$0a,$00,$00
        .byte   $01,$0c,$00,$00
        .byte   $01,$0e,$00,$00
        .byte   $01,$10,$00,$00
        .byte   $01,$16,$00,$00
        .byte   $01,$1b,$00,$00
        .byte   $01,$0a,$00,$00
        .byte   $01,$1e,$00,$00
        .byte   $01,$21,$00,$00
        .byte   $01,$24,$00,$00
        .byte   $01,$27,$00,$00
        .byte   $01,$2a,$00,$00
        .byte   $01,$2d,$00,$00
        .byte   $01,$30,$00,$00
        .byte   $01,$37,$00,$00
        .byte   $01,$00,$00,$00
        .byte   $01,$41,$00,$00

; ------------------------------------------------------------------------------

; tile pointers for damage numeral sprites
_c2e394:
@e394:  .byte   $c0,$c4,$c8,$cc

_c2e398:
@e398:  .byte   $60,$64,$68,$6c,$80,$84,$88,$8c,$a0,$a4

; ------------------------------------------------------------------------------

; y offsets for float status
FloatStatusOffsetTbl:
@e3a2:  .byte   $fb,$fa,$f9,$f8,$f8,$f9,$fa,$fb

; ------------------------------------------------------------------------------

; glowing outline frame delay (1 byte per character)
StatusOutlineDelayTbl:
@e3aa:  .byte   $00,$08,$10,$18

; ------------------------------------------------------------------------------

; skin colors for poison, zombie, and berserk status
StatusSkinColorTbl:
@e3ae:  .word   $7edb,$4dd3
@e3b2:  .word   $3af5,$3210
@e3b6:  .word   $013f,$001f

; glowing outline colors for character status (reflect, safe, shell, haste, slow, vanish, unused, stop)
StatusOutlineColorTbl:
@e3ba:  .word   $6a60,$031f,$0b64,$001a,$7fff,$7fff,$001a,$7c1f

; ------------------------------------------------------------------------------

; x offsets for character status sprites (none, poison, muddle, dark, berserk/rage, mute, psyche/sleep)
StatusSpriteOffsetTbl:
@e3ca:  .word   $0000,$0000,$0000,$0002,$0000,$0010,$0020,$0000

; ------------------------------------------------------------------------------

; sprite data for character status sprites (none, poison, muddle, dark, berserk/rage, mute, psyche/sleep)
StatusSpriteData:
@e3da:  .byte   $00,$f8,$20,$0a
        .byte   $00,$f8,$22,$0a
        .byte   $ff,$fa,$24,$08
        .byte   $00,$f8,$26,$0c
        .byte   $f8,$f8,$28,$08
        .byte   $f0,$f8,$2a,$08
        .byte   $00,$10,$2c,$0c

; sprite data for character status sprites (character kneeling)
        .byte   $00,$fd,$20,$0a
        .byte   $00,$fd,$22,$0a
        .byte   $ff,$ff,$24,$08
        .byte   $00,$fd,$26,$0c
        .byte   $f8,$fd,$28,$08
        .byte   $f0,$fd,$2a,$08
        .byte   $00,$10,$2c,$0c

; ------------------------------------------------------------------------------

_c2e412:
super_offset:
@e412:  .word   $8000,$6000,$4000,$2000

; ------------------------------------------------------------------------------

; pointers to character graphics vram buffers (+$7f0000)
_c2e41a:
player_pat_put_poi:
@e41a:  .word   $a000,$a080,$a100,$a180

; ------------------------------------------------------------------------------

; pointers to character sprite sheet buffers (+$7f0000)
_c2e422:
player_pat_get_poi:
@e422:  .word   $0000,$2000,$4000,$6000

; ------------------------------------------------------------------------------

; unused ???
_c2e42a:
obj_mask_tbl:
@e42a:  .word   $a000,$0000,$a000,$0000
        .word   $a000,$0000,$a000,$0000,$a000,$0000

; ------------------------------------------------------------------------------

; character h-flip for attack types (normal, back, pincer, side)
CharFlipTbl:
@e43e:  .byte   $00,$00,$00,$00
        .byte   $40,$40,$40,$40
        .byte   $40,$00,$40,$00
        .byte   $00,$00,$40,$40

; ------------------------------------------------------------------------------

; character hand swap for attack types
CharDirTbl:
@e44e:  .byte   $00,$00,$00,$00
        .byte   $01,$01,$01,$01
        .byte   $01,$00,$01,$00
        .byte   $00,$00,$01,$01

; ------------------------------------------------------------------------------

; magitek color palette locations (fills an empty character slot color palette)
MagitekPalOffsetTbl:
@e45e:  .byte   $08,$0a,$0c,$0e

; ------------------------------------------------------------------------------

; battle bgs which do not change for dance
DanceNoChangeBGTbl:
@e462:  .byte   0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1
        .byte   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
        .byte   1,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0
        .byte   0,0,1,1,1,1,1,1

; ------------------------------------------------------------------------------

; graphical actions when waiting to attack (for each command)
command_act_tbl:
_c2e49a:
@e49a:  .byte   $0b,$0b,$09,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b
        .byte   $0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$09,$09,$0b,$0b,$00,$0b,$0b
        .byte   $0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b

; ------------------------------------------------------------------------------

last_vram_offset:
_c2e4c3:
@e4c3:  .word   $3c00,$3800,$3400,$3000,$0c00,$0800,$0400,$0000

last_get_offset:
_c2e4d3:
@e4d3:  .word   $c63f,$be3f,$b63f,$ae3f,$dc00,$d400,$cc00,$c400

last_get_bank:
_c2e4e3:
@e4e3:  .byte   $7e,$7e,$7e,$7e,$7f,$7f,$7f,$7f

; ------------------------------------------------------------------------------

; pointers to monster exit animation scripts
MonsterExitScriptPtrs:
@e4eb:  make_ptr_tbl_abs MonsterExitScript, 18

; pointers to monster entry animation scripts
MonsterEntryScriptPtrs:
@e50f:  make_ptr_tbl_abs MonsterEntryScript, 18

; ------------------------------------------------------------------------------

; monster entry/exit animation scripts
MonsterEntryScript_000e:
@e533:  .byte   $00,$04,$9a,$15,$01,$ff

MonsterExitScript_000e:
@e539:  .byte   $00,$03,$8c,$15,$01,$ff

MonsterExitScript_0000:
MonsterExitScript_000d:
MonsterExitScript_000f:
MonsterExitScript_0010:
MonsterExitScript_0011:
MonsterEntryScript_0000:
MonsterEntryScript_000c:
MonsterEntryScript_000d:
MonsterEntryScript_0010:
MonsterEntryScript_0011:
@e53f:  .byte   $ff

MonsterEntryScript_0001:
@e540:  .byte   $00,$04,$b0,$13,$01,$ff

MonsterExitScript_0001:
@e546:  .byte   $00,$03,$54,$15,$01,$ff

MonsterEntryScript_0002:
@e54c:  .byte   $00,$04,$cc,$13,$01,$ff

MonsterExitScript_0002:
@e552:  .byte   $00,$03,$be,$13,$01,$ff

MonsterEntryScript_0003:
@e558:  .byte   $00,$04,$e8,$13,$01,$ff

MonsterExitScript_0003:
@e55e:  .byte   $00,$03,$da,$13,$01,$ff

MonsterEntryScript_0004:
@e564:  .byte   $00,$04,$04,$14,$01,$ff

MonsterExitScript_0004:
@e56a:  .byte   $00,$03,$f6,$13,$01,$ff

MonsterEntryScript_0005:
@e570:  .byte   $00,$04,$20,$14,$01,$ff

MonsterExitScript_0005:
@e576:  .byte   $00,$03,$12,$14,$01,$ff

MonsterEntryScript_0006:
@e57c:  .byte   $00,$04,$3c,$14,$01,$ff

MonsterExitScript_0006:
@e582:  .byte   $00,$03,$2e,$14,$01,$ff

MonsterEntryScript_0008:
@e588:  .byte   $00,$04,$58,$14,$01,$ff

MonsterExitScript_0008:
@e58e:  .byte   $00,$03,$4a,$14,$01,$ff

MonsterEntryScript_0009:
@e594:  .byte   $00,$04,$74,$14,$01,$ff

MonsterExitScript_0009:
@e59a:  .byte   $00,$03,$66,$14,$01,$ff

MonsterEntryScript_000a:
@e5a0:  .byte   $00,$04,$90,$14,$01,$ff

MonsterExitScript_000a:
@e5a6:  .byte   $00,$03,$82,$14,$01,$ff

MonsterEntryScript_000b:
@e5ac:  .byte   $00,$04,$ac,$14,$01,$ff

MonsterExitScript_000b:
@e5b2:  .byte   $00,$03,$9e,$14,$01,$ff

MonsterExitScript_000c:
@e5b8:  .byte   $00,$03,$62,$15,$01,$ff

; unused
@e5be:  .byte   $00,$e0,$ff

MonsterEntryScript_0007:
@e5c1:  .byte   $00,$04,$b6,$15,$01,$ff

MonsterExitScript_0007:
@e5c7:  .byte   $00,$03,$a8,$15,$01,$ff

MonsterEntryScript_000f:
@e5cd:  .byte   $00,$04,$c4,$15,$01,$ff

; ------------------------------------------------------------------------------

; pointers to misc. monster animation data
MonsterAnimScriptPtrs:
@e5d3:  make_ptr_tbl_abs MonsterAnimScript, 14

; ------------------------------------------------------------------------------

; misc. monster animation scripts (ai command $fa, command $2b)
MonsterAnimScript_000d:
@e5ef:  .byte   $00,$04,$0a,$16,$01,$ff

MonsterAnimScript_000c:
@e5f5:  .byte   $00,$04,$ee,$15,$01,$ff

MonsterAnimScript_000b:
@e5fb:  .byte   $00,$04,$e0,$15,$01,$ff

MonsterAnimScript_000a:
@e601:  .byte   $00,$04,$d2,$15,$01,$ff

MonsterAnimScript_0005:
@e607:  .byte   $00,$05,$46,$15,$01,$fe

MonsterAnimScript_0006:
@e60d:  .byte   $00,$05,$38,$15,$01,$fe

MonsterAnimScript_0000:
MonsterAnimScript_0009:
@e613:  .byte   $00,$04,$fc,$0e,$01,$ff

MonsterAnimScript_0001:
@e619:  .byte   $00,$04,$ee,$0e,$01,$ff

MonsterAnimScript_0002:
@e61f:  .byte   $00,$04,$e0,$0e,$01,$ff

MonsterAnimScript_0003:
@e625:  .byte   $00,$04,$f2,$14,$01,$ff

MonsterAnimScript_0004:
@e62b:  .byte   $00,$04,$e4,$14,$01,$ff

MonsterAnimScript_0007:
@e631:  .byte   $00,$04,$7e,$15,$01,$ff

MonsterAnimScript_0008:
@e637:  .byte   $00,$04,$70,$15,$01,$ff

; ------------------------------------------------------------------------------

; [ execute misc. monster animation (ai command $fa, command $2b) ]

DoMonsterAnim:
@e63d:  ldy     #2
        lda     ($76),y
        sta     $e9fc       ; target monster
        dey
        lda     ($76),y     ; ai command $fa subcommand
        cmp     #$09
        bne     @e659       ; branch if not $09 (play sound effect)
        iny
        lda     ($76),y     ; pan
        sta     $10
        iny
        lda     ($76),y     ; sfx id
        jsl     PlayAnimSfx_far
        rtl
@e659:  longa
        asl
        tax
        lda     f:MonsterAnimScriptPtrs,x
        sta     $8f
        shorta0
        bra     _e6b1

; ------------------------------------------------------------------------------

; [ execute monster entry/exit animation ]

DoMonsterEntryExit:
@e668:  jsr     WaitLine160_near
        ldy     #1
        lda     ($76),y     ; entry/exit type
        cmp     #$0d
        bne     @e67a       ; branch if not $0d (flash in/out)
        jsr     _c2e806
        jmp     _c2e88e
@e67a:  cmp     #$11
        bne     @e691       ; branch if not $11 (final kefka death)

; final kefka death
        jsr     _c2e806
        jsl     KefkaDeathAnim_far
        lda     #$ff
        sta     $6191
        lda     $2f2f
        sta     $201e
        rtl

; all other monster entry/exit animations
@e691:  pha
        jsr     _c2e806
        pla
        longa
        asl
        tax
        lda     $e9fb
        and     #$00ff
        beq     @e6a8       ; branch if monsters are entering
        lda     f:MonsterExitScriptPtrs,x
        bra     @e6ac
@e6a8:  lda     f:MonsterEntryScriptPtrs,x
@e6ac:  sta     $8f
        shorta0

mon_mode_chg_main:
_e6b1:  lda     #$c2        ; bank $c2
        sta     $91
@e6b5:  lda     [$8f]
        cmp     #$ff
        beq     @e6cb       ; branch if end of data
        cmp     #$fe
        beq     @e6d0       ;
        asl
        tax
        jsr     (.loword(MonsterAnimCmdTbl),x)
        ldy     $8f
        iny
        sty     $8f
        bra     @e6b5
@e6cb:  lda     #$ff
        sta     $6191
@e6d0:  lda     $2f2f
        sta     $201e
        rtl

; ------------------------------------------------------------------------------

; monster animation script command jump table
mode_jmp_tbl:
MonsterAnimCmdTbl:
@e6d7:  .addr   MonsterAnimCmd_00
        .addr   MonsterAnimCmd_01
        .addr   MonsterAnimCmd_02
        .addr   MonsterAnimCmd_03
        .addr   MonsterAnimCmd_04
        .addr   MonsterAnimCmd_05

; ------------------------------------------------------------------------------

; [  ]

_c2e6e3:
bit_num_chg_loval:
@e6e3:  ldx     $00
@e6e5:  lsr
        bcs     @e6f0
        inx
        cpx     #8
        bne     @e6e5
        clr_a
        rts
@e6f0:  txa
        and     #$07
        rts

; ------------------------------------------------------------------------------

; [ monster animation script command $03:  ]

; +b1: pointer to animation data (+$d07fb2)

MonsterAnimCmd_03:
@e6f4:  jsl     _c2fe21
        ldy     #$0001
        longa
        lda     [$8f],y
        sta     $1e
        inc     $8f
        inc     $8f
        shorta0
        lda     $e9fb
        jsr     _c2e6e3
        clc
        adc     #$04
        sta     $2c6f
        lda     $e9fb
        sta     $2c71
        sta     $2c73
        sta     $613e
        stz     $613d
        stz     $2c70
        stz     $2c72
        lda     #$c0
        sta     $2c6e
        jsl     _c1b880     ; execute event animation
        rts

; ------------------------------------------------------------------------------

; [ monster animation script command $04:  ]

; +b1: pointer to animation data (+$d07fb2)

MonsterAnimCmd_04:
@e733:  jsl     _c2fe21
        ldy     #$0001
        longa
        lda     [$8f],y
        sta     $1e
        inc     $8f
        inc     $8f
        shorta0
        lda     $e9fc
        jsr     _c2e6e3
        clc
        adc     #$04
        sta     $2c6f
        lda     $e9fc
        sta     $2c71
        sta     $2c73
        sta     $613e
        stz     $613d
        stz     $2c70
        stz     $2c72
        lda     #$c0
        sta     $2c6e
        jsl     _c1b880     ; execute event animation
        rts

; ------------------------------------------------------------------------------

; [ monster animation script command $05:  ]

; +b1: pointer to animation data (+$d07fb2)

MonsterAnimCmd_05:
@e772:  jsl     _c2fe21
        ldy     #$0001
        longa
        lda     [$8f],y
        sta     $1e
        inc     $8f
        inc     $8f
        shorta0
        stz     $2c6f
        lda     #$0f
        sta     $2c70
        sta     $2c72
        sta     $613d
        stz     $613e
        stz     $2c71
        stz     $2c73
        lda     #$00
        sta     $2c6e
        jsl     _c1b880     ; execute event animation
        rts

; ------------------------------------------------------------------------------

; [ monster animation script command $02:  ]

; b1:

MonsterAnimCmd_02:
@e7a7:  lda     $e9fb
        sta     $2c71
        sta     $2c73
        sta     $613e
        stz     $613d
        stz     $2c70
        stz     $2c72
        jsr     _c2e6e3
        pha
        clc
        adc     #$04
        sta     $10
        ora     #$80
        sta     $2c6f
        sta     $613f
        lda     #$c0
        sta     $2c6e
        pla
        longa
        asl7
        tax
        lda     #$0101
        sta     $22
        inc     $8f
        lda     [$8f]
        sta     $24
        inc     $8f
        shorta0
        lda     $10
        ora     #$80
        sta     $10
        lda     #$c2
        sta     $26
        jsl     _c1b1c0
        rts

; ------------------------------------------------------------------------------

; [ monster animation script command $00: clear animations ]

MonsterAnimCmd_00:
@e7fc:  jsl     InitEventAnim_far
        rts

; ------------------------------------------------------------------------------

; [ monster animation script command $01: execute animations ]

MonsterAnimCmd_01:
@e801:  jsl     ExecEventAnim_far
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2e806:
get_mode_bit:
@e806:  lda     $201e
        sta     $e9fa
        ldy     #2
        lda     ($76),y
        sta     $e9fb
        eor     #$ff
        sta     $10
        iny
        lda     ($76),y
        sta     $e9fc
        lda     $201e
        and     $10
        ora     $e9fc
        sta     $e9fd
        lda     $e9fb
        bne     @e84b
        lda     $e9fa
        eor     #$ff
        sta     $10
        lda     $e9fc
        and     $10
        sta     $e9fc
        eor     #$ff
        sta     $6191
        lda     $e9fd
        sta     $201e
        sta     $61ab
@e84b:  rts

; ------------------------------------------------------------------------------

; ??? number of frames to wait
_c2e84c:
@e84c:  .byte   $0c,$0b,$0a,$09,$08,$07,$06,$07,$04,$03,$02,$02,$02,$02,$02,$02
        .byte   $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02

; ??? number of frames to wait
_c2e86c:
@e86c:  .byte   $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
        .byte   $02,$02,$02,$02,$02,$02,$02,$02,$03,$04,$05,$06,$07,$08,$09,$0a
        .byte   $0b,$0c

; ------------------------------------------------------------------------------

; [  ]

_c2e88e:
mode_chg_00:
@e88e:  stz     $ecb3
        lda     #$ff
        sta     $6191
@e896:  lda     $e9fa
        sta     $201e
        lda     $ecb3
        tax
        lda     f:_c2e84c,x
        jsl     WaitA_far
        lda     $e9fc
        sta     $201e
        lda     $ecb3
        tax
        lda     f:_c2e86c,x
        jsl     WaitA_far
        inc     $ecb3
        lda     $ecb3
        cmp     #$20
        bne     @e896
        lda     #$ff
        sta     $6191
        lda     $2f2f
        sta     $201e
        rtl

; ------------------------------------------------------------------------------

; [ execute battle animation init function ]

ExecAnimType:
@e8d0:  and     #$7f
        asl
        tax
        jsr     (.loword(AnimTypeTbl),x)
        rtl

; ------------------------------------------------------------------------------

; battle animation init function jump table
AnimTypeTbl:
@e8d8:  .addr AnimType_00
        .addr AnimType_01
        .addr AnimType_02
        .addr AnimType_03
        .addr AnimType_04
        .addr AnimType_05
        .addr AnimType_06
        .addr AnimType_07
        .addr AnimType_08
        .addr AnimType_09
        .addr AnimType_0a
        .addr AnimType_0b
        .addr AnimType_0c
        .addr AnimType_0d
        .addr AnimType_0e
        .addr AnimType_0f
        .addr AnimType_10
        .addr AnimType_11
        .addr AnimType_12
        .addr AnimType_13
        .addr AnimType_14
        .addr AnimType_15
        .addr AnimType_16
        .addr AnimType_17
        .addr AnimType_18
        .addr AnimType_19
        .addr AnimType_1a
        .addr AnimType_1b
        .addr AnimType_1c
        .addr AnimType_1d
        .addr AnimType_1e
        .addr AnimType_1f
        .addr AnimType_20
        .addr AnimType_21
        .addr AnimType_22
        .addr AnimType_23
        .addr AnimType_24
        .addr AnimType_25
        .addr AnimType_26
        .addr AnimType_27
        .addr AnimType_28
        .addr AnimType_29
        .addr AnimType_2a
        .addr AnimType_2b
        .addr AnimType_2c
        .addr AnimType_2d
        .addr AnimType_2e
        .addr AnimType_2f
        .addr AnimType_30
        .addr AnimType_31
        .addr AnimType_32
        .addr AnimType_33
        .addr AnimType_34
        .addr AnimType_35
        .addr AnimType_36
        .addr AnimType_37
        .addr AnimType_38
        .addr AnimType_39
        .addr AnimType_3a
        .addr AnimType_3b
        .addr AnimType_3c
        .addr AnimType_3d
        .addr AnimType_3e
        .addr AnimType_3f
        .addr AnimType_40
        .addr AnimType_41
        .addr AnimType_42
        .addr AnimType_43
        .addr AnimType_44
        .addr AnimType_45
        .addr AnimType_46
        .addr AnimType_47
        .addr AnimType_48
        .addr AnimType_49
        .addr AnimType_4a
        .addr AnimType_4b
        .addr AnimType_4c
        .addr AnimType_4d
        .addr AnimType_4e
        .addr AnimType_4f
        .addr AnimType_50
        .addr AnimType_51
        .addr AnimType_52
        .addr AnimType_53
        .addr AnimType_54
        .addr AnimType_55
        .addr AnimType_56
        .addr AnimType_57
        .addr AnimType_58
        .addr AnimType_59
        .addr AnimType_5a
        .addr AnimType_5b
        .addr AnimType_5c
        .addr AnimType_5d
        .addr AnimType_5e
        .addr AnimType_5f
        .addr AnimType_60
        .addr AnimType_61
        .addr AnimType_62
        .addr AnimType_63
        .addr AnimType_64
        .addr AnimType_65
        .addr AnimType_66
        .addr AnimType_67
        .addr AnimType_68
        .addr AnimType_69
        .addr AnimType_6a
        .addr AnimType_6b
        .addr AnimType_6c
        .addr AnimType_6d
        .addr AnimType_6e
        .addr AnimType_6f
        .addr AnimType_70
        .addr AnimType_71
        .addr AnimType_72
        .addr AnimType_73
        .addr AnimType_74
        .addr AnimType_75
        .addr AnimType_76
        .addr AnimType_77
        .addr AnimType_78
        .addr AnimType_79
        .addr AnimType_7a
        .addr AnimType_7b
        .addr AnimType_7c
        .addr AnimType_7d
        .addr AnimType_7e

; ------------------------------------------------------------------------------

; [ battle animation init $0d:  ]

AnimType_0d:
@e9d6:  rts

; ------------------------------------------------------------------------------

; [ battle animation init $7e: umaro's throw ]

AnimType_7e:
@e9d7:  inc     $60ac       ; pause bg1 animation threads
        clr_axy
@e9dd:  lda     $2ec6,x
        cmp     #$0d
        beq     @e9f0
        iny
        txa
        clc
        adc     #$20
        tax
        cpx     #$0080
        bne     @e9dd
        rts
@e9f0:  sty     $10
        tya
        asl
        tay
        longa
        lda     $8033,y
        sec
        sbc     #$0008
        sta     $14
        lda     $803b,y
        sec
        sbc     #$0008
        sta     $16
        shorta0
        clr_ax
@ea0e:  lda     $6a38,x
        sta     $6a39,x
        lda     $10
        sta     $6a38,x
        longa
        lda     $6f7e,x
        sta     $6f82,x
        lda     $6f80,x
        sta     $6f84,x
        lda     $14
        sta     $6f7e,x
        lda     $16
        sta     $6f80,x
        txa
        clc
        adc     #$0080
        tax
        shorta0
        cpx     #$0500
        bne     @ea0e
        inc     $e9ee
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $7d: tonic, potion, tincture, ether, elixir, megalixir, antidote, soft ]

AnimType_7d:
@ea43:  lda     #$05
        sta     $26
        lda     #$02
        jsr     CopyThread
        lda     #$03
        jsr     SetNumThreads
        jmp     _c2f9eb

; ------------------------------------------------------------------------------

; [ wait for scanline 160 ]

WaitLine160_near:
@ea54:  lda     f:hSTAT78
        lda     f:hSLHV     ; latch horizontal/vertical counter
        lda     f:hOPVCT     ; vertical scanline counter
        cmp     #$a0
        bcc     @ea54       ; branch if less than 160
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $7c:  ]

AnimType_7c:
@ea65:  jsr     AnimType_1d
        lda     $896f
        ora     #$08
        sta     $896f
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $7b:  ]

AnimType_7b:
@ea71:  jsr     WaitLine160_near
        lda     $898d
        and     #$fe
        sta     $898d
        jsr     AnimType_1d
        lda     $896f
        ora     #$08
        sta     $896f
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $7a: transforming into magicite ]

AnimType_7a:
@ea88:  jsr     AnimType_2a
        lda     #$04
        sta     $26
        lda     #$07
        jsr     CopyThread
        lda     #$08
        jsr     SetNumThreads
        inc     $60ad       ; pause bg3 animation threads
        rts

; ------------------------------------------------------------------------------

; esper graphics (shiva, kirin, bismark, carbunkl, terrato)
_c2ea9d:
@ea9d:  .word   $0182,$0191,$0187,$0193,$0184

; ------------------------------------------------------------------------------

; [ battle animation init $79: event animation $08-$0c ]

; for event animations with espers, this loads esper graphics to bg1 rather than the sprite layer
; the default sound effect index is used to determine which esper to load (see table at c2/ea9d)

AnimType_79:
@eaa7:  lda     $e9e7       ; default sound effect
        asl
        tax
        longa
        lda     f:_c2ea9d,x
        tax
        shorta0
        jsl     LoadSummonGfxBG1_far
        jmp     LoadSummonPalBG1

; ------------------------------------------------------------------------------

; [ battle animation init $78: echo screen, smoke bomb ]

AnimType_78:
@eabd:  lda     #$03
        sta     $26
        lda     #$03
        jsr     CopyThread
        lda     #$04
        jmp     SetNumThreads

; ------------------------------------------------------------------------------

; [ battle animation init $77: possess ]

AnimType_77:
@eacb:  stz     $7b67
        jsl     ResetSpritePriority_far
        jsl     WaitFrame_far
        jsl     ClearBG3Tiles_far
        jsl     GetAttackerID_far
        pha
        lda     $898d
        pha
        and     #$fe
        sta     $898d
        lda     $896f
        and     #$e7
        ora     #$50
        sta     $896f
        jsl     ClearBG1Tiles_far
        pla
        sta     $898d
        pla
        and     #$03
        asl5
        tax
        clr_ay
@eb05:  lda     $7f80,x
        sta     $7e60,y
        iny
        inx
        cpy     #$0020
        bne     @eb05
        lda     $627d
        and     #$7f
        sta     $627d
        jmp     _c2fa0f

; ------------------------------------------------------------------------------

; [ battle animation init $76: wavecannon ]

AnimType_76:
@eb1d:  jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        stz     $961b       ; circle shape 0 (circle)
        jmp     _c2fa1b

; ------------------------------------------------------------------------------

; [ battle animation init $72: hyperdrive ]

AnimType_72:
@eb2c:  jsr     AnimType_22
        stz     $60ac       ; unpause bg1 animation threads
        jmp     AnimType_32

; ------------------------------------------------------------------------------

; [ battle animation init $75: h-bomb ]

AnimType_75:
@eb35:  jsr     InitMode7
        ldx     #$be3f
        ldy     #$0800
        jsr     LoadMode7AnimGfx
        lda     #$03
        sta     $26
        lda     #$02
        jsr     CopyThread
        lda     #$03
        jmp     SetNumThreads

; ------------------------------------------------------------------------------

; [ battle animation init $74: purifier ]

AnimType_74:
@eb4f:  jsr     InitMode7
        ldx     #$018f      ; crusader (small part)
        phx
        jsl     _c1240a
        jsr     LoadSummonPalBG1
        jsl     ClearBGAnimFrames_far
        plx
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        ldx     #$019c      ; crusader (big part)
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        jsr     _c2f1ca
        jsr     InitCircle
        stz     $961b       ; circle shape 0 (circle)
        lda     #$cc
        sta     f:hW34SEL
        lda     #$01
        jmp     SetNumThreads

; ------------------------------------------------------------------------------

; [ battle animation init $73: soul out ]

AnimType_73:
@eb87:  jsr     AnimType_27
        clr_a
        inc     $60ac       ; pause bg1 animation threads
        jmp     _c2f011

; ------------------------------------------------------------------------------

; [ battle animation init $71: remedy ]

AnimType_71:
@eb91:  jsr     _c2f9eb
        jmp     _c2eefe

; ------------------------------------------------------------------------------

; [ battle animation init $70: revivify, eyedrop ]

AnimType_70:
@eb97:  jsr     AnimType_22
        jsr     AnimType_1d
        stz     $60ac       ; unpause bg1 animation threads
        jsl     _c1aaa1
        lda     $12
        bmi     @ebbb
        and     #$03
        asl5
        tax
        lda     $2ec1,x
        bpl     @ebbb
        stz     $6f2e
        stz     $6f3e
@ebbb:  rts

; ------------------------------------------------------------------------------

; [ battle animation init $6f: slow, x-potion, x-ether ]

AnimType_6f:
@ebbc:  jsr     AnimType_47
        jmp     AnimType_1d

; ------------------------------------------------------------------------------

; [ battle animation init $6e: tigerbreak ]

AnimType_6e:
@ebc2:  ldx     #$019b      ; tigerbreak
        jsl     LoadSummonGfxSprite_far
        clr_ax
@ebcb:  lda     f:BattleCharPal,x   ; character sprite color palette 0
        sta     $7f60,x
        sta     $7d60,x
        inx
        cpx     #$0020
        bne     @ebcb
        jsr     _c2f98b
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $6d: fader ]

AnimType_6d:
@ebe1:  ldx     #$0194      ; phantom
        jsl     LoadSummonGfxBG1_far
        jsr     LoadSummonPalBG1
        jmp     AnimType_03

; ------------------------------------------------------------------------------

; [ battle animation init $6c: tri-dazer ]

AnimType_6c:
@ebee:  ldx     #$018a      ; tritoch
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        jsr     _c2f9c7
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $6b: true edge ]

AnimType_6b:
@ebfe:  jsr     InitMode7
        ldx     #$018c      ; raiden
        phx
        jsl     _c12400
        jsr     LoadSummonPalBG1
        jsl     ClearBGAnimFrames_far
        plx
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        inc     $62b0
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $6a: metamorph ]

AnimType_6a:
@ec1c:  ldx     #$0190      ; ragnarok
        jsl     LoadSummonGfxBG1_far
        jsr     LoadSummonPalBG1
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $69: earth wall ]

AnimType_69:
@ec29:  ldx     #$0196      ; golem
        jsl     LoadSummonGfxBG1_far
        jsr     LoadSummonPalBG1
        jmp     _c2f590

; ------------------------------------------------------------------------------

; [ battle animation init $68: cat rain ]

AnimType_68:
@ec36:  ldx     #$0188      ; stray
        jsl     LoadSummonGfxBG1_far
        jsr     LoadSummonPalBG1
        jmp     AnimType_1c

; ------------------------------------------------------------------------------

; [ battle animation init $67: demi, quartr, reflect???, charm ]

AnimType_67:
@ec43:  lda     #$08
        jsr     _c2f011
        jmp     _c2f9d3

; ------------------------------------------------------------------------------

; [ battle animation init $66: mirager ]

AnimType_66:
@ec4b:  jsr     AnimType_1d
        inc     $60ac       ; pause bg1 animation threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $65: forcefield ]

AnimType_65:
@ec52:  jsr     InitCircle
        lda     #$06
        sta     $961b       ; circle shape 6 (horizontal oval)
        lda     #$cc
        sta     f:hW34SEL
        rts

; ------------------------------------------------------------------------------

; [ load mode 7 animation graphics ]

; +X: graphics offset (+$7e0000, after decompressing graphics to $7eae3f)
; +Y: tile layout offset (+$d8daf2, after decompressing)

LoadMode7AnimGfx:
@ec61:  phx
        phy
        lda     #^AttackGfxMode7
        sta     $f5
        ldx     #.loword(AttackGfxMode7)
        stx     $f3
        lda     #$7e
        sta     $f8
        ldx     #$ae3f
        stx     $f6
        jsl     Decompress_ext
        ply
        plx
        phy
        stz     $e9f0       ;
        dec     $e9f0
        lda     $898d
        and     #$12
        sta     $898d
        lda     #$3f
        sta     $14
        lda     #$7e
        jsl     _c2c027
        phx
        phy
        lda     #^AttackTilesMode7
        sta     $f5
        ldx     #.loword(AttackTilesMode7)
        stx     $f3
        lda     #$7e
        sta     $f8
        ldx     #$ae3f
        stx     $f6
        jsl     Decompress_ext
        ply
        plx
        plx
        phb
        lda     #$7f
        pha
        plb
        ldy     #$c400      ; bg1 tile data buffer
        sty     $10
        lda     #$20        ; 32 rows
        sta     $12
@ecbd:  clr_ay
@ecbf:  lda     $7eae3f,x   ; tile index
        sta     ($10),y
        inx
        iny2
        cpy     #$0040
        bne     @ecbf
        longa
        lda     $10         ; next row
        clc
        adc     #$0100
        sta     $10
        shorta0
        dec     $12
        bne     @ecbd
        plb
        ldx     #$2000
        stx     $10
        ldx     #$c400
        ldy     #$0000
        lda     #$7f
        jsl     WaitTfrVRAM_far
        inc     $e9ee
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $63: s. cross ]

AnimType_63:
@ecf6:  jsr     InitMode7
        ldx     #$b63f
        ldy     #$0000
        jsr     LoadMode7AnimGfx
        longa
        clr_ax
@ed06:  clr_ay
@ed08:  lda     $6f4e,y
        sta     $6a2e,x
        sta     $6a3e,x
        lda     $749e,y
        sta     $6f7e,x
        sta     $6f8e,x
        lda     $79ee,y
        sta     $74ce,x
        sta     $74de,x
        inx2
        iny2
        cpy     #$0010
        bne     @ed08
        txa
        clc
        adc     #$0070
        tax
        cpx     #$0300
        bne     @ed06
        shorta0
        clr_ax
        stz     $10
@ed3e:  lda     $10
        clc
        adc     #$06
        sta     $6a35,x
        clc
        adc     #$06
        sta     $6a45,x
        sta     $10
        inc     $6a36,x
        longa
        txa
        clc
        adc     #$0080
        tax
        shorta0
        cpx     #$0300
        bne     @ed3e
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $64: overcast ]

AnimType_64:
@ed62:  jsr     InitMode7
        ldx     #$ae3f
        ldy     #$0400
        jmp     LoadMode7AnimGfx

; ------------------------------------------------------------------------------

; [ battle animation init $62: mind blast, seize, zinger ]

AnimType_62:
@ed6e:  jsl     ResetSpritePriority_far
        stz     $7b67
        jsl     WaitFrame_far
        jsl     UpdateSpritePriority_far
        lda     $896f
        and     #$ef
        sta     $896f
        jsl     GetAttackerID_far
        lda     $10
        jmp     _c2f322

; ------------------------------------------------------------------------------

; [ battle animation init $61: flare star ]

AnimType_61:
@ed8e:  jsr     _c2f967
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        lda     #$cc
        sta     f:hW34SEL
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $60: goner ]

AnimType_60:
@eda3:  jsr     InitCircle
        stz     $961b       ; circle shape 0 (circle)
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $5f: quasar ]

AnimType_5f:
@edac:  clr_ax
@edae:  lda     #$08
        sta     $10
@edb2:  lda     $7fc411,x   ; bg1 animation tile data
        and     #$e3
        ora     #$10        ; set to palette 4
        sta     $7fc411,x
        lda     $7fc4a1,x
        and     #$e3
        ora     #$10
        sta     $7fc4a1,x
        inx                 ; next tile
        inx
        dec     $10
        bne     @edb2
        longa
        txa                 ; next frame
        clc
        adc     #$0010
        tax
        shorta0
        cpx     #$00a0
        bne     @edae
        jsr     _c2f1ca
        lda     #$08
        sta     $6f55
        lda     #$10
        sta     $6f65
        lda     #$18
        sta     $6f75
        jmp     _c2f9c7

; ------------------------------------------------------------------------------

; [ battle animation init $5e: chocobop, l.4 flare, gp rain, autocrossbow, throw 2 dice ]

AnimType_5e:
@edf5:  jsr     _c2fa1b       ; add bg1, affect sprites and bg2
        lda     #$04        ; frame delay = $04
        jmp     _c2f6da       ; duplicate animation thread (jumps to life 3)

; ------------------------------------------------------------------------------

; [ battle animation init $5d: grandtrain, train ]

AnimType_5d:
@edfd:  stz     $961b       ; circle shape 0 (circle)
        jsr     InitCircle
        lda     #$cc
        sta     f:hW34SEL
        jmp     _c2f9c7

; ------------------------------------------------------------------------------

; [ battle animation init $5c: tekmissile, cleansweep, launcher, missile ]

AnimType_5c:
@ee0c:  jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        ldx     #$0120
        jsr     _c2f178
        jsr     _c2f1ca
        lda     #$08
        sta     $6f55
        lda     #$10
        sta     $6f65
        lda     #$18
        sta     $6f75
        jmp     _c2fa1b

; ------------------------------------------------------------------------------

; [ battle animation init $59: run ]

AnimType_59:
@ee30:  jsr     _c2f098
        lda     $201f
        cmp     #$02
        bne     @ee68
        lda     $201e
        and     $61ab
        and     $2eac                   ; monsters on right side of screen
        beq     @ee48
        clr_a                           ; face left
        bra     @ee4a
@ee48:  lda     #1                      ; face right
@ee4a:  sta     $6f87
        sta     $7007
        sta     $7087
        sta     $7107
        ror3
        and     #$40
        sta     $61be
        sta     $61de
        sta     $61fe
        sta     $621e
        rts
@ee68:  lda     $201f
        cmp     #$03
        bne     @ee75
        inc     $7087
        inc     $7107
@ee75:  rts

; ------------------------------------------------------------------------------

; [ battle animation init $5b: delta hit, evil toot ]

AnimType_5b:
@ee76:  jsr     _c2f1ca
        lda     #$03
        jsr     SetNumThreads
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        stz     $961b       ; circle shape 0 (circle)
        jmp     _c2fa1b

; ------------------------------------------------------------------------------

; [ battle animation init $5a: slimer ]

AnimType_5a:
@ee8d:  jsr     AnimType_0e
        jsr     _c2fa1b
        lda     #$08
        sta     $961b       ; circle shape 8 (slimer blob)
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $58: clear ]

AnimType_58:
@ee99:  jsr     AnimType_1d
        lda     $896f
        ora     #$08
        sta     $896f
        jmp     _c2fa33

; ------------------------------------------------------------------------------

; [ battle animation init $57: sleep, 7-flush, fire ball, love token, meteo ]

AnimType_57:
@eea7:  lda     #$10
        jmp     _c2f011

; ------------------------------------------------------------------------------

; [ battle animation init $56: bolt 3, blow fish, exploder, imp song, virite, net ]

; terra/tritoch lightning

AnimType_56:
@eeac:  lda     #$07
        sta     $26
        lda     #$02
        jsr     CopyThread
        lda     #$03
        jsr     SetNumThreads
        jmp     _c2fa1b

; ------------------------------------------------------------------------------

; [ battle animation init $55: x-fer ]

AnimType_55:
@eebd:  jsr     AnimType_1d
        jsr     InitCircle
        lda     #$cc
        sta     f:hW34SEL
        lda     #$03
        sta     $961b       ; circle shape 3 (beam from top)
        lda     $896f
        ora     #$08
        sta     $896f
        lda     #$02
        jsr     _c2eefe
        jmp     _c2fa33

; ------------------------------------------------------------------------------

; [ battle animation init $54: confuser, 50 gs, revenger ]

AnimType_54:
@eede:  jsr     _c2f973
        jsr     InitCircle
        lda     #$cc
        sta     f:hW34SEL
        stz     $961b       ; circle shape 0 (circle)
        lda     $896f
        and     #$ef
        sta     $896f
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $53: grav bomb ]

AnimType_53:
@eef6:  jsr     _c2f9d3
        inc     $60ac       ; pause bg1 animation threads
        lda     #$02

_c2eefe:
@eefe:  sta     $26
        lda     #$05
        jsr     CopyThread
        lda     #$06
        jmp     SetNumThreads

; ------------------------------------------------------------------------------

; [ battle animation init $52: bio blast ]

AnimType_52:
@ef0a:  jsr     _c2fa1b
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        lda     #$01
        sta     $961b       ; circle shape 1 (bio blast)
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $51: bolt edge, surge, diffuser, flash rain, engulf, slide ]

; vargas' blizzard fist

AnimType_51:
@ef1c:  jmp     _c2f9c7

; ------------------------------------------------------------------------------

; [ battle animation init $50: snare ]

AnimType_50:
@ef1f:  jsr     _c2f98b       ; add bg1, affect bg2
        clr_ax
@ef24:  lda     $7fc401,x   ; bg1 tile data buffer
        and     #$df        ; set tile priority to 0
        sta     $7fc401,x
        inx2                ; affect first 32 tiles (first two rows of frame)
        cpx     #$0040
        bne     @ef24
        jsl     ResetSpritePriority_far
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL     ; enable bg1 in window 2
        lda     #$06
        sta     $961b       ; circle shape 6 (horizontal oval)
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $4f: sneeze, green cherry ]

AnimType_4f:
@ef48:  jmp     _c2f9eb

; ------------------------------------------------------------------------------

; [ battle animation init $4e: fire beam, bolt beam, ice beam, tek laser ]

AnimType_4e:
@ef4b:  inc     a:$0099       ; pause sprite animation threads
        inc     $60ad       ; pause bg3 animation threads
        jsr     _c2f9c7
        lda     #$08
        jmp     _ef5b

; ------------------------------------------------------------------------------

; [ battle animation init $4d: cave in, snowball, lode stone ]

AnimType_4d:
@ef59:  lda     #$10
_ef5b:  sta     $26
        lda     #$02
        jsr     CopyThread
        lda     #$03
        jmp     SetNumThreads

; ------------------------------------------------------------------------------

; [ battle animation init $4c: land slide ]

AnimType_4c:
@ef67:  jsr     AnimType_16
        lda     #$06
        sta     $26
        lda     #$07
        jsr     CopyThread
        lda     #$08
        jsr     SetNumThreads
        jmp     _c2fa27

; ------------------------------------------------------------------------------

; [ battle animation init $4b: specter ]

AnimType_4b:
@ef7b:  jsr     AnimType_4a
        jsl     GetAttackerID_far
        clr_ax
        lda     $10
        asl2
        sta     $12
@ef8a:  lda     $7fc400,x
        cmp     #$ee
        beq     @efb1
        clc
        adc     $12
        sta     $7fc400,x
        sta     $7fc600,x
        lda     $7fc401,x
        ora     #$02
        sta     $7fc401,x
        lda     $7fc601,x
        ora     #$02
        sta     $7fc601,x
@efb1:  inx2
        cpx     #$0040
        bne     @ef8a
        lda     $10
        asl5
        tax
        clr_ay
@efc2:  lda     $7f80,x
        sta     $7e60,y
        inx
        iny
        cpy     #$0020
        bne     @efc2
        jmp     _c2f9d3

; ------------------------------------------------------------------------------

; [ battle animation init $4a: elf fire, fire wall ]

AnimType_4a:
@efd2:  jsr     _c2f9eb
        lda     #$01
        sta     $26
        lda     #$07
        jsr     CopyThread
        lda     #$08
        jmp     SetNumThreads

; ------------------------------------------------------------------------------

; [ battle animation init $49: antlion, lifeshaver ]

AnimType_49:
@efe3:  jsr     _c2f98b
        clr_ax
@efe8:  lda     $7fc401,x
        and     #$df
        sta     $7fc401,x
        inx2
        cpx     #$0020
        bne     @efe8
        jsl     ResetSpritePriority_far
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $48: harvester, scar beam ]

AnimType_48:
@effe:  lda     #$10
        jsr     _c2f66f
        jsl     ResetSpritePriority_far
        ldx     #$0060
        jsl     _c1c3a7
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $47: mute, slow 2, cure 3, sun bath, el nino, blaster, atomic ray, riot blade ]

; water splash

AnimType_47:
@f00f:  lda     #$03

_c2f011:
@f011:  sta     $26
        lda     #$03
        jsr     CopyThread
        lda     #$04
        jsr     SetNumThreads
        jmp     _c2f9eb

; ------------------------------------------------------------------------------

; [ battle animation init $46: moon song ]

AnimType_46:
@f020:  ldx     #$0198      ; fenrir
        jsl     LoadSummonGfxBG1_far
        jsr     LoadSummonPalBG1
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ init mode 7 animation ]

InitMode7:
@f02d:  phb
        lda     #$7f
        pha
        plb
        clr_ax
        longa
        lda     #$003f
@f039:  sta     $c400,x
        sta     $cc00,x
        sta     $d400,x
        sta     $dc00,x
        inx2
        cpx     #$0800
        bne     @f039
        shorta0
        plb
        lda     $898d
        and     #$fe
        sta     $898d
        ldx     #$0100
        stx     $e9c4
        stx     $e9ca
        clr_ax
        stx     $e9c6
        stx     $e9c8
        stx     $e9cc
        stx     $e9ce
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $45: atom edge ]

AnimType_45:
@f070:  jsr     InitMode7
        ldx     #$018b      ; odin
        phx
        jsl     _c12400
        jsr     LoadSummonPalBG1
        jsl     ClearBGAnimFrames_far
        plx
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        inc     $62b0
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $44: sonic dive ]

AnimType_44:
@f08e:  ldx     #$0189      ; palidor
        jsl     LoadSummonGfxBG1_far
        jsr     LoadSummonPalBG1

_c2f098:
magic_type59_main:
@f098:  clr_ayx
@f09b:  lda     $6a39,x
        sta     $6a38,x
        longa
        lda     $6f82,x
        sta     $6f7e,x
        lda     $6f84,x
        sta     $6f80,x
        txa
        clc
        adc     #$0080
        tax
        shorta0
        iny
        cpx     #$0200
        bne     @f09b
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $43: chaos wing ]

AnimType_43:
@f0c1:  ldx     #$0186      ; maduin
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        jsr     _c2fa1b
        jsr     InitCircle
        lda     #$cc
        sta     f:hW34SEL
        stz     $961b       ; circle shape 0 (circle)
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $42: sun flare ]

AnimType_42:
@f0dd:  lda     #$02
        jsr     _c2f66f
        ldx     #$018d      ; bahamut
        jsl     LoadSummonGfxBG1_far
        jsr     LoadSummonPalBG1
        jsr     InitCircle
        lda     #$cc
        sta     f:hW34SEL
        stz     $961b       ; circle shape 0 (circle)
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $41: group hug ]

AnimType_41:
@f0f9:  ldx     #$0199      ; starlet
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        jsr     _c2fa1b
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $40: reviver ]

AnimType_40:
@f109:  ldx     #$0195      ; sraphim
        jsl     LoadSummonGfxBG1_far
        jsr     LoadSummonPalBG1
        jsr     AnimType_1c
        jmp     _c2fa33

; ------------------------------------------------------------------------------

; [ battle animation init $3f: rebirth ]

AnimType_3f:
@f119:  ldx     #$019a      ; phoenix
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        jsr     _c2f9a3
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $3e: heal horn ]

AnimType_3e:
@f129:  ldx     #$0197      ; unicorn
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        jsr     _c2f997
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        stz     $961b       ; circle shape 0 (circle)
        lda     $896f
        and     #$f7
        sta     $896f
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $3d: life guard ]

AnimType_3d:
@f14d:  ldx     #$0191      ; kirin
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        jsr     _c2fa27
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        lda     #$04
        sta     $961b       ; circle shape 4 (vertical oval)
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $3c: ruby power ]

AnimType_3c:
@f16b:  ldx     #$0193      ; carbunkl
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [  ]

_c2f178:
set_circle_line:
@f178:  stx     $10
        clr_ax
        longa
        clr_ax
        lda     #$f708
@f183:  sta     $9a21,x
        inx4
        cpx     $10
        bne     @f183
        shorta0
        inc     $6197
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $3b: justice ]

AnimType_3b:
magic_type3b:
@f195:  ldx     #$018e      ; alexandr
        jsl     LoadSummonGfxBG1_far
        jsr     LoadSummonPalBG1
        jsr     _c2fa0f
        jsl     ResetSpritePriority_far
        ldx     #$0081
        jsl     _c1c3a7
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        ldx     #$0200
        jsr     _c2f178
        jsr     _c2f1ca
        lda     $896f
        and     #$f7
        sta     $896f
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [  ]

_c2f1ca:
magic_type3b_sub:
@f1ca:  stz     $6f56
        ldx     #$0520
@f1d0:  lda     $6a2e,x
        sta     $6a3e,x
        sta     $6a4e,x
        lda     $6f7e,x
        sta     $6f8e,x
        sta     $6f9e,x
        lda     $74ce,x
        sta     $74de,x
        sta     $74ee,x
        inx
        cpx     #$0530
        bne     @f1d0
        inc     $6f66
        lda     #$02
        sta     $6f76
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $3a: hope song ]

AnimType_3a:
@f1fa:  stz     $62ad
        stz     $62ae
        jsr     _c2f66d
        ldx     #$0183      ; siren
        jsl     LoadSummonGfxBG1_far
        jsr     LoadSummonPalBG1
        jsr     _c2fa03
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $39: gem dust ]

AnimType_39:
@f211:  ldx     #$0182      ; shiva
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        jsr     _c2f9c7
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $38: bolt fist ]

AnimType_38:
@f221:  ldx     #$0180      ; ramuh
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        jsr     _c2f9eb       ; add bg2, affect sprites
        jmp     AnimType_0b       ; two animation threads

; ------------------------------------------------------------------------------

; [ battle animation init $37: wall (zoneseek) ]

AnimType_37:
@f231:  ldx     #$0192      ; zoneseek
        jsl     LoadSummonGfxBG1_far
        jsr     LoadSummonPalBG1
        jsr     _c2f9eb       ; add bg2, affect sprites
        jmp     AnimType_0b       ; two animation threads

; ------------------------------------------------------------------------------

; [ battle animation init $36: sea song ]

AnimType_36:
@f241:  stz     $961b       ; circle shape 0 (circle)
        jsr     InitCircle
        lda     #$cc
        sta     f:hW34SEL
        ldx     #$0187      ; bismark
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        jsr     _c2fa1b
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $35: earth aura ]

AnimType_35:
@f25d:  lda     #$06
        sta     $961b       ; circle shape 6 (horizontal oval)
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        ldx     #$0184      ; terrato
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        jsr     _c2f9a3
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $34: demon eye ]

AnimType_34:
@f27b:  ldx     #$0185      ; shoat
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        inc     $62b0
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $33: inferno ]

AnimType_33:
@f289:  ldx     #$0181      ; ifrit
        jsl     LoadSummonGfxSprite_far
        jsr     LoadSummonPalSprite
        jsr     _c2fa27
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $32: ultima ]

AnimType_32:
@f299:  jsr     _c2f9af
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        lda     #$cc
        sta     f:hW34SEL
        lda     #$07
        sta     $961b       ; circle shape 7 (ultima)
        lda     $896f
        and     #$f7
        sta     $896f
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $24: antdot, regen, star prism ]

AnimType_24:
@f2b9:  jsr     AnimType_14
        jmp     AnimType_1d

; ------------------------------------------------------------------------------

; [ battle animation init $08: slash ]

AnimType_08:
@f2bf:  jsr     AnimType_1d
        ldx     #$8402      ; subtract bg3
        stx     $10
        lda     #$13        ; affect sprites, bg1, and bg2
        jsl     SetColorMathHDMA_far
        jsr     InitCircle
        lda     #$cc
        sta     f:hW34SEL
        stz     $961b       ; circle shape 0 (circle)
        jsl     ClearBG3Tiles_far
        lda     $896f       ; 16x16 bg3 tiles
        ora     #$48
        sta     $896f
        clr_ax
        stx     $4af5       ; clear bg3 scroll hdma data
        stx     $4af7
        inc     $60ad       ; pause bg3 animation threads
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2f2f1:
caster_pri_up:
@f2f1:  jsl     GetAttackerID_far
        lda     $10
        bmi     @f304
        asl5
        tay
        lda     #$30
        sta     $61bd,y
@f304:  rts

; ------------------------------------------------------------------------------

; [ battle animation init $06:  ]

AnimType_06:
@f305:  jsl     ResetSpritePriority_far
        stz     $7b67
        jsl     WaitFrame_far
        jsl     UpdateSpritePriority_far
        lda     $896f
        and     #$ef
        sta     $896f
        jsl     _c1aaa1
        lda     $12

_c2f322:
@f322:  and     #$7f
        sec
        sbc     #$04
        jsr     GetBitMask_near
        pha
        jsl     MonstersToBG1_far
        jsr     _c2f2f1
        jsl     TfrBG1Tiles_far
        jsl     WaitFrame_far
        pla
        eor     #$ff
        sta     $60ab
        lda     $627d
        and     #$7f
        sta     $627d
        lda     #$02
        sta     $7b0e       ; 2 monster threads
        sta     $7b0f       ; 2 character threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $29: quake ]

AnimType_29:
@f351:  jsr     AnimType_1f
        lda     #$06
        sta     $961b       ; circle shape 6 (horizontal oval)
        stz     $60ac       ; unpause bg1 animation threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $1f: imp ]

AnimType_1f:
magic_type1f:
@f35d:  inc     $60ac       ; pause bg1 animation threads
        jsr     _c2f9eb
        jsr     InitCircle
        stz     $961b       ; circle shape 0 (circle)
        lda     #$3c
        sta     f:hW12SEL

_c2f36f:
tpri_up:
@f36f:  jsl     _c1aaa1
        lda     $12
        bpl     @f384
        and     #$0f
        sec
        sbc     #$04
        asl
        tay
        lda     #$31
        sta     $80dc,y
        rts
@f384:  and     #$03
        asl5
        tay
        lda     #$30
        sta     $61bd,y
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $1e:  ]

AnimType_1e:
@f392:  lda     #$08
        sta     $26
        lda     #$05
        jsr     CopyThread
        lda     #$06
        jsr     SetNumThreads
        jsr     _c2fa1b
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        lda     #$04
        sta     $961b       ; circle shape 4 (vertical oval)
        inc     $60ac       ; pause bg1 animation threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $20: tekbarrier ]

AnimType_20:
@f3b5:  lda     #$08
        sta     $26
        lda     #$05
        jsr     CopyThread
        lda     #$06
        jsr     SetNumThreads
        jsr     _c2fa03
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        lda     #$cc
        sta     f:hW34SEL
        stz     $961b       ; circle shape 0 (circle)
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $2c:  ]

AnimType_2c:
@f3d9:  jsr     _c2fa1b
        lda     #$cc
        sta     f:hW34SEL
        jsr     InitCircle
        stz     $961b       ; circle shape 0 (circle)
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $2a: x-zone ]

AnimType_2a:
magic_type2a:
@f3e9:  jsr     _c2f9df
        jsr     InitCircle
        lda     #$cc
        sta     f:hW34SEL
        lda     #$02
        sta     $961b       ; circle shape 2 (big blob)
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $31: pearl ]

AnimType_31:
@f3fb:  lda     #$00
        sta     $26
        lda     #$02
        jsr     CopyThread
        lda     #$03
        jsr     SetNumThreads
        lda     $896f
        and     #$f7
        sta     $896f
        jsr     _c2f9bb
        inc     $60ac       ; pause bg1 animation threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $1a: rasp ]

AnimType_1a:
@f418:  lda     #$08
        sta     $26
        lda     #$05
        jsr     CopyThread
        lda     #$06
        jsr     SetNumThreads
        jsr     _c2fa33
        jsr     InitCircle
        lda     #$cc
        sta     f:hW34SEL
        stz     $961b       ; circle shape 0 (circle)
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $04: debilitator ]

AnimType_04:
@f436:  jsr     _c2fa33
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        stz     $961b       ; circle shape 0 (circle)
        jsl     ResetSpritePriority_far
        jsl     GetAttackerID_far
        lda     $10
        jsl     _c1c3ed
        lda     $10
        and     #$03
        asl5
        tay
        lda     #$30
        sta     $61bd,y
        lda     #$02
        sta     $7b0e       ; 2 monster threads
        sta     $7b0f       ; 2 character threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $0c: aurabolt ]

AnimType_0c:
@f46b:  jsr     _c2fa33
        jsr     InitCircle
        lda     #$cc
        sta     f:hW34SEL
        stz     $961b       ; circle shape 0 (circle)
        inc     $60ac       ; pause bg1 animation threads
        inc     $60ad       ; pause bg3 animation threads
        lda     #$02
        sta     $7b0e       ; 2 monster threads
        sta     $7b0f       ; 2 character threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $0a: stunner, spin edge, takedown ]

AnimType_0a:
@f489:  jsr     _c2fa33
        inc     $60ac       ; pause bg1 animation threads
        lda     #$02
        sta     $7b0e       ; 2 monster threads
        sta     $7b0f       ; 2 character threads
        rts

; ------------------------------------------------------------------------------

; [  ]

AnimType_09_far:
@f498:  jsr     AnimType_09
        rtl

; ------------------------------------------------------------------------------

; [ battle animation init $09: quadra slam, empowerer, quadra slice, pummel, air blade, shock, mooglerush ]

AnimType_09:
@f49c:  inc     $60ac       ; pause bg1 animation threads
        lda     #$08
        sta     $7b0e       ; 8 monster threads
        sta     $7b0f       ; 8 character threads
        ldx     #$0102      ; add bg1
        stx     $10
        lda     #$12        ; affect sprites and bg2
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [  ]

_c2f4b3:
get_caster_data_x:
@f4b3:  jsl     GetAttackerID_far
        lda     $10
        longa
        asl
        tax
        lda     f:_c2ce8b,x   ; pointer to animation thread data (+$7e64de)
        clc
        adc     #$0010
        tax
        shorta0
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $12: esper magic ]

AnimType_12:
@f4ca:  jsr     _c2f4b3
        lda     #$01
        sta     $6a35,x
        sta     $6a45,x
        sta     $6a55,x
        lda     #$00
        sta     $74d8,x
        lda     #$55
        sta     $74e8,x
        lda     #$aa
        sta     $74f8,x
        ldx     #$0302      ; add bg1 and bg2
        stx     $10
        lda     #$10        ; affect sprites
        jsl     SetColorMathHDMA_far
        lda     #$04
        sta     $7b0f
        rts

; ------------------------------------------------------------------------------

; [ copy animation thread ]

;   A: number of copies
; $26: frame delay

CopyThread:
@f4f8:  sta     $22         ; $22 = number of copies
        lda     $26
        sta     $28         ; $28 = frame delay
        ldx     $613d       ; $12 = ???
        stx     $12
        txa
        asl4
        sta     $12
        longa
        lda     $12
        lsr4
        sta     $12
        lda     $6080       ; characters/monsters with this thread
        lsr4
        sta     $6080
        stz     $24         ; +$24 = pointer to animation thread data
        shorta0
@f523:  lda     $6080
        and     #$01
        bne     @f56f       ; branch if this character/monster does not have this thread
        lda     $12
        and     #$01
        beq     @f56f
        lda     $22         ; $14 = counter for number of copies
        sta     $14
        ldx     $24         ; pointer to animation thread data
        lda     #$01
        sta     $1a         ; thread number (start with 1)
@f53a:  stx     $1e
        lda     #$10        ; $10 = 16 byte counter
        sta     $10
@f540:  lda     $6a2e,x     ; copy thread data
        sta     $6a3e,x
        lda     $6f7e,x
        sta     $6f8e,x
        lda     $74ce,x
        sta     $74de,x
        inx                 ; next byte
        dec     $10
        bne     @f540
        phx
        ldx     $1e         ; pointer to animation thread data
        lda     $1a         ; thread number
        sta     $6a46,x
        inc     $1a
        lda     $6a35,x     ; add frame delay to previous thread's frame counter
        clc
        adc     $26
        sta     $6a45,x
        plx
        dec     $14         ; next copy
        bne     @f53a
@f56f:  ror     $13         ; next character/monster
        ror     $12
        ror     $6081
        ror     $6080
        longa
        lda     $24         ; increment pointer to animation thread data
        clc
        adc     #$0080
        sta     $24
        tax
        shorta0
        cpx     #$0500
        bne     @f523
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $15: flare, step mine, dread, fenix down ]

AnimType_15:
@f58d:  jsr     _c2fa33

_c2f590:
@f590:  lda     #$08
        sta     $26
        lda     #$05
        jsr     CopyThread
        lda     #$06
        jmp     SetNumThreads

; ------------------------------------------------------------------------------

; [ battle animation init $2d: merton ]

AnimType_2d:
@f59e:  jmp     _c2fa33

; ------------------------------------------------------------------------------

; [ battle animation init $23: haste2, phantasm ]

AnimType_23:
@f5a1:  jmp     _c2fa33

; ------------------------------------------------------------------------------

; [ battle animation init $30: break ]

AnimType_30:
@f5a4:  lda     #$00
        sta     $26
        lda     #$07
        jsr     CopyThread
        lda     #$08
        jsr     SetNumThreads
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        stz     $961b       ; circle shape 0 (circle)
        jmp     _c2fa27

; ------------------------------------------------------------------------------

; [ battle animation init $22: dispel, shock wave ]

AnimType_22:
magic_type22:
@f5c1:  inc     $60ac       ; pause bg1 animation threads
        lda     #$00
        sta     $26
        lda     #$05
        jsr     CopyThread
        lda     #$06
        jmp     SetNumThreads

; ------------------------------------------------------------------------------

; [ battle animation init $2f: sketch ]

AnimType_2f:
magic_type2f:
@f5d2:  ldy     #$2800
        jsl     ClearBG1TargetTiles_far
        lda     $898d
        and     #$fe
        sta     $898d
        ldy     #3
        lda     ($76),y

.if LANG_EN_REV1
; **** added in rev 1 ****
        bpl     @f5e6
        ldx     #$ffff
        bra     @f5f1
; ************************
.endif

@f5e6:  asl
        tax
        longa
        lda     $2001,x
        tax
        shorta0
@f5f1:  jsl     LoadSketchMonsterGfx
        jmp     AnimType_0b

; ------------------------------------------------------------------------------

; [ battle animation init $2e:  ]

AnimType_2e:
magic_type2e:
@f5f8:  lda     #$08
        sta     $26
        lda     #$05
        jsr     CopyThread
        lda     #$06
        jsr     SetNumThreads
        jsr     _c2fa1b
        inc     $60ac       ; pause bg1 animation threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $21:  ]

AnimType_21:
magic_type21:
@f60d:  lda     #$08
        sta     $26
        lda     #$05
        jsr     CopyThread
        lda     #$06
        jsr     SetNumThreads
        jsr     _c2fa27
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        lda     #$05
        sta     $961b       ; circle shape 5 (small blob)
        inc     $60ac       ; pause bg1 animation threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $14: life, life 2, whump, fallen one ]

AnimType_14:
magic_type14:
@f630:  lda     #$06
        sta     $26
        lda     #$05
        jsr     CopyThread
        lda     #$06
        jmp     SetNumThreads

; ------------------------------------------------------------------------------

; [ battle animation init $1c: fire 3, muddle, cure 2, etc. ]

; tapir, ice rabbit, big guard, pearl wind, l.3 muddle, rippler, confusion, dried meat, health, shadow edge

AnimType_1c:
magic_type1c:
@f63e:  stz     $26
        lda     #$03
        jsr     CopyThread
        lda     #$04
        jsr     SetNumThreads
        jmp     _c2fa1b

; ------------------------------------------------------------------------------

; number of duplicate threads per target (meteor, fire dance)
_c2f64d:
chg_type28_copy:
@f64d:  .byte   $00,$05,$02,$01,$01,$00,$00

; ------------------------------------------------------------------------------

; total number of threads per target
_c2f654:
chg_type28_copy2:
@f654:  .byte   $01,$06,$03,$02,$02,$01,$01

; ------------------------------------------------------------------------------

; [ battle animation init $28: meteor, fire dance ]

AnimType_28:
magic_type28:
@f65b:  jsr     _c2fa03
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL     ; enable bg1 in window 2, bg2 in window 1
        lda     #$cc
        sta     f:hW34SEL     ; enable bg3 in window 2

_c2f66d:
magic_type28_main:
@f66d:  lda     #$08

_c2f66f:
magic_type28_main2:
@f66f:  sta     $26
        clr_ax
        longa
        lda     $613d       ; targets
        ldy     #$0010
@f67b:  asl
        bcc     @f67f       ; branch if target wasn't hit
        inx
@f67f:  dey                 ; next target
        bne     @f67b
        cpx     #$0006      ; max 6 targets
        bcc     @f68a
        ldx     #$0006
@f68a:  shorta0
        lda     #$06
        sta     $961b       ; circle shape 6 (horizontal oval)
        lda     f:_c2f64d,x   ; number of duplicate threads per target
        beq     @f69d
        phx
        jsr     CopyThread
        plx
@f69d:  lda     f:_c2f654,x   ; total number of threads per target
        jmp     SetNumThreads

; ------------------------------------------------------------------------------

; [ battle animation init $18: drain, osmose, raid, cold dust ]

AnimType_18:
@f6a4:  jsr     _c2fa27
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL     ; enable bg1 in window 2, bg2 in window 1
        stz     $961b       ; circle shape 0 (circle)
        inc     $60ac       ; pause bg1 animation threads
        lda     #$03
        sta     $26
        lda     #$05        ; make 5 copies
        jsr     CopyThread
        lda     #$06
        jmp     SetNumThreads

; ------------------------------------------------------------------------------

; [ battle animation init $25: fire, bio, etc. ]

; sonic boom, plasma, blaze, shimsham, sonic boom, plasma, blaze, shimsham

AnimType_25:
@f6c4:  jsr     _c2fa3f       ; set color add/sub data (add bg1 and bg2, affect sprites)
        lda     #$08        ; 8 frame delay between threads
        sta     $26
        lda     #$02        ; make 2 copies
        jsr     CopyThread
        lda     #$03
        jmp     SetNumThreads

; ------------------------------------------------------------------------------

; [ battle animation init $17: life 3 ]

AnimType_17:
@f6d5:  jsr     _c2fa1b       ; add bg1, affect sprites and bg2
        lda     #$28        ; frame delay = $28

_c2f6da:
@f6da:  sta     $26
        lda     #$01        ; 1 copy
        jsr     CopyThread
        lda     #$02
        jmp     SetNumThreads

; ------------------------------------------------------------------------------

; [ set number of animation threads ]

SetNumThreads:
@f6e6:  sta     $7b0f       ; character threads
        sta     $7b0e       ; monster threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $11: white/effect magic ]

AnimType_11:
@f6ed:  jsr     _c2f4b3
        lda     #$01
        sta     $6a35,x
        sta     $6a45,x
        lda     #$09
        sta     $6a55,x
        sta     $6a65,x
        lda     #$11
        sta     $6a75,x
        sta     $6a85,x
        lda     #$01
        sta     $6fac,x
        sta     $6fbc,x
        lda     #$02
        sta     $6fcc,x
        sta     $6fdc,x
        lda     #$80
        sta     $74e8,x
        sta     $7508,x
        sta     $7528,x
        clr_a
        sta     $74d9,x
        sta     $74f9,x
        sta     $7519,x
        lda     #$ff
        sta     $74e9,x
        sta     $7509,x
        sta     $7529,x
        jsr     AnimType_0f
        lda     #$07
        sta     $7b0f
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $0f: w wind, spiraler, black magic, blitz ]

AnimType_0f:
@f741:  jsr     _c2fa1b
        jsl     ResetSpritePriority_far
        jsl     GetAttackerID_far
        lda     $10
        jsl     _c1c3ed
        lda     #$02
        sta     $7b0e       ; 2 monster threads
        sta     $7b0f       ; 2 character threads
        lda     $896f
        and     #$f7
        sta     $896f
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $16: remedy, wild bear ]

AnimType_16:
@f763:  jsr     _c2fa1b
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        lda     #$03
        sta     $961b       ; circle shape 3 (beam from top)
        lda     #$02
        sta     $7b0e       ; 2 monster threads
        sta     $7b0f       ; 2 character threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $19: scan, targetting ]

AnimType_19:
@f77d:  jsr     _c2f9f7
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        stz     $961b       ; circle shape 0 (circle)
        lda     #$02
        sta     $7b0e       ; 2 monster threads
        sta     $7b0f       ; 2 character threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $2b:  ]

AnimType_2b:
@f795:  jsr     _c2f9d3
        lda     #$02
        sta     $7b0e
        sta     $7b0f
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $13: storm, rage/lore, swdtech ]

AnimType_13:
@f7a1:  jsr     _c2fa1b
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        stz     $961b       ; circle shape 0 (circle)
        jsl     ResetSpritePriority_far
        jsl     GetAttackerID_far
        lda     $10
        jsl     _c1c3ed
        lda     #$02
        sta     $7b0e       ; 2 monster threads
        sta     $7b0f       ; 2 character threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $0e: mantra ]

AnimType_0e:
@f7c7:  jsr     _c2fa27
        jsr     InitCircle
        lda     #$3c
        sta     f:hW12SEL
        jsl     ResetSpritePriority_far
        jsl     GetAttackerID_far
        lda     $10
        jsl     _c1c3ed
        lda     #$02
        sta     $961b       ; circle shape 2 (big blob)
        lda     #$02
        sta     $7b0e       ; 2 monster threads
        sta     $7b0f       ; 2 character threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $03: sour mouth, bio blaster ]

AnimType_03:
@f7ef:  jsr     _c2fa33
        jsr     InitCircle
        lda     #$cc
        sta     f:hW34SEL
        lda     #$01
        sta     $961b       ; circle shape 1 (bio blast)
        lda     #$02
        sta     $7b0e       ; 2 monster threads
        sta     $7b0f       ; 2 character threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $0b/10: poison, ice 2, etc. ]

; stop, float, vanish, warp, quick, cure, water edge, cleave, rage, cokatrice, wombat
; pois. frog, super ball, heal force, aero, l.5 doom, pep up, stone, chokesmoke, schiller
; megazerk, entwine, magnitude8, n. cross, r.polarity, tentacle, heart burn, discard
; back blade, x-meteo, wild fang, lagomorph, most non-spell attacks
; battle (attack $ee) uses init function $0b

AnimType_0b:
AnimType_10:
@f809:  lda     #$02
        sta     $7b0e       ; 2 monster threads
        sta     $7b0f       ; 2 character threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $05: air anchor ]

AnimType_05:
@f812:  inc     $60aa       ;
        lda     #$06
        sta     $7b0e       ; 6 monster threads
        lda     #$02
        sta     $7b0f       ; 2 character threads
        rts

; ------------------------------------------------------------------------------

; [ battle animation init $01/$07: retort, noiseblaster, flash, chain saw, drill ]

AnimType_01:
AnimType_07:
@f820:  inc     $60ac       ; pause bg1 animation threads
        lda     #$02
        sta     $7b0f       ; 2 character threads
        jmp     _c2fa3f       ; add bg1 and bg2, affect sprites

; ------------------------------------------------------------------------------

; [ battle animation init $02:  ]

AnimType_02:
@f82b:  lda     #$06
        sta     $7b0e       ; 6 monster threads
        sta     $7b0f       ; 6 character threads
        jmp     _c2fa3f       ; add bg1 and bg2, affect sprites

; ------------------------------------------------------------------------------

; [ battle animation init $00: bolt, suplex, bomblet ]

AnimType_00:
@f836:  jmp     _c2fa3f       ; add bg1 & bg2, affect sprites

; ------------------------------------------------------------------------------

; [ battle animation init $1b: ice, fire 2, bolt 2, ice 3, etc. ]

; safe, rflect, shell, fire skean, wind slash, sand storm, flash, aqua rake, revenge, l? pearl
; lullaby, acid rain, cyclonic, mega volt, giga volt, blizzard, absolute 0, gale cut, baba breath
; shadowfang, royalshock, morph

AnimType_1b:
@f839:  jmp     _c2fa1b       ; add bg1, affect sprites & bg2

; ------------------------------------------------------------------------------

; [ battle animation init $26: condemned ]

AnimType_26:
@f83c:  lda     $896f       ; disable bg3 priority
        and     #$f7
        sta     $896f
        jmp     _c2fa0f       ; add bg1, affect bg3

; ------------------------------------------------------------------------------

; [ battle animation init $27: doom, roulette, sabresoul ]

AnimType_27:
magic_type27:
@f847:  longa
        lda     $6080       ; targets hit
        eor     #$ffff
        sta     $22
        lda     $607e       ; possible targets
        and     $22
        pha
        shorta0
        plx
        bne     @f85e       ;
        rts
@f85e:  stz     $7b67       ;
        jsl     ResetSpritePriority_far
        jsl     WaitFrame_far
        jsl     UpdateSpritePriority_far
        jsl     ClearBG3Tiles_far
        jsl     _c1aaa1
        lda     $12
        bpl     @f88f       ; branch if a character
        and     #$7f
        sec
        sbc     #$04
        jsr     GetBitMask_near
        jsl     MonstersToBG1_far
        jsl     TfrBG1Tiles_far
        jsl     WaitFrame_far
        bra     @f8ae
@f88f:  and     #$03
        asl5
        tax
        clr_ay
@f899:  lda     $7f80,x
        sta     $7e60,y
        iny
        inx
        cpy     #$0020
        bne     @f899
        lda     $896f       ; change bg1 tile size to 16x16
        ora     #$10
        sta     $896f
@f8ae:  lda     $627d       ; use bg1 for graphics ???
        and     #$7f
        sta     $627d
        jsr     _c2f36f
        jsl     WaitFrame_far
        lda     $896f       ; disable bg3 priority, change bg3 tile size to 16x16
        and     #$f7
        ora     #$40
        sta     $896f
        jmp     _c2fa1b       ; add bg1, affect sprites and bg2

; ------------------------------------------------------------------------------

; [ battle animation init $1d: haste, bserk, dispatch, bum rush, dischord, wallchange, escape ]

AnimType_1d:
magic_type1d:
@f8ca:  stz     $7b67
        jsl     ResetSpritePriority_far
        jsl     WaitFrame_far
        jsl     ClearBG3Tiles_far
        jsl     _c1aaa1
        lda     $12
        bpl     @f925
        and     #$7f
        sec
        sbc     #$04
        jsr     GetBitMask_near
        pha
        sta     $14
        jsr     WaitLine160_near
        lda     $898d
        pha
        and     #$fe
        sta     $898d
        lda     $14
        jsl     MonstersToBG1_far
        jsl     TfrBG1Tiles_far
        jsl     UpdateSpritePriority_far
        jsl     WaitFrame_far
        jsr     WaitLine160_near
        lda     $896f
        and     #$e7
        sta     $896f
        pla
        sta     $898d
        pla
        eor     #$ff
        sta     $60ab
        jsl     WaitFrame_far
        bra     @f95c
@f925:  pha
        jsr     WaitLine160_near
        lda     $898d
        pha
        and     #$fe
        sta     $898d
        lda     $896f
        and     #$e7
        ora     #$50
        sta     $896f
        jsl     ClearBG1Tiles_far
        pla
        sta     $898d
        pla
        and     #$03
        asl5
        tax
        clr_ay
@f94f:  lda     $7f80,x
        sta     $7e60,y
        iny
        inx
        cpy     #$0020
        bne     @f94f
@f95c:  lda     $627d
        and     #$7f
        sta     $627d
        jmp     _c2fa0f       ; add bg1, affect bg3

; ------------------------------------------------------------------------------

; [ add bg3, affect bg1 ]

_c2f967:
hdma_set18:
@f967:  ldx     #$0402      ; add bg3
        stx     $10
        lda     #$01        ; affect bg1
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ add bg1 and bg3, affect sprites and bg2 ]

_c2f973:
hdma_set17:
@f973:  ldx     #$4502      ; half add bg1 and bg3
        stx     $10
        lda     #$12        ; affect sprites and bg2
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ add bg3, affect bg1 and bg2 ]

; unused

_c2f97f:
hdma_set16:
@f97f:  ldx     #$0402      ; add bg3
        stx     $10
        lda     #$03        ; affect bg1 and bg2
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ add bg1, affect bg2 ]

_c2f98b:
hdma_set15:
@f98b:  ldx     #$0102      ; add bg1
        stx     $10
        lda     #$02        ; affect bg2
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ add bg1, affect sprite and bg3 ]

_c2f997:
hdma_set14:
@f997:  ldx     #$0102      ; add bg1
        stx     $10
        lda     #$14        ; affect sprites and bg3
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ add bg3, affect sprites and bg2 ]

_c2f9a3:
hdma_set13:
@f9a3:  ldx     #$0402      ; add bg3
        stx     $10
        lda     #$12        ; affect sprites and bg2
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ half add bg1, affect sprites and bg3 ]

_c2f9af:
hdma_set12:
@f9af:  ldx     #$4102      ; half add bg1
        stx     $10
        lda     #$14        ; affect sprites and bg3
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ add bg2, affect bg3 ]

_c2f9bb:
hdma_set11:
@f9bb:  ldx     #$0202      ; add bg2
        stx     $10
        lda     #$04        ; affect bg3
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ add bg1 and bg3, affect sprites and bg2 ]

_c2f9c7:
hdma_set10:
@f9c7:  ldx     #$0502      ; add bg1 and bg3
        stx     $10
        lda     #$12        ; affect sprites and bg2
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ half add bg1, affect sprites and bg2 ]

_c2f9d3:
hdma_set09:
@f9d3:  ldx     #$4102      ; half add bg1
        stx     $10
        lda     #$12        ; affect sprites and bg2
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ add bg3, affect sprites ]

_c2f9df:
hdma_set08:
@f9df:  ldx     #$0402      ; add bg3
        stx     $10
        lda     #$10        ; affect sprites
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ add bg2, affect sprites ]

_c2f9eb:
hdma_set07:
@f9eb:  ldx     #$0202      ; add bg2
        stx     $10
        lda     #$10        ; affect sprites
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ half add bg1, affect sprites ]

_c2f9f7:
hdma_set06:
@f9f7:  ldx     #$4102      ; half add bg1
        stx     $10
        lda     #$10        ; affect sprites
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ add bg3, affect sprites and bg1 ]

_c2fa03:
hdma_set05:
@fa03:  ldx     #$0402      ; add bg3
        stx     $10
        lda     #$11        ; affect sprites and bg1
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ add bg1, affect bg3 ]

_c2fa0f:
hdma_set04:
@fa0f:  ldx     #$0102      ; add bg1
        stx     $10
        lda     #$04        ; affect bg3
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ add bg1, affect sprites and bg2 ]

_c2fa1b:
hdma_set03:
@fa1b:  ldx     #$0102      ; add bg1
        stx     $10
        lda     #$12        ; affect sprites and bg2
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ add bg1, affect sprites ]

_c2fa27:
hdma_set02:
@fa27:  ldx     #$0102      ; add bg1
        stx     $10
        lda     #$10        ; affect sprites
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ add bg3, affect sprites, bg1, and bg3 ]

_c2fa33:
hdma_set01:
@fa33:  ldx     #$0402      ; add bg3
        stx     $10
        lda     #$13        ; affect sprites, bg1, and bg3
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ add bg1 and bg2, affect sprites ]

_c2fa3f:
hdma_set00:
@fa3f:  ldx     #$0302      ; add bg1 and bg2
        stx     $10
        lda     #$10        ; affect sprites
        jsl     SetColorMathHDMA_far
        rts

; ------------------------------------------------------------------------------

; [ init circle (far) ]

InitCircle_far:
@fa4b:  jsr     InitCircle
        rtl

; ------------------------------------------------------------------------------

; [ init circle ]

InitCircle:
@fa4f:  clr_axy
@fa52:  lda     #$ff
        sta     $9a21,x     ; window position hdma buffer (left)
        sta     $961f,y
        inc
        sta     $9a22,x     ; window position hdma buffer (right)
        sta     $9620,y
        iny2
        inx4
        cpx     #$025c
        bne     @fa52
        inc     $6197       ;
        rts

; ------------------------------------------------------------------------------

; [ load esper palette (bg1) ]

LoadSummonPalBG1:
@fa70:  ldx     $6169
        clr_ay
@fa75:  lda     f:MonsterPal,x
        sta     $7e60,y
        sta     $7c60,y
        inx
        iny
        cpy     #$0020
        bne     @fa75
        rts

; ------------------------------------------------------------------------------

; [ load esper palette (sprite) ]

LoadSummonPalSprite:
@fa87:  ldx     $6169
        clr_ay
@fa8c:  lda     f:MonsterPal,x
        sta     $7f60,y
        sta     $7d60,y
        inx
        iny
        cpy     #$0020
        bne     @fa8c
        rts

; ------------------------------------------------------------------------------

; [ A = 1 << A ]

GetBitMask_near:
@fa9e:  tax
        lda     f:BitOrTbl,x
        rts

; ------------------------------------------------------------------------------

.segment "decompress_code"

; ------------------------------------------------------------------------------

; sin/cos table (16-bit, signed)

; python code to *almost* generate the entries in this table for x = [0...255].
; perhaps the developers used a sine function from an older floating-point
; unit which has slightly different round-off error than a modern FPU. In any
; case, about 1/8 of the values will be off by 1.

; def sine16(x):
;     sine_x = round(math.sin(2.0 * math.pi * i / 256.0) * 32767.0)
;     return sine_x if sine_x >= 0 else 0x10000 + sine_x

SineTbl16:
@fc6d:  .word   $0000,$0324,$0648,$096a,$0c8c,$0fab,$12c8,$15e2
        .word   $18f9,$1c0b,$1f1a,$2223,$2528,$2826,$2b1f,$2e11
        .word   $30fb,$33df,$36ba,$398c,$3c56,$3f17,$41ce,$447a
        .word   $471c,$49b3,$4c3f,$4ebf,$5133,$539b,$55f5,$5842
        .word   $5a82,$5cb3,$5ed7,$60eb,$62f1,$64e8,$66cf,$68a6
        .word   $6a6d,$6c23,$6dc9,$6f5e,$70e2,$7254,$73b5,$7504
        .word   $7641,$776b,$7884,$7989,$7a7c,$7b5c,$7c29,$7ce3
        .word   $7d89,$7e1d,$7e9c,$7f09,$7f61,$7fa6,$7fd8,$7ff5
        .word   $7fff,$7ff5,$7fd8,$7fa6,$7f61,$7f09,$7e9c,$7e1d
        .word   $7d89,$7ce3,$7c29,$7b5c,$7a7c,$7989,$7884,$776b
        .word   $7641,$7504,$73b5,$7254,$70e2,$6f5e,$6dc9,$6c23
        .word   $6a6d,$68a6,$66cf,$64e8,$62f1,$60eb,$5ed7,$5cb3
        .word   $5a82,$5842,$55f5,$539a,$5133,$4ebf,$4c3f,$49b3
        .word   $471c,$447a,$41ce,$3f17,$3c56,$398c,$36ba,$33de
        .word   $30fb,$2e11,$2b1f,$2826,$2528,$2223,$1f1a,$1c0b
        .word   $18f8,$15e2,$12c8,$0fab,$0c8c,$096a,$0648,$0324
        .word   $0000,$fcdc,$f9b8,$f695,$f374,$f055,$ed38,$ea1e
        .word   $e707,$e3f5,$e0e6,$dddc,$dad8,$d7d9,$d4e1,$d1ef
        .word   $cf04,$cc21,$c946,$c673,$c3aa,$c0e9,$be32,$bb86
        .word   $b8e3,$b64c,$b3c1,$b141,$aecd,$ac65,$aa0b,$a7be
        .word   $a57e,$a34c,$a129,$9f14,$9d0f,$9b18,$9931,$975a
        .word   $9593,$93dd,$9237,$90a2,$8f1e,$8dac,$8c4b,$8afc
        .word   $89bf,$8895,$877c,$8677,$8584,$84a4,$83d7,$831d
        .word   $8277,$81e3,$8164,$80f7,$809f,$805a,$8028,$800b
        .word   $8001,$800b,$8028,$805a,$809f,$80f7,$8164,$81e3
        .word   $8277,$831d,$83d7,$84a4,$8584,$8677,$877d,$8895
        .word   $89bf,$8afc,$8c4b,$8dac,$8f1e,$90a2,$9237,$93dd
        .word   $9593,$975a,$9932,$9b18,$9d0f,$9f15,$a12a,$a34d
        .word   $a57e,$a7be,$aa0b,$ac66,$aecd,$b141,$b3c1,$b64d
        .word   $b8e4,$bb86,$be33,$c0ea,$c3aa,$c674,$c947,$cc22
        .word   $cf05,$d1f0,$d4e2,$d7da,$dad9,$dddd,$e0e7,$e3f5
        .word   $e708,$ea1f,$ed39,$f055,$f375,$f696,$f9b9,$fcdc

; sin/cos table (8-bit, signed)

; python code to generate the entries in this table for x = [0...255]
; def sine8(x):
;     sine_x = round(math.sin(2.0 * math.pi * i / 256.0) * 127.0)
;     return sine_x if sine_x >= 0 else 0x100 + sine_x

SineTbl8:
@fe6d:  .byte   $00,$03,$06,$09,$0c,$10,$13,$16,$19,$1c,$1f,$22,$25,$28,$2b,$2e
        .byte   $31,$33,$36,$39,$3c,$3f,$41,$44,$47,$49,$4c,$4e,$51,$53,$55,$58
        .byte   $5a,$5c,$5e,$60,$62,$64,$66,$68,$6a,$6b,$6d,$6f,$70,$71,$73,$74
        .byte   $75,$76,$78,$79,$7a,$7a,$7b,$7c,$7d,$7d,$7e,$7e,$7e,$7f,$7f,$7f
        .byte   $7f,$7f,$7f,$7f,$7e,$7e,$7e,$7d,$7d,$7c,$7b,$7a,$7a,$79,$78,$76
        .byte   $75,$74,$73,$71,$70,$6f,$6d,$6b,$6a,$68,$66,$64,$62,$60,$5e,$5c
        .byte   $5a,$58,$55,$53,$51,$4e,$4c,$49,$47,$44,$41,$3f,$3c,$39,$36,$33
        .byte   $31,$2e,$2b,$28,$25,$22,$1f,$1c,$19,$16,$13,$10,$0c,$09,$06,$03
        .byte   $00,$fd,$fa,$f7,$f4,$f0,$ed,$ea,$e7,$e4,$e1,$de,$db,$d8,$d5,$d2
        .byte   $cf,$cd,$ca,$c7,$c4,$c1,$bf,$bc,$b9,$b7,$b4,$b2,$af,$ad,$ab,$a8
        .byte   $a6,$a4,$a2,$a0,$9e,$9c,$9a,$98,$96,$95,$93,$91,$90,$8f,$8d,$8c
        .byte   $8b,$8a,$88,$87,$86,$86,$85,$84,$83,$83,$82,$82,$82,$81,$81,$81
        .byte   $81,$81,$81,$81,$82,$82,$82,$83,$83,$84,$85,$86,$86,$87,$88,$8a
        .byte   $8b,$8c,$8d,$8f,$90,$91,$93,$95,$96,$98,$9a,$9c,$9e,$a0,$a2,$a4
        .byte   $a6,$a8,$ab,$ad,$af,$b2,$b4,$b7,$b9,$bc,$bf,$c1,$c4,$c7,$ca,$cd
        .byte   $cf,$d2,$d5,$d8,$db,$de,$e1,$e4,$e7,$ea,$ed,$f0,$f4,$f7,$fa,$fd

; ------------------------------------------------------------------------------

; [ decompress ]

Decompress_ext:
@ff6d:  phb
        phd
        ldx     #$0000
        phx
        pld
        longa
        lda     [$f3]
        sta     $fc
        lda     $f6
        sta     f:hWMADDL
        shorta
        lda     $f8
        and     #$01
        sta     f:hWMADDH
        lda     #1
        sta     $fe
        ldy     #2
        lda     #$7f
        pha
        plb
        ldx     #$f800
        clr_a
@ff99:  sta     a:$0000,x
        inx
        bne     @ff99
        ldx     #$ffde
@ffa2:  dec     $fe
        bne     @ffaf
        lda     #8
        sta     $fe
        lda     [$f3],y
        sta     $ff
        iny
@ffaf:  lsr     $ff
        bcc     @ffc4
        lda     [$f3],y
        sta     f:hWMDATA
        sta     a:$0000,x
        inx
        bne     @fff6
        ldx     #$f800
        bra     @fff6
@ffc4:  lda     [$f3],y
        xba
        iny
        sty     $f9
        lda     [$f3],y
        lsr3
        clc
        adc     #3
        sta     $fb
        lda     [$f3],y
        ora     #$f8
        xba
        tay
@ffda:  lda     $0000,y
        sta     f:hWMDATA
        sta     a:$0000,x
        inx
        bne     @ffea
        ldx     #$f800
@ffea:  iny
        bne     @fff0
        ldy     #$f800
@fff0:  dec     $fb
        bne     @ffda
        ldy     $f9
@fff6:  iny
        cpy     $fc
        bne     @ffa2
        clr_a
        xba
        pld
        plb
        rtl

; ------------------------------------------------------------------------------

.segment "attack_gfx_prop"

; d4/d000
AttackGfxProp:
        .incbin "attack_gfx_prop.dat"

; ------------------------------------------------------------------------------

.segment "weapon_anim_prop"

; ec/e400
WeaponAnimProp:
        .incbin "weapon_anim_prop.dat"

; ------------------------------------------------------------------------------

.segment "monster_attack_anim_prop"

; ec/e6e8
MonsterAttackAnimProp:
        .incbin "monster_attack_anim_prop.dat"

; ------------------------------------------------------------------------------

.export MonsterAlign

.segment "monster_align"

; ec/e800
MonsterAlign:
        .incbin "monster_align.dat"

; ------------------------------------------------------------------------------

.segment "attack_anim_script"

; d0/0000
AttackAnimScript:
        .incbin "attack_anim_script.dat"

; ------------------------------------------------------------------------------

.segment "attack_anim_script_ptrs"

; d1/ead8
AttackAnimScriptPtrs:
        make_ptr_tbl_rel AttackAnimScript, ATTACK_ANIM_SCRIPT_ARRAY_LENGTH, .bankbyte(*)<<16

; ------------------------------------------------------------------------------

.segment "attack_anim_prop"

; d0/7fb2
AttackAnimProp:
        .incbin "attack_anim_prop.dat"

; ------------------------------------------------------------------------------

.segment "battle_event"

; d0/9800
BattleEventScriptPtrs:
        make_ptr_tbl_rel BattleEventScript, BATTLE_EVENT_SCRIPT_ARRAY_LENGTH, .bankbyte(*)<<16

; d0/9842
BattleEventScript:
        .incbin "battle_event_script.dat"

; ------------------------------------------------------------------------------

.segment "attack_anim_frames"

; d1/0141
begin_fixed_block AttackAnimFrames, $e997
        .incbin "attack_anim_frames.dat"
        AttackAnimFramesEnd := *
end_fixed_block AttackAnimFrames

; ------------------------------------------------------------------------------

.segment "attack_anim_frames_ptrs"

; d4/df3c
AttackAnimFramesPtrs:
        make_ptr_tbl_rel AttackAnimFrames, ATTACK_ANIM_FRAMES_ARRAY_LENGTH, .bankbyte(*)<<16
        .addr   AttackAnimFramesEnd

; ------------------------------------------------------------------------------

.segment "item_anim"

; d1/0000
ItemAnimPtrs:
        .word   $ffff
        .word   $ffff
        .word   $ffff
        .word   $ffff
        .word   $ffff
        .word   $ffff
        .word   $ffff
        .word   402*14
        .word   337*14
        .word   338*14
        .word   339*14
        .word   340*14
        .word   341*14
        .word   342*14
        .word   343*14
        .word   344*14
        .word   345*14
        .word   346*14
        .word   347*14
        .word   348*14
        .word   349*14
        .word   350*14
        .word   351*14
        .word   352*14
        .word   353*14
        .word   354*14
        .word   355*14
        .word   356*14
        .word   357*14
        .word   358*14
        .word   359*14
        .word   $ffff

; d1/0040
ItemJumpThrowAnim:
        .incbin "item_jump_throw_anim.dat"

; ------------------------------------------------------------------------------
